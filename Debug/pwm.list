
pwm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001758  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  080018f8  080018f8  000118f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800193c  0800193c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  0800193c  0800193c  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800193c  0800193c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800193c  0800193c  0001193c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001940  08001940  00011940  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08001944  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  2000005c  080019a0  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001cc  080019a0  000201cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001475  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000006e1  00000000  00000000  00021544  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001f0  00000000  00000000  00021c28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000015d  00000000  00000000  00021e18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000fbaf  00000000  00000000  00021f75  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000256e  00000000  00000000  00031b24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00054f95  00000000  00000000  00034092  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000de0  00000000  00000000  00089028  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00089e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080018e0 	.word	0x080018e0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	080018e0 	.word	0x080018e0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
#include "pwm.h"

int cycle = 0;
uint16_t counter = 0;
int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	uart2_rxtx_init();
 8000284:	f000 fb1c 	bl	80008c0 <uart2_rxtx_init>
	Tim2_Ch1_Init();
 8000288:	f000 f81a 	bl	80002c0 <Tim2_Ch1_Init>
	Tim2_Ch2_Init();
 800028c:	f000 f874 	bl	8000378 <Tim2_Ch2_Init>
	Encoder_A_Init();
 8000290:	f000 f96c 	bl	800056c <Encoder_A_Init>

	while(1)
	{
		Motor_A_Forward(75);
 8000294:	204b      	movs	r0, #75	; 0x4b
 8000296:	f000 fa47 	bl	8000728 <Motor_A_Forward>
		counter = TIM4->CNT;
 800029a:	4b06      	ldr	r3, [pc, #24]	; (80002b4 <main+0x34>)
 800029c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800029e:	b29a      	uxth	r2, r3
 80002a0:	4b05      	ldr	r3, [pc, #20]	; (80002b8 <main+0x38>)
 80002a2:	801a      	strh	r2, [r3, #0]
//
//		Motor_A_Brake();
//		Delay(5000);
//		Delay(5000);

		printf("Counter: %d\n\n\r", counter);
 80002a4:	4b04      	ldr	r3, [pc, #16]	; (80002b8 <main+0x38>)
 80002a6:	881b      	ldrh	r3, [r3, #0]
 80002a8:	4619      	mov	r1, r3
 80002aa:	4804      	ldr	r0, [pc, #16]	; (80002bc <main+0x3c>)
 80002ac:	f000 fca2 	bl	8000bf4 <iprintf>
		Motor_A_Forward(75);
 80002b0:	e7f0      	b.n	8000294 <main+0x14>
 80002b2:	bf00      	nop
 80002b4:	40000800 	.word	0x40000800
 80002b8:	20000078 	.word	0x20000078
 80002bc:	080018f8 	.word	0x080018f8

080002c0 <Tim2_Ch1_Init>:
	/*Enable counter*/
	TIM2->CR1 |= CR1_CEN;
}

void Tim2_Ch1_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 80002c4:	4b2a      	ldr	r3, [pc, #168]	; (8000370 <Tim2_Ch1_Init+0xb0>)
 80002c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002c8:	4a29      	ldr	r2, [pc, #164]	; (8000370 <Tim2_Ch1_Init+0xb0>)
 80002ca:	f043 0301 	orr.w	r3, r3, #1
 80002ce:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA0 to alternate function mode*/
	GPIOA->MODER &= ~(1U<<0);
 80002d0:	4b28      	ldr	r3, [pc, #160]	; (8000374 <Tim2_Ch1_Init+0xb4>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	4a27      	ldr	r2, [pc, #156]	; (8000374 <Tim2_Ch1_Init+0xb4>)
 80002d6:	f023 0301 	bic.w	r3, r3, #1
 80002da:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<1);
 80002dc:	4b25      	ldr	r3, [pc, #148]	; (8000374 <Tim2_Ch1_Init+0xb4>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4a24      	ldr	r2, [pc, #144]	; (8000374 <Tim2_Ch1_Init+0xb4>)
 80002e2:	f043 0302 	orr.w	r3, r3, #2
 80002e6:	6013      	str	r3, [r2, #0]

	/*Configure the alternate function type to TIM2_CH1*/
	GPIOA->AFR[0] |=  (1U<<0);
 80002e8:	4b22      	ldr	r3, [pc, #136]	; (8000374 <Tim2_Ch1_Init+0xb4>)
 80002ea:	6a1b      	ldr	r3, [r3, #32]
 80002ec:	4a21      	ldr	r2, [pc, #132]	; (8000374 <Tim2_Ch1_Init+0xb4>)
 80002ee:	f043 0301 	orr.w	r3, r3, #1
 80002f2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<1);
 80002f4:	4b1f      	ldr	r3, [pc, #124]	; (8000374 <Tim2_Ch1_Init+0xb4>)
 80002f6:	6a1b      	ldr	r3, [r3, #32]
 80002f8:	4a1e      	ldr	r2, [pc, #120]	; (8000374 <Tim2_Ch1_Init+0xb4>)
 80002fa:	f023 0302 	bic.w	r3, r3, #2
 80002fe:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<2);
 8000300:	4b1c      	ldr	r3, [pc, #112]	; (8000374 <Tim2_Ch1_Init+0xb4>)
 8000302:	6a1b      	ldr	r3, [r3, #32]
 8000304:	4a1b      	ldr	r2, [pc, #108]	; (8000374 <Tim2_Ch1_Init+0xb4>)
 8000306:	f023 0304 	bic.w	r3, r3, #4
 800030a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<3);
 800030c:	4b19      	ldr	r3, [pc, #100]	; (8000374 <Tim2_Ch1_Init+0xb4>)
 800030e:	6a1b      	ldr	r3, [r3, #32]
 8000310:	4a18      	ldr	r2, [pc, #96]	; (8000374 <Tim2_Ch1_Init+0xb4>)
 8000312:	f023 0308 	bic.w	r3, r3, #8
 8000316:	6213      	str	r3, [r2, #32]

	/*Enable clock access to TIM2*/
	RCC->APB1ENR |= TIM2EN;
 8000318:	4b15      	ldr	r3, [pc, #84]	; (8000370 <Tim2_Ch1_Init+0xb0>)
 800031a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800031c:	4a14      	ldr	r2, [pc, #80]	; (8000370 <Tim2_Ch1_Init+0xb0>)
 800031e:	f043 0301 	orr.w	r3, r3, #1
 8000322:	6413      	str	r3, [r2, #64]	; 0x40

	/*Set prescaler value*/
	TIM2->PSC = TIM_PRESCALER - 1; // 16 000 000 / 8 = 2 000 000Hz
 8000324:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000328:	2207      	movs	r2, #7
 800032a:	629a      	str	r2, [r3, #40]	; 0x28

	/*Set auto-reload value
	 * By default, this sets the motor frequency to 20kHz, which is a frequency at the edge of the
	 * human hearing spectrum*/
	pwm_set_frequency(ARR_PRESACLER);
 800032c:	2064      	movs	r0, #100	; 0x64
 800032e:	f000 f87f 	bl	8000430 <pwm_set_frequency>

	/*Set output compare toggle mode*/
	TIM2->CCMR1 = OC1_PWM_MODE1; // Register unique to each channel
 8000332:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000336:	2260      	movs	r2, #96	; 0x60
 8000338:	619a      	str	r2, [r3, #24]

	/*Set duty cycle of PWM	% of ARR value
	 * By default, the duty cycle is set to 40% of the ARR_PRESCALER*/
	pwm_set_dutycycle(DUTY_CYCLE, CHANNEL1); // Register unique to each channel
 800033a:	2101      	movs	r1, #1
 800033c:	2028      	movs	r0, #40	; 0x28
 800033e:	f000 f886 	bl	800044e <pwm_set_dutycycle>

	/*Enable Timer 2 Channel 1 in compare mode*/
	TIM2->CCER |= CCER_CC1E; // Register unique to each channel
 8000342:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000346:	6a1b      	ldr	r3, [r3, #32]
 8000348:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800034c:	f043 0301 	orr.w	r3, r3, #1
 8000350:	6213      	str	r3, [r2, #32]

	/*Clear counter*/
	TIM2->CNT = 0;
 8000352:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000356:	2200      	movs	r2, #0
 8000358:	625a      	str	r2, [r3, #36]	; 0x24
	/*Enable counter*/
	TIM2->CR1 |= CR1_CEN;
 800035a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000364:	f043 0301 	orr.w	r3, r3, #1
 8000368:	6013      	str	r3, [r2, #0]
}
 800036a:	bf00      	nop
 800036c:	bd80      	pop	{r7, pc}
 800036e:	bf00      	nop
 8000370:	40023800 	.word	0x40023800
 8000374:	40020000 	.word	0x40020000

08000378 <Tim2_Ch2_Init>:

void Tim2_Ch2_Init(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 800037c:	4b2a      	ldr	r3, [pc, #168]	; (8000428 <Tim2_Ch2_Init+0xb0>)
 800037e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000380:	4a29      	ldr	r2, [pc, #164]	; (8000428 <Tim2_Ch2_Init+0xb0>)
 8000382:	f043 0301 	orr.w	r3, r3, #1
 8000386:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA1 to alternate function mode*/
	GPIOA->MODER &= ~(1U<<2);
 8000388:	4b28      	ldr	r3, [pc, #160]	; (800042c <Tim2_Ch2_Init+0xb4>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4a27      	ldr	r2, [pc, #156]	; (800042c <Tim2_Ch2_Init+0xb4>)
 800038e:	f023 0304 	bic.w	r3, r3, #4
 8000392:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<3);
 8000394:	4b25      	ldr	r3, [pc, #148]	; (800042c <Tim2_Ch2_Init+0xb4>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4a24      	ldr	r2, [pc, #144]	; (800042c <Tim2_Ch2_Init+0xb4>)
 800039a:	f043 0308 	orr.w	r3, r3, #8
 800039e:	6013      	str	r3, [r2, #0]

	/*Configure the alternate function type to TIM2_CH1*/
	GPIOA->AFR[0] |=  (1U<<4);
 80003a0:	4b22      	ldr	r3, [pc, #136]	; (800042c <Tim2_Ch2_Init+0xb4>)
 80003a2:	6a1b      	ldr	r3, [r3, #32]
 80003a4:	4a21      	ldr	r2, [pc, #132]	; (800042c <Tim2_Ch2_Init+0xb4>)
 80003a6:	f043 0310 	orr.w	r3, r3, #16
 80003aa:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<5);
 80003ac:	4b1f      	ldr	r3, [pc, #124]	; (800042c <Tim2_Ch2_Init+0xb4>)
 80003ae:	6a1b      	ldr	r3, [r3, #32]
 80003b0:	4a1e      	ldr	r2, [pc, #120]	; (800042c <Tim2_Ch2_Init+0xb4>)
 80003b2:	f023 0320 	bic.w	r3, r3, #32
 80003b6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<6);
 80003b8:	4b1c      	ldr	r3, [pc, #112]	; (800042c <Tim2_Ch2_Init+0xb4>)
 80003ba:	6a1b      	ldr	r3, [r3, #32]
 80003bc:	4a1b      	ldr	r2, [pc, #108]	; (800042c <Tim2_Ch2_Init+0xb4>)
 80003be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80003c2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<7);
 80003c4:	4b19      	ldr	r3, [pc, #100]	; (800042c <Tim2_Ch2_Init+0xb4>)
 80003c6:	6a1b      	ldr	r3, [r3, #32]
 80003c8:	4a18      	ldr	r2, [pc, #96]	; (800042c <Tim2_Ch2_Init+0xb4>)
 80003ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80003ce:	6213      	str	r3, [r2, #32]

	/*Enable clock access to TIM2*/
	RCC->APB1ENR |= TIM2EN;
 80003d0:	4b15      	ldr	r3, [pc, #84]	; (8000428 <Tim2_Ch2_Init+0xb0>)
 80003d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003d4:	4a14      	ldr	r2, [pc, #80]	; (8000428 <Tim2_Ch2_Init+0xb0>)
 80003d6:	f043 0301 	orr.w	r3, r3, #1
 80003da:	6413      	str	r3, [r2, #64]	; 0x40

	/*Set prescaler value*/
	TIM2->PSC = TIM_PRESCALER - 1; // 16 000 000 / 8 = 2 000 000Hz
 80003dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003e0:	2207      	movs	r2, #7
 80003e2:	629a      	str	r2, [r3, #40]	; 0x28

	/*Set auto-reload value
	 * By default, this sets the motor frequency to 20kHz, which is a frequency at the edge of the
	 * human hearing spectrum*/
	pwm_set_frequency(ARR_PRESACLER);
 80003e4:	2064      	movs	r0, #100	; 0x64
 80003e6:	f000 f823 	bl	8000430 <pwm_set_frequency>

	/*Set output compare toggle mode*/
	TIM2->CCMR1 = OC2_PWM_MODE1; // Register unique to each channel
 80003ea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003ee:	f44f 42c0 	mov.w	r2, #24576	; 0x6000
 80003f2:	619a      	str	r2, [r3, #24]

	/*Set duty cycle of PWM	% of ARR value
	 * By default, the duty cycle is set to 40% of the ARR_PRESCALER*/
	pwm_set_dutycycle(DUTY_CYCLE, CHANNEL2); // Register unique to each channel
 80003f4:	2102      	movs	r1, #2
 80003f6:	2028      	movs	r0, #40	; 0x28
 80003f8:	f000 f829 	bl	800044e <pwm_set_dutycycle>

	/*Enable Timer 2 Channel 2 in compare mode*/
	TIM2->CCER |= CCER_CC2E; // Register unique to each channel
 80003fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000400:	6a1b      	ldr	r3, [r3, #32]
 8000402:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000406:	f043 0310 	orr.w	r3, r3, #16
 800040a:	6213      	str	r3, [r2, #32]

	/*Clear counter*/
	TIM2->CNT = 0;
 800040c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000410:	2200      	movs	r2, #0
 8000412:	625a      	str	r2, [r3, #36]	; 0x24
	/*Enable counter*/
	TIM2->CR1 |= CR1_CEN;
 8000414:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800041e:	f043 0301 	orr.w	r3, r3, #1
 8000422:	6013      	str	r3, [r2, #0]
}
 8000424:	bf00      	nop
 8000426:	bd80      	pop	{r7, pc}
 8000428:	40023800 	.word	0x40023800
 800042c:	40020000 	.word	0x40020000

08000430 <pwm_set_frequency>:
/*Frequency prescaler dividing down 2Mhz to a usable frequency range
 * 2 000 000 / Freq = Desired Frequency
 */

void pwm_set_frequency(uint32_t Freq)
{
 8000430:	b480      	push	{r7}
 8000432:	b083      	sub	sp, #12
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
	TIM2->ARR = Freq - 1;
 8000438:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	3b01      	subs	r3, #1
 8000440:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8000442:	bf00      	nop
 8000444:	370c      	adds	r7, #12
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr

0800044e <pwm_set_dutycycle>:

/*Set the duty cycle of the PWM signal*/
void pwm_set_dutycycle(uint32_t DutyCycle, uint32_t channel)
{
 800044e:	b480      	push	{r7}
 8000450:	b083      	sub	sp, #12
 8000452:	af00      	add	r7, sp, #0
 8000454:	6078      	str	r0, [r7, #4]
 8000456:	6039      	str	r1, [r7, #0]
	if (channel == 1)
 8000458:	683b      	ldr	r3, [r7, #0]
 800045a:	2b01      	cmp	r3, #1
 800045c:	d105      	bne.n	800046a <pwm_set_dutycycle+0x1c>
	{
		/*Set duty cycle of Timer 2 channel 1 PWM to % of ARR value*/
		TIM2->CCR1 = DutyCycle - 1;
 800045e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	3b01      	subs	r3, #1
 8000466:	6353      	str	r3, [r2, #52]	; 0x34
	else if (channel == 2)
	{
		/*Set duty cycle of Timer 9 channel 1 PWM to % of ARR value*/
		TIM2->CCR2 = DutyCycle - 1;
	}
}
 8000468:	e007      	b.n	800047a <pwm_set_dutycycle+0x2c>
	else if (channel == 2)
 800046a:	683b      	ldr	r3, [r7, #0]
 800046c:	2b02      	cmp	r3, #2
 800046e:	d104      	bne.n	800047a <pwm_set_dutycycle+0x2c>
		TIM2->CCR2 = DutyCycle - 1;
 8000470:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	3b01      	subs	r3, #1
 8000478:	6393      	str	r3, [r2, #56]	; 0x38
}
 800047a:	bf00      	nop
 800047c:	370c      	adds	r7, #12
 800047e:	46bd      	mov	sp, r7
 8000480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000484:	4770      	bx	lr
	...

08000488 <MotorPin_Init>:

static void MotorPin_Init(void)
{
 8000488:	b480      	push	{r7}
 800048a:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 800048c:	4b35      	ldr	r3, [pc, #212]	; (8000564 <MotorPin_Init+0xdc>)
 800048e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000490:	4a34      	ldr	r2, [pc, #208]	; (8000564 <MotorPin_Init+0xdc>)
 8000492:	f043 0301 	orr.w	r3, r3, #1
 8000496:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA5 to output mode*/
	GPIOA->MODER |= (1U<<10);
 8000498:	4b33      	ldr	r3, [pc, #204]	; (8000568 <MotorPin_Init+0xe0>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4a32      	ldr	r2, [pc, #200]	; (8000568 <MotorPin_Init+0xe0>)
 800049e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004a2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U<<11);
 80004a4:	4b30      	ldr	r3, [pc, #192]	; (8000568 <MotorPin_Init+0xe0>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4a2f      	ldr	r2, [pc, #188]	; (8000568 <MotorPin_Init+0xe0>)
 80004aa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80004ae:	6013      	str	r3, [r2, #0]
	/*Set PA5 to pull down mode*/
	GPIOA->PUPDR &= ~(1U<<10);
 80004b0:	4b2d      	ldr	r3, [pc, #180]	; (8000568 <MotorPin_Init+0xe0>)
 80004b2:	68db      	ldr	r3, [r3, #12]
 80004b4:	4a2c      	ldr	r2, [pc, #176]	; (8000568 <MotorPin_Init+0xe0>)
 80004b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80004ba:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (1U<<11);
 80004bc:	4b2a      	ldr	r3, [pc, #168]	; (8000568 <MotorPin_Init+0xe0>)
 80004be:	68db      	ldr	r3, [r3, #12]
 80004c0:	4a29      	ldr	r2, [pc, #164]	; (8000568 <MotorPin_Init+0xe0>)
 80004c2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80004c6:	60d3      	str	r3, [r2, #12]

	/*Set PA4 to output mode*/
	GPIOA->MODER |= (1U<<8);
 80004c8:	4b27      	ldr	r3, [pc, #156]	; (8000568 <MotorPin_Init+0xe0>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	4a26      	ldr	r2, [pc, #152]	; (8000568 <MotorPin_Init+0xe0>)
 80004ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004d2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U<<9);
 80004d4:	4b24      	ldr	r3, [pc, #144]	; (8000568 <MotorPin_Init+0xe0>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a23      	ldr	r2, [pc, #140]	; (8000568 <MotorPin_Init+0xe0>)
 80004da:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80004de:	6013      	str	r3, [r2, #0]
	/*Set PA4 to pull down mode*/
	GPIOA->PUPDR &= ~(1U<<8);
 80004e0:	4b21      	ldr	r3, [pc, #132]	; (8000568 <MotorPin_Init+0xe0>)
 80004e2:	68db      	ldr	r3, [r3, #12]
 80004e4:	4a20      	ldr	r2, [pc, #128]	; (8000568 <MotorPin_Init+0xe0>)
 80004e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80004ea:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (1U<<9);
 80004ec:	4b1e      	ldr	r3, [pc, #120]	; (8000568 <MotorPin_Init+0xe0>)
 80004ee:	68db      	ldr	r3, [r3, #12]
 80004f0:	4a1d      	ldr	r2, [pc, #116]	; (8000568 <MotorPin_Init+0xe0>)
 80004f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004f6:	60d3      	str	r3, [r2, #12]

	/*Set PA6 to output mode*/
	GPIOA->MODER |= (1U<<12);
 80004f8:	4b1b      	ldr	r3, [pc, #108]	; (8000568 <MotorPin_Init+0xe0>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a1a      	ldr	r2, [pc, #104]	; (8000568 <MotorPin_Init+0xe0>)
 80004fe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000502:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U<<13);
 8000504:	4b18      	ldr	r3, [pc, #96]	; (8000568 <MotorPin_Init+0xe0>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a17      	ldr	r2, [pc, #92]	; (8000568 <MotorPin_Init+0xe0>)
 800050a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800050e:	6013      	str	r3, [r2, #0]
	/*Set PA6 to pull down mode*/
	GPIOA->PUPDR &= ~(1U<<12);
 8000510:	4b15      	ldr	r3, [pc, #84]	; (8000568 <MotorPin_Init+0xe0>)
 8000512:	68db      	ldr	r3, [r3, #12]
 8000514:	4a14      	ldr	r2, [pc, #80]	; (8000568 <MotorPin_Init+0xe0>)
 8000516:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800051a:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (1U<<13);
 800051c:	4b12      	ldr	r3, [pc, #72]	; (8000568 <MotorPin_Init+0xe0>)
 800051e:	68db      	ldr	r3, [r3, #12]
 8000520:	4a11      	ldr	r2, [pc, #68]	; (8000568 <MotorPin_Init+0xe0>)
 8000522:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000526:	60d3      	str	r3, [r2, #12]

	/*Set PA7 to output mode*/
	GPIOA->MODER |= (1U<<14);
 8000528:	4b0f      	ldr	r3, [pc, #60]	; (8000568 <MotorPin_Init+0xe0>)
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4a0e      	ldr	r2, [pc, #56]	; (8000568 <MotorPin_Init+0xe0>)
 800052e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000532:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U<<15);
 8000534:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <MotorPin_Init+0xe0>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	4a0b      	ldr	r2, [pc, #44]	; (8000568 <MotorPin_Init+0xe0>)
 800053a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800053e:	6013      	str	r3, [r2, #0]
	/*Set PA7 to pull down mode*/
	GPIOA->PUPDR &= ~(1U<<14);
 8000540:	4b09      	ldr	r3, [pc, #36]	; (8000568 <MotorPin_Init+0xe0>)
 8000542:	68db      	ldr	r3, [r3, #12]
 8000544:	4a08      	ldr	r2, [pc, #32]	; (8000568 <MotorPin_Init+0xe0>)
 8000546:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800054a:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (1U<<15);
 800054c:	4b06      	ldr	r3, [pc, #24]	; (8000568 <MotorPin_Init+0xe0>)
 800054e:	68db      	ldr	r3, [r3, #12]
 8000550:	4a05      	ldr	r2, [pc, #20]	; (8000568 <MotorPin_Init+0xe0>)
 8000552:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000556:	60d3      	str	r3, [r2, #12]
}
 8000558:	bf00      	nop
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	40023800 	.word	0x40023800
 8000568:	40020000 	.word	0x40020000

0800056c <Encoder_A_Init>:

void Encoder_A_Init(void)// Configuring Timer 4 channel 1 and 2 for encoder readings
{
 800056c:	b480      	push	{r7}
 800056e:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOB*/
	RCC->AHB1ENR |= GPIOBEN;
 8000570:	4b6a      	ldr	r3, [pc, #424]	; (800071c <Encoder_A_Init+0x1b0>)
 8000572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000574:	4a69      	ldr	r2, [pc, #420]	; (800071c <Encoder_A_Init+0x1b0>)
 8000576:	f043 0302 	orr.w	r3, r3, #2
 800057a:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PB6 and PB7 to alternate function mode*/
	GPIOD->MODER &= ~(1U<<12);
 800057c:	4b68      	ldr	r3, [pc, #416]	; (8000720 <Encoder_A_Init+0x1b4>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	4a67      	ldr	r2, [pc, #412]	; (8000720 <Encoder_A_Init+0x1b4>)
 8000582:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000586:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= (1U<<13);
 8000588:	4b65      	ldr	r3, [pc, #404]	; (8000720 <Encoder_A_Init+0x1b4>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	4a64      	ldr	r2, [pc, #400]	; (8000720 <Encoder_A_Init+0x1b4>)
 800058e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000592:	6013      	str	r3, [r2, #0]
	GPIOD->MODER &= ~(1U<<14);
 8000594:	4b62      	ldr	r3, [pc, #392]	; (8000720 <Encoder_A_Init+0x1b4>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a61      	ldr	r2, [pc, #388]	; (8000720 <Encoder_A_Init+0x1b4>)
 800059a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800059e:	6013      	str	r3, [r2, #0]
	GPIOD->MODER |= (1U<<15);
 80005a0:	4b5f      	ldr	r3, [pc, #380]	; (8000720 <Encoder_A_Init+0x1b4>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a5e      	ldr	r2, [pc, #376]	; (8000720 <Encoder_A_Init+0x1b4>)
 80005a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005aa:	6013      	str	r3, [r2, #0]

	/*Configure the alternate function type to TIM4_CH1*/
	GPIOD->AFR[0] &= ~(1U<<24);
 80005ac:	4b5c      	ldr	r3, [pc, #368]	; (8000720 <Encoder_A_Init+0x1b4>)
 80005ae:	6a1b      	ldr	r3, [r3, #32]
 80005b0:	4a5b      	ldr	r2, [pc, #364]	; (8000720 <Encoder_A_Init+0x1b4>)
 80005b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80005b6:	6213      	str	r3, [r2, #32]
	GPIOD->AFR[0] |=  (1U<<25);
 80005b8:	4b59      	ldr	r3, [pc, #356]	; (8000720 <Encoder_A_Init+0x1b4>)
 80005ba:	6a1b      	ldr	r3, [r3, #32]
 80005bc:	4a58      	ldr	r2, [pc, #352]	; (8000720 <Encoder_A_Init+0x1b4>)
 80005be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005c2:	6213      	str	r3, [r2, #32]
	GPIOD->AFR[0] &= ~(1U<<26);
 80005c4:	4b56      	ldr	r3, [pc, #344]	; (8000720 <Encoder_A_Init+0x1b4>)
 80005c6:	6a1b      	ldr	r3, [r3, #32]
 80005c8:	4a55      	ldr	r2, [pc, #340]	; (8000720 <Encoder_A_Init+0x1b4>)
 80005ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80005ce:	6213      	str	r3, [r2, #32]
	GPIOD->AFR[0] &= ~(1U<<27);
 80005d0:	4b53      	ldr	r3, [pc, #332]	; (8000720 <Encoder_A_Init+0x1b4>)
 80005d2:	6a1b      	ldr	r3, [r3, #32]
 80005d4:	4a52      	ldr	r2, [pc, #328]	; (8000720 <Encoder_A_Init+0x1b4>)
 80005d6:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 80005da:	6213      	str	r3, [r2, #32]

	/*Configure the alternate function type to TIM4_CH2*/
	GPIOD->AFR[0] &= ~(1U<<28);
 80005dc:	4b50      	ldr	r3, [pc, #320]	; (8000720 <Encoder_A_Init+0x1b4>)
 80005de:	6a1b      	ldr	r3, [r3, #32]
 80005e0:	4a4f      	ldr	r2, [pc, #316]	; (8000720 <Encoder_A_Init+0x1b4>)
 80005e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80005e6:	6213      	str	r3, [r2, #32]
	GPIOD->AFR[0] |=  (1U<<29);
 80005e8:	4b4d      	ldr	r3, [pc, #308]	; (8000720 <Encoder_A_Init+0x1b4>)
 80005ea:	6a1b      	ldr	r3, [r3, #32]
 80005ec:	4a4c      	ldr	r2, [pc, #304]	; (8000720 <Encoder_A_Init+0x1b4>)
 80005ee:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80005f2:	6213      	str	r3, [r2, #32]
	GPIOD->AFR[0] &= ~(1U<<30);
 80005f4:	4b4a      	ldr	r3, [pc, #296]	; (8000720 <Encoder_A_Init+0x1b4>)
 80005f6:	6a1b      	ldr	r3, [r3, #32]
 80005f8:	4a49      	ldr	r2, [pc, #292]	; (8000720 <Encoder_A_Init+0x1b4>)
 80005fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80005fe:	6213      	str	r3, [r2, #32]
	GPIOD->AFR[0] &= ~(1U<<31);
 8000600:	4b47      	ldr	r3, [pc, #284]	; (8000720 <Encoder_A_Init+0x1b4>)
 8000602:	6a1b      	ldr	r3, [r3, #32]
 8000604:	4a46      	ldr	r2, [pc, #280]	; (8000720 <Encoder_A_Init+0x1b4>)
 8000606:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800060a:	6213      	str	r3, [r2, #32]

	/*Enable clock access to TIM4*/
	RCC->APB1ENR |= TIM4EN;
 800060c:	4b43      	ldr	r3, [pc, #268]	; (800071c <Encoder_A_Init+0x1b0>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000610:	4a42      	ldr	r2, [pc, #264]	; (800071c <Encoder_A_Init+0x1b0>)
 8000612:	f043 0304 	orr.w	r3, r3, #4
 8000616:	6413      	str	r3, [r2, #64]	; 0x40

	/*Set auto-reload value*/
	TIM4->ARR = ARR_MAX;
 8000618:	4b42      	ldr	r3, [pc, #264]	; (8000724 <Encoder_A_Init+0x1b8>)
 800061a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800061e:	62da      	str	r2, [r3, #44]	; 0x2c

	/*Setting Encoder mode*/
	TIM4->SMCR |= SMS_ENC_MODE3;
 8000620:	4b40      	ldr	r3, [pc, #256]	; (8000724 <Encoder_A_Init+0x1b8>)
 8000622:	689b      	ldr	r3, [r3, #8]
 8000624:	4a3f      	ldr	r2, [pc, #252]	; (8000724 <Encoder_A_Init+0x1b8>)
 8000626:	f043 0303 	orr.w	r3, r3, #3
 800062a:	6093      	str	r3, [r2, #8]
//	TIM4->SMCR &= ~(1U<<1);
//	TIM4->SMCR &= ~(1U<<2);

	/*Set timer channels in capture (input) mode*/
	// Channel 1 is mapped on TI1
	TIM4->CCMR1 &= ~(1U<<0);
 800062c:	4b3d      	ldr	r3, [pc, #244]	; (8000724 <Encoder_A_Init+0x1b8>)
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	4a3c      	ldr	r2, [pc, #240]	; (8000724 <Encoder_A_Init+0x1b8>)
 8000632:	f023 0301 	bic.w	r3, r3, #1
 8000636:	6193      	str	r3, [r2, #24]
	TIM4->CCMR1 |= (1U<<1);
 8000638:	4b3a      	ldr	r3, [pc, #232]	; (8000724 <Encoder_A_Init+0x1b8>)
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	4a39      	ldr	r2, [pc, #228]	; (8000724 <Encoder_A_Init+0x1b8>)
 800063e:	f043 0302 	orr.w	r3, r3, #2
 8000642:	6193      	str	r3, [r2, #24]
	// Channel 2 is mapped on TI2
	TIM4->CCMR1 &= ~(1U<<8);
 8000644:	4b37      	ldr	r3, [pc, #220]	; (8000724 <Encoder_A_Init+0x1b8>)
 8000646:	699b      	ldr	r3, [r3, #24]
 8000648:	4a36      	ldr	r2, [pc, #216]	; (8000724 <Encoder_A_Init+0x1b8>)
 800064a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800064e:	6193      	str	r3, [r2, #24]
	TIM4->CCMR1 |= (1U<<9);
 8000650:	4b34      	ldr	r3, [pc, #208]	; (8000724 <Encoder_A_Init+0x1b8>)
 8000652:	699b      	ldr	r3, [r3, #24]
 8000654:	4a33      	ldr	r2, [pc, #204]	; (8000724 <Encoder_A_Init+0x1b8>)
 8000656:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800065a:	6193      	str	r3, [r2, #24]

	/*Setting the Encoder polarity*/
	// Channel 1
	TIM4->CCER &= ~CCER_CC1P;
 800065c:	4b31      	ldr	r3, [pc, #196]	; (8000724 <Encoder_A_Init+0x1b8>)
 800065e:	6a1b      	ldr	r3, [r3, #32]
 8000660:	4a30      	ldr	r2, [pc, #192]	; (8000724 <Encoder_A_Init+0x1b8>)
 8000662:	f023 0302 	bic.w	r3, r3, #2
 8000666:	6213      	str	r3, [r2, #32]
	TIM4->CCER &= ~CCER_CC1NP;
 8000668:	4b2e      	ldr	r3, [pc, #184]	; (8000724 <Encoder_A_Init+0x1b8>)
 800066a:	6a1b      	ldr	r3, [r3, #32]
 800066c:	4a2d      	ldr	r2, [pc, #180]	; (8000724 <Encoder_A_Init+0x1b8>)
 800066e:	f023 0308 	bic.w	r3, r3, #8
 8000672:	6213      	str	r3, [r2, #32]
	// Channel 2
	TIM4->CCER &= ~CCER_CC2P;
 8000674:	4b2b      	ldr	r3, [pc, #172]	; (8000724 <Encoder_A_Init+0x1b8>)
 8000676:	6a1b      	ldr	r3, [r3, #32]
 8000678:	4a2a      	ldr	r2, [pc, #168]	; (8000724 <Encoder_A_Init+0x1b8>)
 800067a:	f023 0320 	bic.w	r3, r3, #32
 800067e:	6213      	str	r3, [r2, #32]
	TIM4->CCER &= ~CCER_CC2NP;
 8000680:	4b28      	ldr	r3, [pc, #160]	; (8000724 <Encoder_A_Init+0x1b8>)
 8000682:	6a1b      	ldr	r3, [r3, #32]
 8000684:	4a27      	ldr	r2, [pc, #156]	; (8000724 <Encoder_A_Init+0x1b8>)
 8000686:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800068a:	6213      	str	r3, [r2, #32]

	/*Setting the Encoder filter*/
	// Channel 1
	TIM4->CCMR1 &= ~(1U<<4);
 800068c:	4b25      	ldr	r3, [pc, #148]	; (8000724 <Encoder_A_Init+0x1b8>)
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	4a24      	ldr	r2, [pc, #144]	; (8000724 <Encoder_A_Init+0x1b8>)
 8000692:	f023 0310 	bic.w	r3, r3, #16
 8000696:	6193      	str	r3, [r2, #24]
	TIM4->CCMR1 &= ~(1U<<5);
 8000698:	4b22      	ldr	r3, [pc, #136]	; (8000724 <Encoder_A_Init+0x1b8>)
 800069a:	699b      	ldr	r3, [r3, #24]
 800069c:	4a21      	ldr	r2, [pc, #132]	; (8000724 <Encoder_A_Init+0x1b8>)
 800069e:	f023 0320 	bic.w	r3, r3, #32
 80006a2:	6193      	str	r3, [r2, #24]
	TIM4->CCMR1 &= ~(1U<<6);
 80006a4:	4b1f      	ldr	r3, [pc, #124]	; (8000724 <Encoder_A_Init+0x1b8>)
 80006a6:	699b      	ldr	r3, [r3, #24]
 80006a8:	4a1e      	ldr	r2, [pc, #120]	; (8000724 <Encoder_A_Init+0x1b8>)
 80006aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80006ae:	6193      	str	r3, [r2, #24]
	TIM4->CCMR1 &= ~(1U<<7);
 80006b0:	4b1c      	ldr	r3, [pc, #112]	; (8000724 <Encoder_A_Init+0x1b8>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	4a1b      	ldr	r2, [pc, #108]	; (8000724 <Encoder_A_Init+0x1b8>)
 80006b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80006ba:	6193      	str	r3, [r2, #24]
	// Channel 2
	TIM4->CCMR1 &= ~(1U<<12);
 80006bc:	4b19      	ldr	r3, [pc, #100]	; (8000724 <Encoder_A_Init+0x1b8>)
 80006be:	699b      	ldr	r3, [r3, #24]
 80006c0:	4a18      	ldr	r2, [pc, #96]	; (8000724 <Encoder_A_Init+0x1b8>)
 80006c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80006c6:	6193      	str	r3, [r2, #24]
	TIM4->CCMR1 &= ~(1U<<13);
 80006c8:	4b16      	ldr	r3, [pc, #88]	; (8000724 <Encoder_A_Init+0x1b8>)
 80006ca:	699b      	ldr	r3, [r3, #24]
 80006cc:	4a15      	ldr	r2, [pc, #84]	; (8000724 <Encoder_A_Init+0x1b8>)
 80006ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80006d2:	6193      	str	r3, [r2, #24]
	TIM4->CCMR1 &= ~(1U<<14);
 80006d4:	4b13      	ldr	r3, [pc, #76]	; (8000724 <Encoder_A_Init+0x1b8>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	4a12      	ldr	r2, [pc, #72]	; (8000724 <Encoder_A_Init+0x1b8>)
 80006da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80006de:	6193      	str	r3, [r2, #24]
	TIM4->CCMR1 &= ~(1U<<15);
 80006e0:	4b10      	ldr	r3, [pc, #64]	; (8000724 <Encoder_A_Init+0x1b8>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	4a0f      	ldr	r2, [pc, #60]	; (8000724 <Encoder_A_Init+0x1b8>)
 80006e6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80006ea:	6193      	str	r3, [r2, #24]


	/*Enable Timer 4 Channel 1 in capture mode*/
	TIM4->CCER |= CCER_CC1E; // Register unique to each channel
 80006ec:	4b0d      	ldr	r3, [pc, #52]	; (8000724 <Encoder_A_Init+0x1b8>)
 80006ee:	6a1b      	ldr	r3, [r3, #32]
 80006f0:	4a0c      	ldr	r2, [pc, #48]	; (8000724 <Encoder_A_Init+0x1b8>)
 80006f2:	f043 0301 	orr.w	r3, r3, #1
 80006f6:	6213      	str	r3, [r2, #32]
	/*Enable Timer 4 Channel 2 in capture mode*/
	TIM4->CCER |= CCER_CC2E; // Register unique to each channel
 80006f8:	4b0a      	ldr	r3, [pc, #40]	; (8000724 <Encoder_A_Init+0x1b8>)
 80006fa:	6a1b      	ldr	r3, [r3, #32]
 80006fc:	4a09      	ldr	r2, [pc, #36]	; (8000724 <Encoder_A_Init+0x1b8>)
 80006fe:	f043 0310 	orr.w	r3, r3, #16
 8000702:	6213      	str	r3, [r2, #32]

	/*Clear counter*/
//	TIM4->CNT = 0;

	/*Enable counter*/
	TIM4->CR1 |= CR1_CEN;
 8000704:	4b07      	ldr	r3, [pc, #28]	; (8000724 <Encoder_A_Init+0x1b8>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	4a06      	ldr	r2, [pc, #24]	; (8000724 <Encoder_A_Init+0x1b8>)
 800070a:	f043 0301 	orr.w	r3, r3, #1
 800070e:	6013      	str	r3, [r2, #0]
}
 8000710:	bf00      	nop
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	40023800 	.word	0x40023800
 8000720:	40020c00 	.word	0x40020c00
 8000724:	40000800 	.word	0x40000800

08000728 <Motor_A_Forward>:

/* NOTE: Have to add deadtime delay to prevent shoothrough*/
void Motor_A_Forward(uint32_t speed)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b082      	sub	sp, #8
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
	MotorPin_Init();
 8000730:	f7ff feaa 	bl	8000488 <MotorPin_Init>
	GPIOA->ODR |= IN1;
 8000734:	4b09      	ldr	r3, [pc, #36]	; (800075c <Motor_A_Forward+0x34>)
 8000736:	695b      	ldr	r3, [r3, #20]
 8000738:	4a08      	ldr	r2, [pc, #32]	; (800075c <Motor_A_Forward+0x34>)
 800073a:	f043 0320 	orr.w	r3, r3, #32
 800073e:	6153      	str	r3, [r2, #20]
	GPIOA->ODR &= ~IN2;
 8000740:	4b06      	ldr	r3, [pc, #24]	; (800075c <Motor_A_Forward+0x34>)
 8000742:	695b      	ldr	r3, [r3, #20]
 8000744:	4a05      	ldr	r2, [pc, #20]	; (800075c <Motor_A_Forward+0x34>)
 8000746:	f023 0310 	bic.w	r3, r3, #16
 800074a:	6153      	str	r3, [r2, #20]
	pwm_set_dutycycle(speed, CHANNEL1);
 800074c:	2101      	movs	r1, #1
 800074e:	6878      	ldr	r0, [r7, #4]
 8000750:	f7ff fe7d 	bl	800044e <pwm_set_dutycycle>
//	Motor_A_Status();
}
 8000754:	bf00      	nop
 8000756:	3708      	adds	r7, #8
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40020000 	.word	0x40020000

08000760 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b086      	sub	sp, #24
 8000764:	af00      	add	r7, sp, #0
 8000766:	60f8      	str	r0, [r7, #12]
 8000768:	60b9      	str	r1, [r7, #8]
 800076a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]
 8000770:	e00a      	b.n	8000788 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000772:	f3af 8000 	nop.w
 8000776:	4601      	mov	r1, r0
 8000778:	68bb      	ldr	r3, [r7, #8]
 800077a:	1c5a      	adds	r2, r3, #1
 800077c:	60ba      	str	r2, [r7, #8]
 800077e:	b2ca      	uxtb	r2, r1
 8000780:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000782:	697b      	ldr	r3, [r7, #20]
 8000784:	3301      	adds	r3, #1
 8000786:	617b      	str	r3, [r7, #20]
 8000788:	697a      	ldr	r2, [r7, #20]
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	429a      	cmp	r2, r3
 800078e:	dbf0      	blt.n	8000772 <_read+0x12>
  }

  return len;
 8000790:	687b      	ldr	r3, [r7, #4]
}
 8000792:	4618      	mov	r0, r3
 8000794:	3718      	adds	r7, #24
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}

0800079a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800079a:	b580      	push	{r7, lr}
 800079c:	b086      	sub	sp, #24
 800079e:	af00      	add	r7, sp, #0
 80007a0:	60f8      	str	r0, [r7, #12]
 80007a2:	60b9      	str	r1, [r7, #8]
 80007a4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007a6:	2300      	movs	r3, #0
 80007a8:	617b      	str	r3, [r7, #20]
 80007aa:	e009      	b.n	80007c0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	1c5a      	adds	r2, r3, #1
 80007b0:	60ba      	str	r2, [r7, #8]
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	4618      	mov	r0, r3
 80007b6:	f000 f877 	bl	80008a8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007ba:	697b      	ldr	r3, [r7, #20]
 80007bc:	3301      	adds	r3, #1
 80007be:	617b      	str	r3, [r7, #20]
 80007c0:	697a      	ldr	r2, [r7, #20]
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	429a      	cmp	r2, r3
 80007c6:	dbf1      	blt.n	80007ac <_write+0x12>
  }
  return len;
 80007c8:	687b      	ldr	r3, [r7, #4]
}
 80007ca:	4618      	mov	r0, r3
 80007cc:	3718      	adds	r7, #24
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <_close>:

int _close(int file)
{
 80007d2:	b480      	push	{r7}
 80007d4:	b083      	sub	sp, #12
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80007da:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007de:	4618      	mov	r0, r3
 80007e0:	370c      	adds	r7, #12
 80007e2:	46bd      	mov	sp, r7
 80007e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e8:	4770      	bx	lr

080007ea <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007ea:	b480      	push	{r7}
 80007ec:	b083      	sub	sp, #12
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	6078      	str	r0, [r7, #4]
 80007f2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007fa:	605a      	str	r2, [r3, #4]
  return 0;
 80007fc:	2300      	movs	r3, #0
}
 80007fe:	4618      	mov	r0, r3
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr

0800080a <_isatty>:

int _isatty(int file)
{
 800080a:	b480      	push	{r7}
 800080c:	b083      	sub	sp, #12
 800080e:	af00      	add	r7, sp, #0
 8000810:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000812:	2301      	movs	r3, #1
}
 8000814:	4618      	mov	r0, r3
 8000816:	370c      	adds	r7, #12
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr

08000820 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000820:	b480      	push	{r7}
 8000822:	b085      	sub	sp, #20
 8000824:	af00      	add	r7, sp, #0
 8000826:	60f8      	str	r0, [r7, #12]
 8000828:	60b9      	str	r1, [r7, #8]
 800082a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800082c:	2300      	movs	r3, #0
}
 800082e:	4618      	mov	r0, r3
 8000830:	3714      	adds	r7, #20
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
	...

0800083c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000844:	4a14      	ldr	r2, [pc, #80]	; (8000898 <_sbrk+0x5c>)
 8000846:	4b15      	ldr	r3, [pc, #84]	; (800089c <_sbrk+0x60>)
 8000848:	1ad3      	subs	r3, r2, r3
 800084a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000850:	4b13      	ldr	r3, [pc, #76]	; (80008a0 <_sbrk+0x64>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d102      	bne.n	800085e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000858:	4b11      	ldr	r3, [pc, #68]	; (80008a0 <_sbrk+0x64>)
 800085a:	4a12      	ldr	r2, [pc, #72]	; (80008a4 <_sbrk+0x68>)
 800085c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800085e:	4b10      	ldr	r3, [pc, #64]	; (80008a0 <_sbrk+0x64>)
 8000860:	681a      	ldr	r2, [r3, #0]
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	4413      	add	r3, r2
 8000866:	693a      	ldr	r2, [r7, #16]
 8000868:	429a      	cmp	r2, r3
 800086a:	d207      	bcs.n	800087c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800086c:	f000 fa66 	bl	8000d3c <__errno>
 8000870:	4603      	mov	r3, r0
 8000872:	220c      	movs	r2, #12
 8000874:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000876:	f04f 33ff 	mov.w	r3, #4294967295
 800087a:	e009      	b.n	8000890 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800087c:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <_sbrk+0x64>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000882:	4b07      	ldr	r3, [pc, #28]	; (80008a0 <_sbrk+0x64>)
 8000884:	681a      	ldr	r2, [r3, #0]
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	4413      	add	r3, r2
 800088a:	4a05      	ldr	r2, [pc, #20]	; (80008a0 <_sbrk+0x64>)
 800088c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800088e:	68fb      	ldr	r3, [r7, #12]
}
 8000890:	4618      	mov	r0, r3
 8000892:	3718      	adds	r7, #24
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	20018000 	.word	0x20018000
 800089c:	00000400 	.word	0x00000400
 80008a0:	2000007c 	.word	0x2000007c
 80008a4:	200001d0 	.word	0x200001d0

080008a8 <__io_putchar>:
static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate);
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);
void uart2_write(int ch);

int __io_putchar(int ch)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b082      	sub	sp, #8
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	f000 f875 	bl	80009a0 <uart2_write>
	return ch;
 80008b6:	687b      	ldr	r3, [r7, #4]
}
 80008b8:	4618      	mov	r0, r3
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}

080008c0 <uart2_rxtx_init>:

void uart2_rxtx_init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
	/****************Configure uart  pin using gpio pin***************/
	/*Enable clock access to gpioa */
	RCC->AHB1ENR |= GPIOAEN;
 80008c4:	4b32      	ldr	r3, [pc, #200]	; (8000990 <uart2_rxtx_init+0xd0>)
 80008c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c8:	4a31      	ldr	r2, [pc, #196]	; (8000990 <uart2_rxtx_init+0xd0>)
 80008ca:	f043 0301 	orr.w	r3, r3, #1
 80008ce:	6313      	str	r3, [r2, #48]	; 0x30


	/*Set PA2 mode to alternate function mode*/
	GPIOA->MODER &=~ (1U<<4);
 80008d0:	4b30      	ldr	r3, [pc, #192]	; (8000994 <uart2_rxtx_init+0xd4>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4a2f      	ldr	r2, [pc, #188]	; (8000994 <uart2_rxtx_init+0xd4>)
 80008d6:	f023 0310 	bic.w	r3, r3, #16
 80008da:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 80008dc:	4b2d      	ldr	r3, [pc, #180]	; (8000994 <uart2_rxtx_init+0xd4>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	4a2c      	ldr	r2, [pc, #176]	; (8000994 <uart2_rxtx_init+0xd4>)
 80008e2:	f043 0320 	orr.w	r3, r3, #32
 80008e6:	6013      	str	r3, [r2, #0]

	/*Set PA2 alternate function type to UART_TX (AF07)*/
	GPIOA->AFR[0]|= (1U<<8);
 80008e8:	4b2a      	ldr	r3, [pc, #168]	; (8000994 <uart2_rxtx_init+0xd4>)
 80008ea:	6a1b      	ldr	r3, [r3, #32]
 80008ec:	4a29      	ldr	r2, [pc, #164]	; (8000994 <uart2_rxtx_init+0xd4>)
 80008ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008f2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<9);
 80008f4:	4b27      	ldr	r3, [pc, #156]	; (8000994 <uart2_rxtx_init+0xd4>)
 80008f6:	6a1b      	ldr	r3, [r3, #32]
 80008f8:	4a26      	ldr	r2, [pc, #152]	; (8000994 <uart2_rxtx_init+0xd4>)
 80008fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008fe:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<10);
 8000900:	4b24      	ldr	r3, [pc, #144]	; (8000994 <uart2_rxtx_init+0xd4>)
 8000902:	6a1b      	ldr	r3, [r3, #32]
 8000904:	4a23      	ldr	r2, [pc, #140]	; (8000994 <uart2_rxtx_init+0xd4>)
 8000906:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800090a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]&=~ (1U<<11);
 800090c:	4b21      	ldr	r3, [pc, #132]	; (8000994 <uart2_rxtx_init+0xd4>)
 800090e:	6a1b      	ldr	r3, [r3, #32]
 8000910:	4a20      	ldr	r2, [pc, #128]	; (8000994 <uart2_rxtx_init+0xd4>)
 8000912:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000916:	6213      	str	r3, [r2, #32]

	/*Set PA3 mode to alternate function mode*/
	GPIOA->MODER &=~ (1U<<6);
 8000918:	4b1e      	ldr	r3, [pc, #120]	; (8000994 <uart2_rxtx_init+0xd4>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a1d      	ldr	r2, [pc, #116]	; (8000994 <uart2_rxtx_init+0xd4>)
 800091e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000922:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<7);
 8000924:	4b1b      	ldr	r3, [pc, #108]	; (8000994 <uart2_rxtx_init+0xd4>)
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a1a      	ldr	r2, [pc, #104]	; (8000994 <uart2_rxtx_init+0xd4>)
 800092a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800092e:	6013      	str	r3, [r2, #0]

	/*Set PA3 alternate function type to UART_RX (AF07)*/
	GPIOA->AFR[0]|= (1U<<12);
 8000930:	4b18      	ldr	r3, [pc, #96]	; (8000994 <uart2_rxtx_init+0xd4>)
 8000932:	6a1b      	ldr	r3, [r3, #32]
 8000934:	4a17      	ldr	r2, [pc, #92]	; (8000994 <uart2_rxtx_init+0xd4>)
 8000936:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800093a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<13);
 800093c:	4b15      	ldr	r3, [pc, #84]	; (8000994 <uart2_rxtx_init+0xd4>)
 800093e:	6a1b      	ldr	r3, [r3, #32]
 8000940:	4a14      	ldr	r2, [pc, #80]	; (8000994 <uart2_rxtx_init+0xd4>)
 8000942:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000946:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<14);
 8000948:	4b12      	ldr	r3, [pc, #72]	; (8000994 <uart2_rxtx_init+0xd4>)
 800094a:	6a1b      	ldr	r3, [r3, #32]
 800094c:	4a11      	ldr	r2, [pc, #68]	; (8000994 <uart2_rxtx_init+0xd4>)
 800094e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000952:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]&=~ (1U<<15);
 8000954:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <uart2_rxtx_init+0xd4>)
 8000956:	6a1b      	ldr	r3, [r3, #32]
 8000958:	4a0e      	ldr	r2, [pc, #56]	; (8000994 <uart2_rxtx_init+0xd4>)
 800095a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800095e:	6213      	str	r3, [r2, #32]



	/****************Configure uart module ***************/
	/*Enable clock access to uart2 */
	RCC->APB1ENR |= USART2EN;
 8000960:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <uart2_rxtx_init+0xd0>)
 8000962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000964:	4a0a      	ldr	r2, [pc, #40]	; (8000990 <uart2_rxtx_init+0xd0>)
 8000966:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800096a:	6413      	str	r3, [r2, #64]	; 0x40

	/*Configure baudrate*/
	uart_set_baudrate(USART2,APB1_CLK,UART_BAUDRATE);
 800096c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000970:	4909      	ldr	r1, [pc, #36]	; (8000998 <uart2_rxtx_init+0xd8>)
 8000972:	480a      	ldr	r0, [pc, #40]	; (800099c <uart2_rxtx_init+0xdc>)
 8000974:	f000 f82c 	bl	80009d0 <uart_set_baudrate>

	/*Configure the transfer direction*/
	USART2->CR1 = (CR1_TE | CR1_RE);
 8000978:	4b08      	ldr	r3, [pc, #32]	; (800099c <uart2_rxtx_init+0xdc>)
 800097a:	220c      	movs	r2, #12
 800097c:	60da      	str	r2, [r3, #12]

	/*Enable uart module*/
	USART2->CR1 |= CR1_UE;
 800097e:	4b07      	ldr	r3, [pc, #28]	; (800099c <uart2_rxtx_init+0xdc>)
 8000980:	68db      	ldr	r3, [r3, #12]
 8000982:	4a06      	ldr	r2, [pc, #24]	; (800099c <uart2_rxtx_init+0xdc>)
 8000984:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000988:	60d3      	str	r3, [r2, #12]

}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40023800 	.word	0x40023800
 8000994:	40020000 	.word	0x40020000
 8000998:	00f42400 	.word	0x00f42400
 800099c:	40004400 	.word	0x40004400

080009a0 <uart2_write>:
	return USART2->DR;

}

void uart2_write(int ch)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
	/*Make sure the transmit data register is empty*/
	while(!(USART2->SR & SR_TXE)){} // Program stays here until condition in while loop no longer holds
 80009a8:	bf00      	nop
 80009aa:	4b08      	ldr	r3, [pc, #32]	; (80009cc <uart2_write+0x2c>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d0f9      	beq.n	80009aa <uart2_write+0xa>

	/*Write to transmit data register*/
	USART2->DR = (ch & 0xFF);
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4a04      	ldr	r2, [pc, #16]	; (80009cc <uart2_write+0x2c>)
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	6053      	str	r3, [r2, #4]
}
 80009be:	bf00      	nop
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop
 80009cc:	40004400 	.word	0x40004400

080009d0 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b084      	sub	sp, #16
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	60f8      	str	r0, [r7, #12]
 80009d8:	60b9      	str	r1, [r7, #8]
 80009da:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk,BaudRate);
 80009dc:	6879      	ldr	r1, [r7, #4]
 80009de:	68b8      	ldr	r0, [r7, #8]
 80009e0:	f000 f808 	bl	80009f4 <compute_uart_bd>
 80009e4:	4603      	mov	r3, r0
 80009e6:	461a      	mov	r2, r3
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	609a      	str	r2, [r3, #8]
}
 80009ec:	bf00      	nop
 80009ee:	3710      	adds	r7, #16
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <compute_uart_bd>:
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	085a      	lsrs	r2, r3, #1
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	441a      	add	r2, r3
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a0c:	b29b      	uxth	r3, r3
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
	...

08000a1c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a1c:	480d      	ldr	r0, [pc, #52]	; (8000a54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a1e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a20:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a24:	480c      	ldr	r0, [pc, #48]	; (8000a58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a26:	490d      	ldr	r1, [pc, #52]	; (8000a5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a28:	4a0d      	ldr	r2, [pc, #52]	; (8000a60 <LoopForever+0xe>)
  movs r3, #0
 8000a2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a2c:	e002      	b.n	8000a34 <LoopCopyDataInit>

08000a2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a32:	3304      	adds	r3, #4

08000a34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a38:	d3f9      	bcc.n	8000a2e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a3a:	4a0a      	ldr	r2, [pc, #40]	; (8000a64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a3c:	4c0a      	ldr	r4, [pc, #40]	; (8000a68 <LoopForever+0x16>)
  movs r3, #0
 8000a3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a40:	e001      	b.n	8000a46 <LoopFillZerobss>

08000a42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a44:	3204      	adds	r2, #4

08000a46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a48:	d3fb      	bcc.n	8000a42 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a4a:	f000 f97d 	bl	8000d48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a4e:	f7ff fc17 	bl	8000280 <main>

08000a52 <LoopForever>:

LoopForever:
  b LoopForever
 8000a52:	e7fe      	b.n	8000a52 <LoopForever>
  ldr   r0, =_estack
 8000a54:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a5c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000a60:	08001944 	.word	0x08001944
  ldr r2, =_sbss
 8000a64:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000a68:	200001cc 	.word	0x200001cc

08000a6c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a6c:	e7fe      	b.n	8000a6c <ADC_IRQHandler>
	...

08000a70 <std>:
 8000a70:	2300      	movs	r3, #0
 8000a72:	b510      	push	{r4, lr}
 8000a74:	4604      	mov	r4, r0
 8000a76:	e9c0 3300 	strd	r3, r3, [r0]
 8000a7a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000a7e:	6083      	str	r3, [r0, #8]
 8000a80:	8181      	strh	r1, [r0, #12]
 8000a82:	6643      	str	r3, [r0, #100]	; 0x64
 8000a84:	81c2      	strh	r2, [r0, #14]
 8000a86:	6183      	str	r3, [r0, #24]
 8000a88:	4619      	mov	r1, r3
 8000a8a:	2208      	movs	r2, #8
 8000a8c:	305c      	adds	r0, #92	; 0x5c
 8000a8e:	f000 f906 	bl	8000c9e <memset>
 8000a92:	4b0d      	ldr	r3, [pc, #52]	; (8000ac8 <std+0x58>)
 8000a94:	6263      	str	r3, [r4, #36]	; 0x24
 8000a96:	4b0d      	ldr	r3, [pc, #52]	; (8000acc <std+0x5c>)
 8000a98:	62a3      	str	r3, [r4, #40]	; 0x28
 8000a9a:	4b0d      	ldr	r3, [pc, #52]	; (8000ad0 <std+0x60>)
 8000a9c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000a9e:	4b0d      	ldr	r3, [pc, #52]	; (8000ad4 <std+0x64>)
 8000aa0:	6323      	str	r3, [r4, #48]	; 0x30
 8000aa2:	4b0d      	ldr	r3, [pc, #52]	; (8000ad8 <std+0x68>)
 8000aa4:	6224      	str	r4, [r4, #32]
 8000aa6:	429c      	cmp	r4, r3
 8000aa8:	d006      	beq.n	8000ab8 <std+0x48>
 8000aaa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8000aae:	4294      	cmp	r4, r2
 8000ab0:	d002      	beq.n	8000ab8 <std+0x48>
 8000ab2:	33d0      	adds	r3, #208	; 0xd0
 8000ab4:	429c      	cmp	r4, r3
 8000ab6:	d105      	bne.n	8000ac4 <std+0x54>
 8000ab8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000abc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ac0:	f000 b966 	b.w	8000d90 <__retarget_lock_init_recursive>
 8000ac4:	bd10      	pop	{r4, pc}
 8000ac6:	bf00      	nop
 8000ac8:	08000c19 	.word	0x08000c19
 8000acc:	08000c3b 	.word	0x08000c3b
 8000ad0:	08000c73 	.word	0x08000c73
 8000ad4:	08000c97 	.word	0x08000c97
 8000ad8:	20000080 	.word	0x20000080

08000adc <stdio_exit_handler>:
 8000adc:	4a02      	ldr	r2, [pc, #8]	; (8000ae8 <stdio_exit_handler+0xc>)
 8000ade:	4903      	ldr	r1, [pc, #12]	; (8000aec <stdio_exit_handler+0x10>)
 8000ae0:	4803      	ldr	r0, [pc, #12]	; (8000af0 <stdio_exit_handler+0x14>)
 8000ae2:	f000 b869 	b.w	8000bb8 <_fwalk_sglue>
 8000ae6:	bf00      	nop
 8000ae8:	20000000 	.word	0x20000000
 8000aec:	0800163d 	.word	0x0800163d
 8000af0:	2000000c 	.word	0x2000000c

08000af4 <cleanup_stdio>:
 8000af4:	6841      	ldr	r1, [r0, #4]
 8000af6:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <cleanup_stdio+0x34>)
 8000af8:	4299      	cmp	r1, r3
 8000afa:	b510      	push	{r4, lr}
 8000afc:	4604      	mov	r4, r0
 8000afe:	d001      	beq.n	8000b04 <cleanup_stdio+0x10>
 8000b00:	f000 fd9c 	bl	800163c <_fflush_r>
 8000b04:	68a1      	ldr	r1, [r4, #8]
 8000b06:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <cleanup_stdio+0x38>)
 8000b08:	4299      	cmp	r1, r3
 8000b0a:	d002      	beq.n	8000b12 <cleanup_stdio+0x1e>
 8000b0c:	4620      	mov	r0, r4
 8000b0e:	f000 fd95 	bl	800163c <_fflush_r>
 8000b12:	68e1      	ldr	r1, [r4, #12]
 8000b14:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <cleanup_stdio+0x3c>)
 8000b16:	4299      	cmp	r1, r3
 8000b18:	d004      	beq.n	8000b24 <cleanup_stdio+0x30>
 8000b1a:	4620      	mov	r0, r4
 8000b1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b20:	f000 bd8c 	b.w	800163c <_fflush_r>
 8000b24:	bd10      	pop	{r4, pc}
 8000b26:	bf00      	nop
 8000b28:	20000080 	.word	0x20000080
 8000b2c:	200000e8 	.word	0x200000e8
 8000b30:	20000150 	.word	0x20000150

08000b34 <global_stdio_init.part.0>:
 8000b34:	b510      	push	{r4, lr}
 8000b36:	4b0b      	ldr	r3, [pc, #44]	; (8000b64 <global_stdio_init.part.0+0x30>)
 8000b38:	4c0b      	ldr	r4, [pc, #44]	; (8000b68 <global_stdio_init.part.0+0x34>)
 8000b3a:	4a0c      	ldr	r2, [pc, #48]	; (8000b6c <global_stdio_init.part.0+0x38>)
 8000b3c:	601a      	str	r2, [r3, #0]
 8000b3e:	4620      	mov	r0, r4
 8000b40:	2200      	movs	r2, #0
 8000b42:	2104      	movs	r1, #4
 8000b44:	f7ff ff94 	bl	8000a70 <std>
 8000b48:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	2109      	movs	r1, #9
 8000b50:	f7ff ff8e 	bl	8000a70 <std>
 8000b54:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000b58:	2202      	movs	r2, #2
 8000b5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b5e:	2112      	movs	r1, #18
 8000b60:	f7ff bf86 	b.w	8000a70 <std>
 8000b64:	200001b8 	.word	0x200001b8
 8000b68:	20000080 	.word	0x20000080
 8000b6c:	08000add 	.word	0x08000add

08000b70 <__sfp_lock_acquire>:
 8000b70:	4801      	ldr	r0, [pc, #4]	; (8000b78 <__sfp_lock_acquire+0x8>)
 8000b72:	f000 b90e 	b.w	8000d92 <__retarget_lock_acquire_recursive>
 8000b76:	bf00      	nop
 8000b78:	200001c1 	.word	0x200001c1

08000b7c <__sfp_lock_release>:
 8000b7c:	4801      	ldr	r0, [pc, #4]	; (8000b84 <__sfp_lock_release+0x8>)
 8000b7e:	f000 b909 	b.w	8000d94 <__retarget_lock_release_recursive>
 8000b82:	bf00      	nop
 8000b84:	200001c1 	.word	0x200001c1

08000b88 <__sinit>:
 8000b88:	b510      	push	{r4, lr}
 8000b8a:	4604      	mov	r4, r0
 8000b8c:	f7ff fff0 	bl	8000b70 <__sfp_lock_acquire>
 8000b90:	6a23      	ldr	r3, [r4, #32]
 8000b92:	b11b      	cbz	r3, 8000b9c <__sinit+0x14>
 8000b94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b98:	f7ff bff0 	b.w	8000b7c <__sfp_lock_release>
 8000b9c:	4b04      	ldr	r3, [pc, #16]	; (8000bb0 <__sinit+0x28>)
 8000b9e:	6223      	str	r3, [r4, #32]
 8000ba0:	4b04      	ldr	r3, [pc, #16]	; (8000bb4 <__sinit+0x2c>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d1f5      	bne.n	8000b94 <__sinit+0xc>
 8000ba8:	f7ff ffc4 	bl	8000b34 <global_stdio_init.part.0>
 8000bac:	e7f2      	b.n	8000b94 <__sinit+0xc>
 8000bae:	bf00      	nop
 8000bb0:	08000af5 	.word	0x08000af5
 8000bb4:	200001b8 	.word	0x200001b8

08000bb8 <_fwalk_sglue>:
 8000bb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000bbc:	4607      	mov	r7, r0
 8000bbe:	4688      	mov	r8, r1
 8000bc0:	4614      	mov	r4, r2
 8000bc2:	2600      	movs	r6, #0
 8000bc4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000bc8:	f1b9 0901 	subs.w	r9, r9, #1
 8000bcc:	d505      	bpl.n	8000bda <_fwalk_sglue+0x22>
 8000bce:	6824      	ldr	r4, [r4, #0]
 8000bd0:	2c00      	cmp	r4, #0
 8000bd2:	d1f7      	bne.n	8000bc4 <_fwalk_sglue+0xc>
 8000bd4:	4630      	mov	r0, r6
 8000bd6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000bda:	89ab      	ldrh	r3, [r5, #12]
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d907      	bls.n	8000bf0 <_fwalk_sglue+0x38>
 8000be0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000be4:	3301      	adds	r3, #1
 8000be6:	d003      	beq.n	8000bf0 <_fwalk_sglue+0x38>
 8000be8:	4629      	mov	r1, r5
 8000bea:	4638      	mov	r0, r7
 8000bec:	47c0      	blx	r8
 8000bee:	4306      	orrs	r6, r0
 8000bf0:	3568      	adds	r5, #104	; 0x68
 8000bf2:	e7e9      	b.n	8000bc8 <_fwalk_sglue+0x10>

08000bf4 <iprintf>:
 8000bf4:	b40f      	push	{r0, r1, r2, r3}
 8000bf6:	b507      	push	{r0, r1, r2, lr}
 8000bf8:	4906      	ldr	r1, [pc, #24]	; (8000c14 <iprintf+0x20>)
 8000bfa:	ab04      	add	r3, sp, #16
 8000bfc:	6808      	ldr	r0, [r1, #0]
 8000bfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8000c02:	6881      	ldr	r1, [r0, #8]
 8000c04:	9301      	str	r3, [sp, #4]
 8000c06:	f000 f9e9 	bl	8000fdc <_vfiprintf_r>
 8000c0a:	b003      	add	sp, #12
 8000c0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8000c10:	b004      	add	sp, #16
 8000c12:	4770      	bx	lr
 8000c14:	20000058 	.word	0x20000058

08000c18 <__sread>:
 8000c18:	b510      	push	{r4, lr}
 8000c1a:	460c      	mov	r4, r1
 8000c1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c20:	f000 f868 	bl	8000cf4 <_read_r>
 8000c24:	2800      	cmp	r0, #0
 8000c26:	bfab      	itete	ge
 8000c28:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000c2a:	89a3      	ldrhlt	r3, [r4, #12]
 8000c2c:	181b      	addge	r3, r3, r0
 8000c2e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000c32:	bfac      	ite	ge
 8000c34:	6563      	strge	r3, [r4, #84]	; 0x54
 8000c36:	81a3      	strhlt	r3, [r4, #12]
 8000c38:	bd10      	pop	{r4, pc}

08000c3a <__swrite>:
 8000c3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c3e:	461f      	mov	r7, r3
 8000c40:	898b      	ldrh	r3, [r1, #12]
 8000c42:	05db      	lsls	r3, r3, #23
 8000c44:	4605      	mov	r5, r0
 8000c46:	460c      	mov	r4, r1
 8000c48:	4616      	mov	r6, r2
 8000c4a:	d505      	bpl.n	8000c58 <__swrite+0x1e>
 8000c4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c50:	2302      	movs	r3, #2
 8000c52:	2200      	movs	r2, #0
 8000c54:	f000 f83c 	bl	8000cd0 <_lseek_r>
 8000c58:	89a3      	ldrh	r3, [r4, #12]
 8000c5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000c5e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000c62:	81a3      	strh	r3, [r4, #12]
 8000c64:	4632      	mov	r2, r6
 8000c66:	463b      	mov	r3, r7
 8000c68:	4628      	mov	r0, r5
 8000c6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000c6e:	f000 b853 	b.w	8000d18 <_write_r>

08000c72 <__sseek>:
 8000c72:	b510      	push	{r4, lr}
 8000c74:	460c      	mov	r4, r1
 8000c76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c7a:	f000 f829 	bl	8000cd0 <_lseek_r>
 8000c7e:	1c43      	adds	r3, r0, #1
 8000c80:	89a3      	ldrh	r3, [r4, #12]
 8000c82:	bf15      	itete	ne
 8000c84:	6560      	strne	r0, [r4, #84]	; 0x54
 8000c86:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000c8a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000c8e:	81a3      	strheq	r3, [r4, #12]
 8000c90:	bf18      	it	ne
 8000c92:	81a3      	strhne	r3, [r4, #12]
 8000c94:	bd10      	pop	{r4, pc}

08000c96 <__sclose>:
 8000c96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c9a:	f000 b809 	b.w	8000cb0 <_close_r>

08000c9e <memset>:
 8000c9e:	4402      	add	r2, r0
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d100      	bne.n	8000ca8 <memset+0xa>
 8000ca6:	4770      	bx	lr
 8000ca8:	f803 1b01 	strb.w	r1, [r3], #1
 8000cac:	e7f9      	b.n	8000ca2 <memset+0x4>
	...

08000cb0 <_close_r>:
 8000cb0:	b538      	push	{r3, r4, r5, lr}
 8000cb2:	4d06      	ldr	r5, [pc, #24]	; (8000ccc <_close_r+0x1c>)
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	4604      	mov	r4, r0
 8000cb8:	4608      	mov	r0, r1
 8000cba:	602b      	str	r3, [r5, #0]
 8000cbc:	f7ff fd89 	bl	80007d2 <_close>
 8000cc0:	1c43      	adds	r3, r0, #1
 8000cc2:	d102      	bne.n	8000cca <_close_r+0x1a>
 8000cc4:	682b      	ldr	r3, [r5, #0]
 8000cc6:	b103      	cbz	r3, 8000cca <_close_r+0x1a>
 8000cc8:	6023      	str	r3, [r4, #0]
 8000cca:	bd38      	pop	{r3, r4, r5, pc}
 8000ccc:	200001bc 	.word	0x200001bc

08000cd0 <_lseek_r>:
 8000cd0:	b538      	push	{r3, r4, r5, lr}
 8000cd2:	4d07      	ldr	r5, [pc, #28]	; (8000cf0 <_lseek_r+0x20>)
 8000cd4:	4604      	mov	r4, r0
 8000cd6:	4608      	mov	r0, r1
 8000cd8:	4611      	mov	r1, r2
 8000cda:	2200      	movs	r2, #0
 8000cdc:	602a      	str	r2, [r5, #0]
 8000cde:	461a      	mov	r2, r3
 8000ce0:	f7ff fd9e 	bl	8000820 <_lseek>
 8000ce4:	1c43      	adds	r3, r0, #1
 8000ce6:	d102      	bne.n	8000cee <_lseek_r+0x1e>
 8000ce8:	682b      	ldr	r3, [r5, #0]
 8000cea:	b103      	cbz	r3, 8000cee <_lseek_r+0x1e>
 8000cec:	6023      	str	r3, [r4, #0]
 8000cee:	bd38      	pop	{r3, r4, r5, pc}
 8000cf0:	200001bc 	.word	0x200001bc

08000cf4 <_read_r>:
 8000cf4:	b538      	push	{r3, r4, r5, lr}
 8000cf6:	4d07      	ldr	r5, [pc, #28]	; (8000d14 <_read_r+0x20>)
 8000cf8:	4604      	mov	r4, r0
 8000cfa:	4608      	mov	r0, r1
 8000cfc:	4611      	mov	r1, r2
 8000cfe:	2200      	movs	r2, #0
 8000d00:	602a      	str	r2, [r5, #0]
 8000d02:	461a      	mov	r2, r3
 8000d04:	f7ff fd2c 	bl	8000760 <_read>
 8000d08:	1c43      	adds	r3, r0, #1
 8000d0a:	d102      	bne.n	8000d12 <_read_r+0x1e>
 8000d0c:	682b      	ldr	r3, [r5, #0]
 8000d0e:	b103      	cbz	r3, 8000d12 <_read_r+0x1e>
 8000d10:	6023      	str	r3, [r4, #0]
 8000d12:	bd38      	pop	{r3, r4, r5, pc}
 8000d14:	200001bc 	.word	0x200001bc

08000d18 <_write_r>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	4d07      	ldr	r5, [pc, #28]	; (8000d38 <_write_r+0x20>)
 8000d1c:	4604      	mov	r4, r0
 8000d1e:	4608      	mov	r0, r1
 8000d20:	4611      	mov	r1, r2
 8000d22:	2200      	movs	r2, #0
 8000d24:	602a      	str	r2, [r5, #0]
 8000d26:	461a      	mov	r2, r3
 8000d28:	f7ff fd37 	bl	800079a <_write>
 8000d2c:	1c43      	adds	r3, r0, #1
 8000d2e:	d102      	bne.n	8000d36 <_write_r+0x1e>
 8000d30:	682b      	ldr	r3, [r5, #0]
 8000d32:	b103      	cbz	r3, 8000d36 <_write_r+0x1e>
 8000d34:	6023      	str	r3, [r4, #0]
 8000d36:	bd38      	pop	{r3, r4, r5, pc}
 8000d38:	200001bc 	.word	0x200001bc

08000d3c <__errno>:
 8000d3c:	4b01      	ldr	r3, [pc, #4]	; (8000d44 <__errno+0x8>)
 8000d3e:	6818      	ldr	r0, [r3, #0]
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	20000058 	.word	0x20000058

08000d48 <__libc_init_array>:
 8000d48:	b570      	push	{r4, r5, r6, lr}
 8000d4a:	4d0d      	ldr	r5, [pc, #52]	; (8000d80 <__libc_init_array+0x38>)
 8000d4c:	4c0d      	ldr	r4, [pc, #52]	; (8000d84 <__libc_init_array+0x3c>)
 8000d4e:	1b64      	subs	r4, r4, r5
 8000d50:	10a4      	asrs	r4, r4, #2
 8000d52:	2600      	movs	r6, #0
 8000d54:	42a6      	cmp	r6, r4
 8000d56:	d109      	bne.n	8000d6c <__libc_init_array+0x24>
 8000d58:	4d0b      	ldr	r5, [pc, #44]	; (8000d88 <__libc_init_array+0x40>)
 8000d5a:	4c0c      	ldr	r4, [pc, #48]	; (8000d8c <__libc_init_array+0x44>)
 8000d5c:	f000 fdc0 	bl	80018e0 <_init>
 8000d60:	1b64      	subs	r4, r4, r5
 8000d62:	10a4      	asrs	r4, r4, #2
 8000d64:	2600      	movs	r6, #0
 8000d66:	42a6      	cmp	r6, r4
 8000d68:	d105      	bne.n	8000d76 <__libc_init_array+0x2e>
 8000d6a:	bd70      	pop	{r4, r5, r6, pc}
 8000d6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d70:	4798      	blx	r3
 8000d72:	3601      	adds	r6, #1
 8000d74:	e7ee      	b.n	8000d54 <__libc_init_array+0xc>
 8000d76:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d7a:	4798      	blx	r3
 8000d7c:	3601      	adds	r6, #1
 8000d7e:	e7f2      	b.n	8000d66 <__libc_init_array+0x1e>
 8000d80:	0800193c 	.word	0x0800193c
 8000d84:	0800193c 	.word	0x0800193c
 8000d88:	0800193c 	.word	0x0800193c
 8000d8c:	08001940 	.word	0x08001940

08000d90 <__retarget_lock_init_recursive>:
 8000d90:	4770      	bx	lr

08000d92 <__retarget_lock_acquire_recursive>:
 8000d92:	4770      	bx	lr

08000d94 <__retarget_lock_release_recursive>:
 8000d94:	4770      	bx	lr
	...

08000d98 <_free_r>:
 8000d98:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000d9a:	2900      	cmp	r1, #0
 8000d9c:	d044      	beq.n	8000e28 <_free_r+0x90>
 8000d9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000da2:	9001      	str	r0, [sp, #4]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	f1a1 0404 	sub.w	r4, r1, #4
 8000daa:	bfb8      	it	lt
 8000dac:	18e4      	addlt	r4, r4, r3
 8000dae:	f000 f8df 	bl	8000f70 <__malloc_lock>
 8000db2:	4a1e      	ldr	r2, [pc, #120]	; (8000e2c <_free_r+0x94>)
 8000db4:	9801      	ldr	r0, [sp, #4]
 8000db6:	6813      	ldr	r3, [r2, #0]
 8000db8:	b933      	cbnz	r3, 8000dc8 <_free_r+0x30>
 8000dba:	6063      	str	r3, [r4, #4]
 8000dbc:	6014      	str	r4, [r2, #0]
 8000dbe:	b003      	add	sp, #12
 8000dc0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000dc4:	f000 b8da 	b.w	8000f7c <__malloc_unlock>
 8000dc8:	42a3      	cmp	r3, r4
 8000dca:	d908      	bls.n	8000dde <_free_r+0x46>
 8000dcc:	6825      	ldr	r5, [r4, #0]
 8000dce:	1961      	adds	r1, r4, r5
 8000dd0:	428b      	cmp	r3, r1
 8000dd2:	bf01      	itttt	eq
 8000dd4:	6819      	ldreq	r1, [r3, #0]
 8000dd6:	685b      	ldreq	r3, [r3, #4]
 8000dd8:	1949      	addeq	r1, r1, r5
 8000dda:	6021      	streq	r1, [r4, #0]
 8000ddc:	e7ed      	b.n	8000dba <_free_r+0x22>
 8000dde:	461a      	mov	r2, r3
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	b10b      	cbz	r3, 8000de8 <_free_r+0x50>
 8000de4:	42a3      	cmp	r3, r4
 8000de6:	d9fa      	bls.n	8000dde <_free_r+0x46>
 8000de8:	6811      	ldr	r1, [r2, #0]
 8000dea:	1855      	adds	r5, r2, r1
 8000dec:	42a5      	cmp	r5, r4
 8000dee:	d10b      	bne.n	8000e08 <_free_r+0x70>
 8000df0:	6824      	ldr	r4, [r4, #0]
 8000df2:	4421      	add	r1, r4
 8000df4:	1854      	adds	r4, r2, r1
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	6011      	str	r1, [r2, #0]
 8000dfa:	d1e0      	bne.n	8000dbe <_free_r+0x26>
 8000dfc:	681c      	ldr	r4, [r3, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	6053      	str	r3, [r2, #4]
 8000e02:	440c      	add	r4, r1
 8000e04:	6014      	str	r4, [r2, #0]
 8000e06:	e7da      	b.n	8000dbe <_free_r+0x26>
 8000e08:	d902      	bls.n	8000e10 <_free_r+0x78>
 8000e0a:	230c      	movs	r3, #12
 8000e0c:	6003      	str	r3, [r0, #0]
 8000e0e:	e7d6      	b.n	8000dbe <_free_r+0x26>
 8000e10:	6825      	ldr	r5, [r4, #0]
 8000e12:	1961      	adds	r1, r4, r5
 8000e14:	428b      	cmp	r3, r1
 8000e16:	bf04      	itt	eq
 8000e18:	6819      	ldreq	r1, [r3, #0]
 8000e1a:	685b      	ldreq	r3, [r3, #4]
 8000e1c:	6063      	str	r3, [r4, #4]
 8000e1e:	bf04      	itt	eq
 8000e20:	1949      	addeq	r1, r1, r5
 8000e22:	6021      	streq	r1, [r4, #0]
 8000e24:	6054      	str	r4, [r2, #4]
 8000e26:	e7ca      	b.n	8000dbe <_free_r+0x26>
 8000e28:	b003      	add	sp, #12
 8000e2a:	bd30      	pop	{r4, r5, pc}
 8000e2c:	200001c4 	.word	0x200001c4

08000e30 <sbrk_aligned>:
 8000e30:	b570      	push	{r4, r5, r6, lr}
 8000e32:	4e0e      	ldr	r6, [pc, #56]	; (8000e6c <sbrk_aligned+0x3c>)
 8000e34:	460c      	mov	r4, r1
 8000e36:	6831      	ldr	r1, [r6, #0]
 8000e38:	4605      	mov	r5, r0
 8000e3a:	b911      	cbnz	r1, 8000e42 <sbrk_aligned+0x12>
 8000e3c:	f000 fcbc 	bl	80017b8 <_sbrk_r>
 8000e40:	6030      	str	r0, [r6, #0]
 8000e42:	4621      	mov	r1, r4
 8000e44:	4628      	mov	r0, r5
 8000e46:	f000 fcb7 	bl	80017b8 <_sbrk_r>
 8000e4a:	1c43      	adds	r3, r0, #1
 8000e4c:	d00a      	beq.n	8000e64 <sbrk_aligned+0x34>
 8000e4e:	1cc4      	adds	r4, r0, #3
 8000e50:	f024 0403 	bic.w	r4, r4, #3
 8000e54:	42a0      	cmp	r0, r4
 8000e56:	d007      	beq.n	8000e68 <sbrk_aligned+0x38>
 8000e58:	1a21      	subs	r1, r4, r0
 8000e5a:	4628      	mov	r0, r5
 8000e5c:	f000 fcac 	bl	80017b8 <_sbrk_r>
 8000e60:	3001      	adds	r0, #1
 8000e62:	d101      	bne.n	8000e68 <sbrk_aligned+0x38>
 8000e64:	f04f 34ff 	mov.w	r4, #4294967295
 8000e68:	4620      	mov	r0, r4
 8000e6a:	bd70      	pop	{r4, r5, r6, pc}
 8000e6c:	200001c8 	.word	0x200001c8

08000e70 <_malloc_r>:
 8000e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000e74:	1ccd      	adds	r5, r1, #3
 8000e76:	f025 0503 	bic.w	r5, r5, #3
 8000e7a:	3508      	adds	r5, #8
 8000e7c:	2d0c      	cmp	r5, #12
 8000e7e:	bf38      	it	cc
 8000e80:	250c      	movcc	r5, #12
 8000e82:	2d00      	cmp	r5, #0
 8000e84:	4607      	mov	r7, r0
 8000e86:	db01      	blt.n	8000e8c <_malloc_r+0x1c>
 8000e88:	42a9      	cmp	r1, r5
 8000e8a:	d905      	bls.n	8000e98 <_malloc_r+0x28>
 8000e8c:	230c      	movs	r3, #12
 8000e8e:	603b      	str	r3, [r7, #0]
 8000e90:	2600      	movs	r6, #0
 8000e92:	4630      	mov	r0, r6
 8000e94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000e98:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000f6c <_malloc_r+0xfc>
 8000e9c:	f000 f868 	bl	8000f70 <__malloc_lock>
 8000ea0:	f8d8 3000 	ldr.w	r3, [r8]
 8000ea4:	461c      	mov	r4, r3
 8000ea6:	bb5c      	cbnz	r4, 8000f00 <_malloc_r+0x90>
 8000ea8:	4629      	mov	r1, r5
 8000eaa:	4638      	mov	r0, r7
 8000eac:	f7ff ffc0 	bl	8000e30 <sbrk_aligned>
 8000eb0:	1c43      	adds	r3, r0, #1
 8000eb2:	4604      	mov	r4, r0
 8000eb4:	d155      	bne.n	8000f62 <_malloc_r+0xf2>
 8000eb6:	f8d8 4000 	ldr.w	r4, [r8]
 8000eba:	4626      	mov	r6, r4
 8000ebc:	2e00      	cmp	r6, #0
 8000ebe:	d145      	bne.n	8000f4c <_malloc_r+0xdc>
 8000ec0:	2c00      	cmp	r4, #0
 8000ec2:	d048      	beq.n	8000f56 <_malloc_r+0xe6>
 8000ec4:	6823      	ldr	r3, [r4, #0]
 8000ec6:	4631      	mov	r1, r6
 8000ec8:	4638      	mov	r0, r7
 8000eca:	eb04 0903 	add.w	r9, r4, r3
 8000ece:	f000 fc73 	bl	80017b8 <_sbrk_r>
 8000ed2:	4581      	cmp	r9, r0
 8000ed4:	d13f      	bne.n	8000f56 <_malloc_r+0xe6>
 8000ed6:	6821      	ldr	r1, [r4, #0]
 8000ed8:	1a6d      	subs	r5, r5, r1
 8000eda:	4629      	mov	r1, r5
 8000edc:	4638      	mov	r0, r7
 8000ede:	f7ff ffa7 	bl	8000e30 <sbrk_aligned>
 8000ee2:	3001      	adds	r0, #1
 8000ee4:	d037      	beq.n	8000f56 <_malloc_r+0xe6>
 8000ee6:	6823      	ldr	r3, [r4, #0]
 8000ee8:	442b      	add	r3, r5
 8000eea:	6023      	str	r3, [r4, #0]
 8000eec:	f8d8 3000 	ldr.w	r3, [r8]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d038      	beq.n	8000f66 <_malloc_r+0xf6>
 8000ef4:	685a      	ldr	r2, [r3, #4]
 8000ef6:	42a2      	cmp	r2, r4
 8000ef8:	d12b      	bne.n	8000f52 <_malloc_r+0xe2>
 8000efa:	2200      	movs	r2, #0
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	e00f      	b.n	8000f20 <_malloc_r+0xb0>
 8000f00:	6822      	ldr	r2, [r4, #0]
 8000f02:	1b52      	subs	r2, r2, r5
 8000f04:	d41f      	bmi.n	8000f46 <_malloc_r+0xd6>
 8000f06:	2a0b      	cmp	r2, #11
 8000f08:	d917      	bls.n	8000f3a <_malloc_r+0xca>
 8000f0a:	1961      	adds	r1, r4, r5
 8000f0c:	42a3      	cmp	r3, r4
 8000f0e:	6025      	str	r5, [r4, #0]
 8000f10:	bf18      	it	ne
 8000f12:	6059      	strne	r1, [r3, #4]
 8000f14:	6863      	ldr	r3, [r4, #4]
 8000f16:	bf08      	it	eq
 8000f18:	f8c8 1000 	streq.w	r1, [r8]
 8000f1c:	5162      	str	r2, [r4, r5]
 8000f1e:	604b      	str	r3, [r1, #4]
 8000f20:	4638      	mov	r0, r7
 8000f22:	f104 060b 	add.w	r6, r4, #11
 8000f26:	f000 f829 	bl	8000f7c <__malloc_unlock>
 8000f2a:	f026 0607 	bic.w	r6, r6, #7
 8000f2e:	1d23      	adds	r3, r4, #4
 8000f30:	1af2      	subs	r2, r6, r3
 8000f32:	d0ae      	beq.n	8000e92 <_malloc_r+0x22>
 8000f34:	1b9b      	subs	r3, r3, r6
 8000f36:	50a3      	str	r3, [r4, r2]
 8000f38:	e7ab      	b.n	8000e92 <_malloc_r+0x22>
 8000f3a:	42a3      	cmp	r3, r4
 8000f3c:	6862      	ldr	r2, [r4, #4]
 8000f3e:	d1dd      	bne.n	8000efc <_malloc_r+0x8c>
 8000f40:	f8c8 2000 	str.w	r2, [r8]
 8000f44:	e7ec      	b.n	8000f20 <_malloc_r+0xb0>
 8000f46:	4623      	mov	r3, r4
 8000f48:	6864      	ldr	r4, [r4, #4]
 8000f4a:	e7ac      	b.n	8000ea6 <_malloc_r+0x36>
 8000f4c:	4634      	mov	r4, r6
 8000f4e:	6876      	ldr	r6, [r6, #4]
 8000f50:	e7b4      	b.n	8000ebc <_malloc_r+0x4c>
 8000f52:	4613      	mov	r3, r2
 8000f54:	e7cc      	b.n	8000ef0 <_malloc_r+0x80>
 8000f56:	230c      	movs	r3, #12
 8000f58:	603b      	str	r3, [r7, #0]
 8000f5a:	4638      	mov	r0, r7
 8000f5c:	f000 f80e 	bl	8000f7c <__malloc_unlock>
 8000f60:	e797      	b.n	8000e92 <_malloc_r+0x22>
 8000f62:	6025      	str	r5, [r4, #0]
 8000f64:	e7dc      	b.n	8000f20 <_malloc_r+0xb0>
 8000f66:	605b      	str	r3, [r3, #4]
 8000f68:	deff      	udf	#255	; 0xff
 8000f6a:	bf00      	nop
 8000f6c:	200001c4 	.word	0x200001c4

08000f70 <__malloc_lock>:
 8000f70:	4801      	ldr	r0, [pc, #4]	; (8000f78 <__malloc_lock+0x8>)
 8000f72:	f7ff bf0e 	b.w	8000d92 <__retarget_lock_acquire_recursive>
 8000f76:	bf00      	nop
 8000f78:	200001c0 	.word	0x200001c0

08000f7c <__malloc_unlock>:
 8000f7c:	4801      	ldr	r0, [pc, #4]	; (8000f84 <__malloc_unlock+0x8>)
 8000f7e:	f7ff bf09 	b.w	8000d94 <__retarget_lock_release_recursive>
 8000f82:	bf00      	nop
 8000f84:	200001c0 	.word	0x200001c0

08000f88 <__sfputc_r>:
 8000f88:	6893      	ldr	r3, [r2, #8]
 8000f8a:	3b01      	subs	r3, #1
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	b410      	push	{r4}
 8000f90:	6093      	str	r3, [r2, #8]
 8000f92:	da08      	bge.n	8000fa6 <__sfputc_r+0x1e>
 8000f94:	6994      	ldr	r4, [r2, #24]
 8000f96:	42a3      	cmp	r3, r4
 8000f98:	db01      	blt.n	8000f9e <__sfputc_r+0x16>
 8000f9a:	290a      	cmp	r1, #10
 8000f9c:	d103      	bne.n	8000fa6 <__sfputc_r+0x1e>
 8000f9e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000fa2:	f000 bb73 	b.w	800168c <__swbuf_r>
 8000fa6:	6813      	ldr	r3, [r2, #0]
 8000fa8:	1c58      	adds	r0, r3, #1
 8000faa:	6010      	str	r0, [r2, #0]
 8000fac:	7019      	strb	r1, [r3, #0]
 8000fae:	4608      	mov	r0, r1
 8000fb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000fb4:	4770      	bx	lr

08000fb6 <__sfputs_r>:
 8000fb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fb8:	4606      	mov	r6, r0
 8000fba:	460f      	mov	r7, r1
 8000fbc:	4614      	mov	r4, r2
 8000fbe:	18d5      	adds	r5, r2, r3
 8000fc0:	42ac      	cmp	r4, r5
 8000fc2:	d101      	bne.n	8000fc8 <__sfputs_r+0x12>
 8000fc4:	2000      	movs	r0, #0
 8000fc6:	e007      	b.n	8000fd8 <__sfputs_r+0x22>
 8000fc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000fcc:	463a      	mov	r2, r7
 8000fce:	4630      	mov	r0, r6
 8000fd0:	f7ff ffda 	bl	8000f88 <__sfputc_r>
 8000fd4:	1c43      	adds	r3, r0, #1
 8000fd6:	d1f3      	bne.n	8000fc0 <__sfputs_r+0xa>
 8000fd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000fdc <_vfiprintf_r>:
 8000fdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fe0:	460d      	mov	r5, r1
 8000fe2:	b09d      	sub	sp, #116	; 0x74
 8000fe4:	4614      	mov	r4, r2
 8000fe6:	4698      	mov	r8, r3
 8000fe8:	4606      	mov	r6, r0
 8000fea:	b118      	cbz	r0, 8000ff4 <_vfiprintf_r+0x18>
 8000fec:	6a03      	ldr	r3, [r0, #32]
 8000fee:	b90b      	cbnz	r3, 8000ff4 <_vfiprintf_r+0x18>
 8000ff0:	f7ff fdca 	bl	8000b88 <__sinit>
 8000ff4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000ff6:	07d9      	lsls	r1, r3, #31
 8000ff8:	d405      	bmi.n	8001006 <_vfiprintf_r+0x2a>
 8000ffa:	89ab      	ldrh	r3, [r5, #12]
 8000ffc:	059a      	lsls	r2, r3, #22
 8000ffe:	d402      	bmi.n	8001006 <_vfiprintf_r+0x2a>
 8001000:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001002:	f7ff fec6 	bl	8000d92 <__retarget_lock_acquire_recursive>
 8001006:	89ab      	ldrh	r3, [r5, #12]
 8001008:	071b      	lsls	r3, r3, #28
 800100a:	d501      	bpl.n	8001010 <_vfiprintf_r+0x34>
 800100c:	692b      	ldr	r3, [r5, #16]
 800100e:	b99b      	cbnz	r3, 8001038 <_vfiprintf_r+0x5c>
 8001010:	4629      	mov	r1, r5
 8001012:	4630      	mov	r0, r6
 8001014:	f000 fb78 	bl	8001708 <__swsetup_r>
 8001018:	b170      	cbz	r0, 8001038 <_vfiprintf_r+0x5c>
 800101a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800101c:	07dc      	lsls	r4, r3, #31
 800101e:	d504      	bpl.n	800102a <_vfiprintf_r+0x4e>
 8001020:	f04f 30ff 	mov.w	r0, #4294967295
 8001024:	b01d      	add	sp, #116	; 0x74
 8001026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800102a:	89ab      	ldrh	r3, [r5, #12]
 800102c:	0598      	lsls	r0, r3, #22
 800102e:	d4f7      	bmi.n	8001020 <_vfiprintf_r+0x44>
 8001030:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001032:	f7ff feaf 	bl	8000d94 <__retarget_lock_release_recursive>
 8001036:	e7f3      	b.n	8001020 <_vfiprintf_r+0x44>
 8001038:	2300      	movs	r3, #0
 800103a:	9309      	str	r3, [sp, #36]	; 0x24
 800103c:	2320      	movs	r3, #32
 800103e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001042:	f8cd 800c 	str.w	r8, [sp, #12]
 8001046:	2330      	movs	r3, #48	; 0x30
 8001048:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80011fc <_vfiprintf_r+0x220>
 800104c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001050:	f04f 0901 	mov.w	r9, #1
 8001054:	4623      	mov	r3, r4
 8001056:	469a      	mov	sl, r3
 8001058:	f813 2b01 	ldrb.w	r2, [r3], #1
 800105c:	b10a      	cbz	r2, 8001062 <_vfiprintf_r+0x86>
 800105e:	2a25      	cmp	r2, #37	; 0x25
 8001060:	d1f9      	bne.n	8001056 <_vfiprintf_r+0x7a>
 8001062:	ebba 0b04 	subs.w	fp, sl, r4
 8001066:	d00b      	beq.n	8001080 <_vfiprintf_r+0xa4>
 8001068:	465b      	mov	r3, fp
 800106a:	4622      	mov	r2, r4
 800106c:	4629      	mov	r1, r5
 800106e:	4630      	mov	r0, r6
 8001070:	f7ff ffa1 	bl	8000fb6 <__sfputs_r>
 8001074:	3001      	adds	r0, #1
 8001076:	f000 80a9 	beq.w	80011cc <_vfiprintf_r+0x1f0>
 800107a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800107c:	445a      	add	r2, fp
 800107e:	9209      	str	r2, [sp, #36]	; 0x24
 8001080:	f89a 3000 	ldrb.w	r3, [sl]
 8001084:	2b00      	cmp	r3, #0
 8001086:	f000 80a1 	beq.w	80011cc <_vfiprintf_r+0x1f0>
 800108a:	2300      	movs	r3, #0
 800108c:	f04f 32ff 	mov.w	r2, #4294967295
 8001090:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001094:	f10a 0a01 	add.w	sl, sl, #1
 8001098:	9304      	str	r3, [sp, #16]
 800109a:	9307      	str	r3, [sp, #28]
 800109c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80010a0:	931a      	str	r3, [sp, #104]	; 0x68
 80010a2:	4654      	mov	r4, sl
 80010a4:	2205      	movs	r2, #5
 80010a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80010aa:	4854      	ldr	r0, [pc, #336]	; (80011fc <_vfiprintf_r+0x220>)
 80010ac:	f7ff f898 	bl	80001e0 <memchr>
 80010b0:	9a04      	ldr	r2, [sp, #16]
 80010b2:	b9d8      	cbnz	r0, 80010ec <_vfiprintf_r+0x110>
 80010b4:	06d1      	lsls	r1, r2, #27
 80010b6:	bf44      	itt	mi
 80010b8:	2320      	movmi	r3, #32
 80010ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80010be:	0713      	lsls	r3, r2, #28
 80010c0:	bf44      	itt	mi
 80010c2:	232b      	movmi	r3, #43	; 0x2b
 80010c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80010c8:	f89a 3000 	ldrb.w	r3, [sl]
 80010cc:	2b2a      	cmp	r3, #42	; 0x2a
 80010ce:	d015      	beq.n	80010fc <_vfiprintf_r+0x120>
 80010d0:	9a07      	ldr	r2, [sp, #28]
 80010d2:	4654      	mov	r4, sl
 80010d4:	2000      	movs	r0, #0
 80010d6:	f04f 0c0a 	mov.w	ip, #10
 80010da:	4621      	mov	r1, r4
 80010dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80010e0:	3b30      	subs	r3, #48	; 0x30
 80010e2:	2b09      	cmp	r3, #9
 80010e4:	d94d      	bls.n	8001182 <_vfiprintf_r+0x1a6>
 80010e6:	b1b0      	cbz	r0, 8001116 <_vfiprintf_r+0x13a>
 80010e8:	9207      	str	r2, [sp, #28]
 80010ea:	e014      	b.n	8001116 <_vfiprintf_r+0x13a>
 80010ec:	eba0 0308 	sub.w	r3, r0, r8
 80010f0:	fa09 f303 	lsl.w	r3, r9, r3
 80010f4:	4313      	orrs	r3, r2
 80010f6:	9304      	str	r3, [sp, #16]
 80010f8:	46a2      	mov	sl, r4
 80010fa:	e7d2      	b.n	80010a2 <_vfiprintf_r+0xc6>
 80010fc:	9b03      	ldr	r3, [sp, #12]
 80010fe:	1d19      	adds	r1, r3, #4
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	9103      	str	r1, [sp, #12]
 8001104:	2b00      	cmp	r3, #0
 8001106:	bfbb      	ittet	lt
 8001108:	425b      	neglt	r3, r3
 800110a:	f042 0202 	orrlt.w	r2, r2, #2
 800110e:	9307      	strge	r3, [sp, #28]
 8001110:	9307      	strlt	r3, [sp, #28]
 8001112:	bfb8      	it	lt
 8001114:	9204      	strlt	r2, [sp, #16]
 8001116:	7823      	ldrb	r3, [r4, #0]
 8001118:	2b2e      	cmp	r3, #46	; 0x2e
 800111a:	d10c      	bne.n	8001136 <_vfiprintf_r+0x15a>
 800111c:	7863      	ldrb	r3, [r4, #1]
 800111e:	2b2a      	cmp	r3, #42	; 0x2a
 8001120:	d134      	bne.n	800118c <_vfiprintf_r+0x1b0>
 8001122:	9b03      	ldr	r3, [sp, #12]
 8001124:	1d1a      	adds	r2, r3, #4
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	9203      	str	r2, [sp, #12]
 800112a:	2b00      	cmp	r3, #0
 800112c:	bfb8      	it	lt
 800112e:	f04f 33ff 	movlt.w	r3, #4294967295
 8001132:	3402      	adds	r4, #2
 8001134:	9305      	str	r3, [sp, #20]
 8001136:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800120c <_vfiprintf_r+0x230>
 800113a:	7821      	ldrb	r1, [r4, #0]
 800113c:	2203      	movs	r2, #3
 800113e:	4650      	mov	r0, sl
 8001140:	f7ff f84e 	bl	80001e0 <memchr>
 8001144:	b138      	cbz	r0, 8001156 <_vfiprintf_r+0x17a>
 8001146:	9b04      	ldr	r3, [sp, #16]
 8001148:	eba0 000a 	sub.w	r0, r0, sl
 800114c:	2240      	movs	r2, #64	; 0x40
 800114e:	4082      	lsls	r2, r0
 8001150:	4313      	orrs	r3, r2
 8001152:	3401      	adds	r4, #1
 8001154:	9304      	str	r3, [sp, #16]
 8001156:	f814 1b01 	ldrb.w	r1, [r4], #1
 800115a:	4829      	ldr	r0, [pc, #164]	; (8001200 <_vfiprintf_r+0x224>)
 800115c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001160:	2206      	movs	r2, #6
 8001162:	f7ff f83d 	bl	80001e0 <memchr>
 8001166:	2800      	cmp	r0, #0
 8001168:	d03f      	beq.n	80011ea <_vfiprintf_r+0x20e>
 800116a:	4b26      	ldr	r3, [pc, #152]	; (8001204 <_vfiprintf_r+0x228>)
 800116c:	bb1b      	cbnz	r3, 80011b6 <_vfiprintf_r+0x1da>
 800116e:	9b03      	ldr	r3, [sp, #12]
 8001170:	3307      	adds	r3, #7
 8001172:	f023 0307 	bic.w	r3, r3, #7
 8001176:	3308      	adds	r3, #8
 8001178:	9303      	str	r3, [sp, #12]
 800117a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800117c:	443b      	add	r3, r7
 800117e:	9309      	str	r3, [sp, #36]	; 0x24
 8001180:	e768      	b.n	8001054 <_vfiprintf_r+0x78>
 8001182:	fb0c 3202 	mla	r2, ip, r2, r3
 8001186:	460c      	mov	r4, r1
 8001188:	2001      	movs	r0, #1
 800118a:	e7a6      	b.n	80010da <_vfiprintf_r+0xfe>
 800118c:	2300      	movs	r3, #0
 800118e:	3401      	adds	r4, #1
 8001190:	9305      	str	r3, [sp, #20]
 8001192:	4619      	mov	r1, r3
 8001194:	f04f 0c0a 	mov.w	ip, #10
 8001198:	4620      	mov	r0, r4
 800119a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800119e:	3a30      	subs	r2, #48	; 0x30
 80011a0:	2a09      	cmp	r2, #9
 80011a2:	d903      	bls.n	80011ac <_vfiprintf_r+0x1d0>
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d0c6      	beq.n	8001136 <_vfiprintf_r+0x15a>
 80011a8:	9105      	str	r1, [sp, #20]
 80011aa:	e7c4      	b.n	8001136 <_vfiprintf_r+0x15a>
 80011ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80011b0:	4604      	mov	r4, r0
 80011b2:	2301      	movs	r3, #1
 80011b4:	e7f0      	b.n	8001198 <_vfiprintf_r+0x1bc>
 80011b6:	ab03      	add	r3, sp, #12
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	462a      	mov	r2, r5
 80011bc:	4b12      	ldr	r3, [pc, #72]	; (8001208 <_vfiprintf_r+0x22c>)
 80011be:	a904      	add	r1, sp, #16
 80011c0:	4630      	mov	r0, r6
 80011c2:	f3af 8000 	nop.w
 80011c6:	4607      	mov	r7, r0
 80011c8:	1c78      	adds	r0, r7, #1
 80011ca:	d1d6      	bne.n	800117a <_vfiprintf_r+0x19e>
 80011cc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80011ce:	07d9      	lsls	r1, r3, #31
 80011d0:	d405      	bmi.n	80011de <_vfiprintf_r+0x202>
 80011d2:	89ab      	ldrh	r3, [r5, #12]
 80011d4:	059a      	lsls	r2, r3, #22
 80011d6:	d402      	bmi.n	80011de <_vfiprintf_r+0x202>
 80011d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80011da:	f7ff fddb 	bl	8000d94 <__retarget_lock_release_recursive>
 80011de:	89ab      	ldrh	r3, [r5, #12]
 80011e0:	065b      	lsls	r3, r3, #25
 80011e2:	f53f af1d 	bmi.w	8001020 <_vfiprintf_r+0x44>
 80011e6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80011e8:	e71c      	b.n	8001024 <_vfiprintf_r+0x48>
 80011ea:	ab03      	add	r3, sp, #12
 80011ec:	9300      	str	r3, [sp, #0]
 80011ee:	462a      	mov	r2, r5
 80011f0:	4b05      	ldr	r3, [pc, #20]	; (8001208 <_vfiprintf_r+0x22c>)
 80011f2:	a904      	add	r1, sp, #16
 80011f4:	4630      	mov	r0, r6
 80011f6:	f000 f879 	bl	80012ec <_printf_i>
 80011fa:	e7e4      	b.n	80011c6 <_vfiprintf_r+0x1ea>
 80011fc:	08001907 	.word	0x08001907
 8001200:	08001911 	.word	0x08001911
 8001204:	00000000 	.word	0x00000000
 8001208:	08000fb7 	.word	0x08000fb7
 800120c:	0800190d 	.word	0x0800190d

08001210 <_printf_common>:
 8001210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001214:	4616      	mov	r6, r2
 8001216:	4699      	mov	r9, r3
 8001218:	688a      	ldr	r2, [r1, #8]
 800121a:	690b      	ldr	r3, [r1, #16]
 800121c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001220:	4293      	cmp	r3, r2
 8001222:	bfb8      	it	lt
 8001224:	4613      	movlt	r3, r2
 8001226:	6033      	str	r3, [r6, #0]
 8001228:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800122c:	4607      	mov	r7, r0
 800122e:	460c      	mov	r4, r1
 8001230:	b10a      	cbz	r2, 8001236 <_printf_common+0x26>
 8001232:	3301      	adds	r3, #1
 8001234:	6033      	str	r3, [r6, #0]
 8001236:	6823      	ldr	r3, [r4, #0]
 8001238:	0699      	lsls	r1, r3, #26
 800123a:	bf42      	ittt	mi
 800123c:	6833      	ldrmi	r3, [r6, #0]
 800123e:	3302      	addmi	r3, #2
 8001240:	6033      	strmi	r3, [r6, #0]
 8001242:	6825      	ldr	r5, [r4, #0]
 8001244:	f015 0506 	ands.w	r5, r5, #6
 8001248:	d106      	bne.n	8001258 <_printf_common+0x48>
 800124a:	f104 0a19 	add.w	sl, r4, #25
 800124e:	68e3      	ldr	r3, [r4, #12]
 8001250:	6832      	ldr	r2, [r6, #0]
 8001252:	1a9b      	subs	r3, r3, r2
 8001254:	42ab      	cmp	r3, r5
 8001256:	dc26      	bgt.n	80012a6 <_printf_common+0x96>
 8001258:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800125c:	1e13      	subs	r3, r2, #0
 800125e:	6822      	ldr	r2, [r4, #0]
 8001260:	bf18      	it	ne
 8001262:	2301      	movne	r3, #1
 8001264:	0692      	lsls	r2, r2, #26
 8001266:	d42b      	bmi.n	80012c0 <_printf_common+0xb0>
 8001268:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800126c:	4649      	mov	r1, r9
 800126e:	4638      	mov	r0, r7
 8001270:	47c0      	blx	r8
 8001272:	3001      	adds	r0, #1
 8001274:	d01e      	beq.n	80012b4 <_printf_common+0xa4>
 8001276:	6823      	ldr	r3, [r4, #0]
 8001278:	6922      	ldr	r2, [r4, #16]
 800127a:	f003 0306 	and.w	r3, r3, #6
 800127e:	2b04      	cmp	r3, #4
 8001280:	bf02      	ittt	eq
 8001282:	68e5      	ldreq	r5, [r4, #12]
 8001284:	6833      	ldreq	r3, [r6, #0]
 8001286:	1aed      	subeq	r5, r5, r3
 8001288:	68a3      	ldr	r3, [r4, #8]
 800128a:	bf0c      	ite	eq
 800128c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001290:	2500      	movne	r5, #0
 8001292:	4293      	cmp	r3, r2
 8001294:	bfc4      	itt	gt
 8001296:	1a9b      	subgt	r3, r3, r2
 8001298:	18ed      	addgt	r5, r5, r3
 800129a:	2600      	movs	r6, #0
 800129c:	341a      	adds	r4, #26
 800129e:	42b5      	cmp	r5, r6
 80012a0:	d11a      	bne.n	80012d8 <_printf_common+0xc8>
 80012a2:	2000      	movs	r0, #0
 80012a4:	e008      	b.n	80012b8 <_printf_common+0xa8>
 80012a6:	2301      	movs	r3, #1
 80012a8:	4652      	mov	r2, sl
 80012aa:	4649      	mov	r1, r9
 80012ac:	4638      	mov	r0, r7
 80012ae:	47c0      	blx	r8
 80012b0:	3001      	adds	r0, #1
 80012b2:	d103      	bne.n	80012bc <_printf_common+0xac>
 80012b4:	f04f 30ff 	mov.w	r0, #4294967295
 80012b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012bc:	3501      	adds	r5, #1
 80012be:	e7c6      	b.n	800124e <_printf_common+0x3e>
 80012c0:	18e1      	adds	r1, r4, r3
 80012c2:	1c5a      	adds	r2, r3, #1
 80012c4:	2030      	movs	r0, #48	; 0x30
 80012c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80012ca:	4422      	add	r2, r4
 80012cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80012d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80012d4:	3302      	adds	r3, #2
 80012d6:	e7c7      	b.n	8001268 <_printf_common+0x58>
 80012d8:	2301      	movs	r3, #1
 80012da:	4622      	mov	r2, r4
 80012dc:	4649      	mov	r1, r9
 80012de:	4638      	mov	r0, r7
 80012e0:	47c0      	blx	r8
 80012e2:	3001      	adds	r0, #1
 80012e4:	d0e6      	beq.n	80012b4 <_printf_common+0xa4>
 80012e6:	3601      	adds	r6, #1
 80012e8:	e7d9      	b.n	800129e <_printf_common+0x8e>
	...

080012ec <_printf_i>:
 80012ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80012f0:	7e0f      	ldrb	r7, [r1, #24]
 80012f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80012f4:	2f78      	cmp	r7, #120	; 0x78
 80012f6:	4691      	mov	r9, r2
 80012f8:	4680      	mov	r8, r0
 80012fa:	460c      	mov	r4, r1
 80012fc:	469a      	mov	sl, r3
 80012fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001302:	d807      	bhi.n	8001314 <_printf_i+0x28>
 8001304:	2f62      	cmp	r7, #98	; 0x62
 8001306:	d80a      	bhi.n	800131e <_printf_i+0x32>
 8001308:	2f00      	cmp	r7, #0
 800130a:	f000 80d4 	beq.w	80014b6 <_printf_i+0x1ca>
 800130e:	2f58      	cmp	r7, #88	; 0x58
 8001310:	f000 80c0 	beq.w	8001494 <_printf_i+0x1a8>
 8001314:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001318:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800131c:	e03a      	b.n	8001394 <_printf_i+0xa8>
 800131e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001322:	2b15      	cmp	r3, #21
 8001324:	d8f6      	bhi.n	8001314 <_printf_i+0x28>
 8001326:	a101      	add	r1, pc, #4	; (adr r1, 800132c <_printf_i+0x40>)
 8001328:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800132c:	08001385 	.word	0x08001385
 8001330:	08001399 	.word	0x08001399
 8001334:	08001315 	.word	0x08001315
 8001338:	08001315 	.word	0x08001315
 800133c:	08001315 	.word	0x08001315
 8001340:	08001315 	.word	0x08001315
 8001344:	08001399 	.word	0x08001399
 8001348:	08001315 	.word	0x08001315
 800134c:	08001315 	.word	0x08001315
 8001350:	08001315 	.word	0x08001315
 8001354:	08001315 	.word	0x08001315
 8001358:	0800149d 	.word	0x0800149d
 800135c:	080013c5 	.word	0x080013c5
 8001360:	08001457 	.word	0x08001457
 8001364:	08001315 	.word	0x08001315
 8001368:	08001315 	.word	0x08001315
 800136c:	080014bf 	.word	0x080014bf
 8001370:	08001315 	.word	0x08001315
 8001374:	080013c5 	.word	0x080013c5
 8001378:	08001315 	.word	0x08001315
 800137c:	08001315 	.word	0x08001315
 8001380:	0800145f 	.word	0x0800145f
 8001384:	682b      	ldr	r3, [r5, #0]
 8001386:	1d1a      	adds	r2, r3, #4
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	602a      	str	r2, [r5, #0]
 800138c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001390:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001394:	2301      	movs	r3, #1
 8001396:	e09f      	b.n	80014d8 <_printf_i+0x1ec>
 8001398:	6820      	ldr	r0, [r4, #0]
 800139a:	682b      	ldr	r3, [r5, #0]
 800139c:	0607      	lsls	r7, r0, #24
 800139e:	f103 0104 	add.w	r1, r3, #4
 80013a2:	6029      	str	r1, [r5, #0]
 80013a4:	d501      	bpl.n	80013aa <_printf_i+0xbe>
 80013a6:	681e      	ldr	r6, [r3, #0]
 80013a8:	e003      	b.n	80013b2 <_printf_i+0xc6>
 80013aa:	0646      	lsls	r6, r0, #25
 80013ac:	d5fb      	bpl.n	80013a6 <_printf_i+0xba>
 80013ae:	f9b3 6000 	ldrsh.w	r6, [r3]
 80013b2:	2e00      	cmp	r6, #0
 80013b4:	da03      	bge.n	80013be <_printf_i+0xd2>
 80013b6:	232d      	movs	r3, #45	; 0x2d
 80013b8:	4276      	negs	r6, r6
 80013ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80013be:	485a      	ldr	r0, [pc, #360]	; (8001528 <_printf_i+0x23c>)
 80013c0:	230a      	movs	r3, #10
 80013c2:	e012      	b.n	80013ea <_printf_i+0xfe>
 80013c4:	682b      	ldr	r3, [r5, #0]
 80013c6:	6820      	ldr	r0, [r4, #0]
 80013c8:	1d19      	adds	r1, r3, #4
 80013ca:	6029      	str	r1, [r5, #0]
 80013cc:	0605      	lsls	r5, r0, #24
 80013ce:	d501      	bpl.n	80013d4 <_printf_i+0xe8>
 80013d0:	681e      	ldr	r6, [r3, #0]
 80013d2:	e002      	b.n	80013da <_printf_i+0xee>
 80013d4:	0641      	lsls	r1, r0, #25
 80013d6:	d5fb      	bpl.n	80013d0 <_printf_i+0xe4>
 80013d8:	881e      	ldrh	r6, [r3, #0]
 80013da:	4853      	ldr	r0, [pc, #332]	; (8001528 <_printf_i+0x23c>)
 80013dc:	2f6f      	cmp	r7, #111	; 0x6f
 80013de:	bf0c      	ite	eq
 80013e0:	2308      	moveq	r3, #8
 80013e2:	230a      	movne	r3, #10
 80013e4:	2100      	movs	r1, #0
 80013e6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80013ea:	6865      	ldr	r5, [r4, #4]
 80013ec:	60a5      	str	r5, [r4, #8]
 80013ee:	2d00      	cmp	r5, #0
 80013f0:	bfa2      	ittt	ge
 80013f2:	6821      	ldrge	r1, [r4, #0]
 80013f4:	f021 0104 	bicge.w	r1, r1, #4
 80013f8:	6021      	strge	r1, [r4, #0]
 80013fa:	b90e      	cbnz	r6, 8001400 <_printf_i+0x114>
 80013fc:	2d00      	cmp	r5, #0
 80013fe:	d04b      	beq.n	8001498 <_printf_i+0x1ac>
 8001400:	4615      	mov	r5, r2
 8001402:	fbb6 f1f3 	udiv	r1, r6, r3
 8001406:	fb03 6711 	mls	r7, r3, r1, r6
 800140a:	5dc7      	ldrb	r7, [r0, r7]
 800140c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001410:	4637      	mov	r7, r6
 8001412:	42bb      	cmp	r3, r7
 8001414:	460e      	mov	r6, r1
 8001416:	d9f4      	bls.n	8001402 <_printf_i+0x116>
 8001418:	2b08      	cmp	r3, #8
 800141a:	d10b      	bne.n	8001434 <_printf_i+0x148>
 800141c:	6823      	ldr	r3, [r4, #0]
 800141e:	07de      	lsls	r6, r3, #31
 8001420:	d508      	bpl.n	8001434 <_printf_i+0x148>
 8001422:	6923      	ldr	r3, [r4, #16]
 8001424:	6861      	ldr	r1, [r4, #4]
 8001426:	4299      	cmp	r1, r3
 8001428:	bfde      	ittt	le
 800142a:	2330      	movle	r3, #48	; 0x30
 800142c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001430:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001434:	1b52      	subs	r2, r2, r5
 8001436:	6122      	str	r2, [r4, #16]
 8001438:	f8cd a000 	str.w	sl, [sp]
 800143c:	464b      	mov	r3, r9
 800143e:	aa03      	add	r2, sp, #12
 8001440:	4621      	mov	r1, r4
 8001442:	4640      	mov	r0, r8
 8001444:	f7ff fee4 	bl	8001210 <_printf_common>
 8001448:	3001      	adds	r0, #1
 800144a:	d14a      	bne.n	80014e2 <_printf_i+0x1f6>
 800144c:	f04f 30ff 	mov.w	r0, #4294967295
 8001450:	b004      	add	sp, #16
 8001452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001456:	6823      	ldr	r3, [r4, #0]
 8001458:	f043 0320 	orr.w	r3, r3, #32
 800145c:	6023      	str	r3, [r4, #0]
 800145e:	4833      	ldr	r0, [pc, #204]	; (800152c <_printf_i+0x240>)
 8001460:	2778      	movs	r7, #120	; 0x78
 8001462:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001466:	6823      	ldr	r3, [r4, #0]
 8001468:	6829      	ldr	r1, [r5, #0]
 800146a:	061f      	lsls	r7, r3, #24
 800146c:	f851 6b04 	ldr.w	r6, [r1], #4
 8001470:	d402      	bmi.n	8001478 <_printf_i+0x18c>
 8001472:	065f      	lsls	r7, r3, #25
 8001474:	bf48      	it	mi
 8001476:	b2b6      	uxthmi	r6, r6
 8001478:	07df      	lsls	r7, r3, #31
 800147a:	bf48      	it	mi
 800147c:	f043 0320 	orrmi.w	r3, r3, #32
 8001480:	6029      	str	r1, [r5, #0]
 8001482:	bf48      	it	mi
 8001484:	6023      	strmi	r3, [r4, #0]
 8001486:	b91e      	cbnz	r6, 8001490 <_printf_i+0x1a4>
 8001488:	6823      	ldr	r3, [r4, #0]
 800148a:	f023 0320 	bic.w	r3, r3, #32
 800148e:	6023      	str	r3, [r4, #0]
 8001490:	2310      	movs	r3, #16
 8001492:	e7a7      	b.n	80013e4 <_printf_i+0xf8>
 8001494:	4824      	ldr	r0, [pc, #144]	; (8001528 <_printf_i+0x23c>)
 8001496:	e7e4      	b.n	8001462 <_printf_i+0x176>
 8001498:	4615      	mov	r5, r2
 800149a:	e7bd      	b.n	8001418 <_printf_i+0x12c>
 800149c:	682b      	ldr	r3, [r5, #0]
 800149e:	6826      	ldr	r6, [r4, #0]
 80014a0:	6961      	ldr	r1, [r4, #20]
 80014a2:	1d18      	adds	r0, r3, #4
 80014a4:	6028      	str	r0, [r5, #0]
 80014a6:	0635      	lsls	r5, r6, #24
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	d501      	bpl.n	80014b0 <_printf_i+0x1c4>
 80014ac:	6019      	str	r1, [r3, #0]
 80014ae:	e002      	b.n	80014b6 <_printf_i+0x1ca>
 80014b0:	0670      	lsls	r0, r6, #25
 80014b2:	d5fb      	bpl.n	80014ac <_printf_i+0x1c0>
 80014b4:	8019      	strh	r1, [r3, #0]
 80014b6:	2300      	movs	r3, #0
 80014b8:	6123      	str	r3, [r4, #16]
 80014ba:	4615      	mov	r5, r2
 80014bc:	e7bc      	b.n	8001438 <_printf_i+0x14c>
 80014be:	682b      	ldr	r3, [r5, #0]
 80014c0:	1d1a      	adds	r2, r3, #4
 80014c2:	602a      	str	r2, [r5, #0]
 80014c4:	681d      	ldr	r5, [r3, #0]
 80014c6:	6862      	ldr	r2, [r4, #4]
 80014c8:	2100      	movs	r1, #0
 80014ca:	4628      	mov	r0, r5
 80014cc:	f7fe fe88 	bl	80001e0 <memchr>
 80014d0:	b108      	cbz	r0, 80014d6 <_printf_i+0x1ea>
 80014d2:	1b40      	subs	r0, r0, r5
 80014d4:	6060      	str	r0, [r4, #4]
 80014d6:	6863      	ldr	r3, [r4, #4]
 80014d8:	6123      	str	r3, [r4, #16]
 80014da:	2300      	movs	r3, #0
 80014dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80014e0:	e7aa      	b.n	8001438 <_printf_i+0x14c>
 80014e2:	6923      	ldr	r3, [r4, #16]
 80014e4:	462a      	mov	r2, r5
 80014e6:	4649      	mov	r1, r9
 80014e8:	4640      	mov	r0, r8
 80014ea:	47d0      	blx	sl
 80014ec:	3001      	adds	r0, #1
 80014ee:	d0ad      	beq.n	800144c <_printf_i+0x160>
 80014f0:	6823      	ldr	r3, [r4, #0]
 80014f2:	079b      	lsls	r3, r3, #30
 80014f4:	d413      	bmi.n	800151e <_printf_i+0x232>
 80014f6:	68e0      	ldr	r0, [r4, #12]
 80014f8:	9b03      	ldr	r3, [sp, #12]
 80014fa:	4298      	cmp	r0, r3
 80014fc:	bfb8      	it	lt
 80014fe:	4618      	movlt	r0, r3
 8001500:	e7a6      	b.n	8001450 <_printf_i+0x164>
 8001502:	2301      	movs	r3, #1
 8001504:	4632      	mov	r2, r6
 8001506:	4649      	mov	r1, r9
 8001508:	4640      	mov	r0, r8
 800150a:	47d0      	blx	sl
 800150c:	3001      	adds	r0, #1
 800150e:	d09d      	beq.n	800144c <_printf_i+0x160>
 8001510:	3501      	adds	r5, #1
 8001512:	68e3      	ldr	r3, [r4, #12]
 8001514:	9903      	ldr	r1, [sp, #12]
 8001516:	1a5b      	subs	r3, r3, r1
 8001518:	42ab      	cmp	r3, r5
 800151a:	dcf2      	bgt.n	8001502 <_printf_i+0x216>
 800151c:	e7eb      	b.n	80014f6 <_printf_i+0x20a>
 800151e:	2500      	movs	r5, #0
 8001520:	f104 0619 	add.w	r6, r4, #25
 8001524:	e7f5      	b.n	8001512 <_printf_i+0x226>
 8001526:	bf00      	nop
 8001528:	08001918 	.word	0x08001918
 800152c:	08001929 	.word	0x08001929

08001530 <__sflush_r>:
 8001530:	898a      	ldrh	r2, [r1, #12]
 8001532:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001536:	4605      	mov	r5, r0
 8001538:	0710      	lsls	r0, r2, #28
 800153a:	460c      	mov	r4, r1
 800153c:	d458      	bmi.n	80015f0 <__sflush_r+0xc0>
 800153e:	684b      	ldr	r3, [r1, #4]
 8001540:	2b00      	cmp	r3, #0
 8001542:	dc05      	bgt.n	8001550 <__sflush_r+0x20>
 8001544:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001546:	2b00      	cmp	r3, #0
 8001548:	dc02      	bgt.n	8001550 <__sflush_r+0x20>
 800154a:	2000      	movs	r0, #0
 800154c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001550:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001552:	2e00      	cmp	r6, #0
 8001554:	d0f9      	beq.n	800154a <__sflush_r+0x1a>
 8001556:	2300      	movs	r3, #0
 8001558:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800155c:	682f      	ldr	r7, [r5, #0]
 800155e:	6a21      	ldr	r1, [r4, #32]
 8001560:	602b      	str	r3, [r5, #0]
 8001562:	d032      	beq.n	80015ca <__sflush_r+0x9a>
 8001564:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001566:	89a3      	ldrh	r3, [r4, #12]
 8001568:	075a      	lsls	r2, r3, #29
 800156a:	d505      	bpl.n	8001578 <__sflush_r+0x48>
 800156c:	6863      	ldr	r3, [r4, #4]
 800156e:	1ac0      	subs	r0, r0, r3
 8001570:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001572:	b10b      	cbz	r3, 8001578 <__sflush_r+0x48>
 8001574:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001576:	1ac0      	subs	r0, r0, r3
 8001578:	2300      	movs	r3, #0
 800157a:	4602      	mov	r2, r0
 800157c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800157e:	6a21      	ldr	r1, [r4, #32]
 8001580:	4628      	mov	r0, r5
 8001582:	47b0      	blx	r6
 8001584:	1c43      	adds	r3, r0, #1
 8001586:	89a3      	ldrh	r3, [r4, #12]
 8001588:	d106      	bne.n	8001598 <__sflush_r+0x68>
 800158a:	6829      	ldr	r1, [r5, #0]
 800158c:	291d      	cmp	r1, #29
 800158e:	d82b      	bhi.n	80015e8 <__sflush_r+0xb8>
 8001590:	4a29      	ldr	r2, [pc, #164]	; (8001638 <__sflush_r+0x108>)
 8001592:	410a      	asrs	r2, r1
 8001594:	07d6      	lsls	r6, r2, #31
 8001596:	d427      	bmi.n	80015e8 <__sflush_r+0xb8>
 8001598:	2200      	movs	r2, #0
 800159a:	6062      	str	r2, [r4, #4]
 800159c:	04d9      	lsls	r1, r3, #19
 800159e:	6922      	ldr	r2, [r4, #16]
 80015a0:	6022      	str	r2, [r4, #0]
 80015a2:	d504      	bpl.n	80015ae <__sflush_r+0x7e>
 80015a4:	1c42      	adds	r2, r0, #1
 80015a6:	d101      	bne.n	80015ac <__sflush_r+0x7c>
 80015a8:	682b      	ldr	r3, [r5, #0]
 80015aa:	b903      	cbnz	r3, 80015ae <__sflush_r+0x7e>
 80015ac:	6560      	str	r0, [r4, #84]	; 0x54
 80015ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80015b0:	602f      	str	r7, [r5, #0]
 80015b2:	2900      	cmp	r1, #0
 80015b4:	d0c9      	beq.n	800154a <__sflush_r+0x1a>
 80015b6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80015ba:	4299      	cmp	r1, r3
 80015bc:	d002      	beq.n	80015c4 <__sflush_r+0x94>
 80015be:	4628      	mov	r0, r5
 80015c0:	f7ff fbea 	bl	8000d98 <_free_r>
 80015c4:	2000      	movs	r0, #0
 80015c6:	6360      	str	r0, [r4, #52]	; 0x34
 80015c8:	e7c0      	b.n	800154c <__sflush_r+0x1c>
 80015ca:	2301      	movs	r3, #1
 80015cc:	4628      	mov	r0, r5
 80015ce:	47b0      	blx	r6
 80015d0:	1c41      	adds	r1, r0, #1
 80015d2:	d1c8      	bne.n	8001566 <__sflush_r+0x36>
 80015d4:	682b      	ldr	r3, [r5, #0]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d0c5      	beq.n	8001566 <__sflush_r+0x36>
 80015da:	2b1d      	cmp	r3, #29
 80015dc:	d001      	beq.n	80015e2 <__sflush_r+0xb2>
 80015de:	2b16      	cmp	r3, #22
 80015e0:	d101      	bne.n	80015e6 <__sflush_r+0xb6>
 80015e2:	602f      	str	r7, [r5, #0]
 80015e4:	e7b1      	b.n	800154a <__sflush_r+0x1a>
 80015e6:	89a3      	ldrh	r3, [r4, #12]
 80015e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015ec:	81a3      	strh	r3, [r4, #12]
 80015ee:	e7ad      	b.n	800154c <__sflush_r+0x1c>
 80015f0:	690f      	ldr	r7, [r1, #16]
 80015f2:	2f00      	cmp	r7, #0
 80015f4:	d0a9      	beq.n	800154a <__sflush_r+0x1a>
 80015f6:	0793      	lsls	r3, r2, #30
 80015f8:	680e      	ldr	r6, [r1, #0]
 80015fa:	bf08      	it	eq
 80015fc:	694b      	ldreq	r3, [r1, #20]
 80015fe:	600f      	str	r7, [r1, #0]
 8001600:	bf18      	it	ne
 8001602:	2300      	movne	r3, #0
 8001604:	eba6 0807 	sub.w	r8, r6, r7
 8001608:	608b      	str	r3, [r1, #8]
 800160a:	f1b8 0f00 	cmp.w	r8, #0
 800160e:	dd9c      	ble.n	800154a <__sflush_r+0x1a>
 8001610:	6a21      	ldr	r1, [r4, #32]
 8001612:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001614:	4643      	mov	r3, r8
 8001616:	463a      	mov	r2, r7
 8001618:	4628      	mov	r0, r5
 800161a:	47b0      	blx	r6
 800161c:	2800      	cmp	r0, #0
 800161e:	dc06      	bgt.n	800162e <__sflush_r+0xfe>
 8001620:	89a3      	ldrh	r3, [r4, #12]
 8001622:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001626:	81a3      	strh	r3, [r4, #12]
 8001628:	f04f 30ff 	mov.w	r0, #4294967295
 800162c:	e78e      	b.n	800154c <__sflush_r+0x1c>
 800162e:	4407      	add	r7, r0
 8001630:	eba8 0800 	sub.w	r8, r8, r0
 8001634:	e7e9      	b.n	800160a <__sflush_r+0xda>
 8001636:	bf00      	nop
 8001638:	dfbffffe 	.word	0xdfbffffe

0800163c <_fflush_r>:
 800163c:	b538      	push	{r3, r4, r5, lr}
 800163e:	690b      	ldr	r3, [r1, #16]
 8001640:	4605      	mov	r5, r0
 8001642:	460c      	mov	r4, r1
 8001644:	b913      	cbnz	r3, 800164c <_fflush_r+0x10>
 8001646:	2500      	movs	r5, #0
 8001648:	4628      	mov	r0, r5
 800164a:	bd38      	pop	{r3, r4, r5, pc}
 800164c:	b118      	cbz	r0, 8001656 <_fflush_r+0x1a>
 800164e:	6a03      	ldr	r3, [r0, #32]
 8001650:	b90b      	cbnz	r3, 8001656 <_fflush_r+0x1a>
 8001652:	f7ff fa99 	bl	8000b88 <__sinit>
 8001656:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d0f3      	beq.n	8001646 <_fflush_r+0xa>
 800165e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001660:	07d0      	lsls	r0, r2, #31
 8001662:	d404      	bmi.n	800166e <_fflush_r+0x32>
 8001664:	0599      	lsls	r1, r3, #22
 8001666:	d402      	bmi.n	800166e <_fflush_r+0x32>
 8001668:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800166a:	f7ff fb92 	bl	8000d92 <__retarget_lock_acquire_recursive>
 800166e:	4628      	mov	r0, r5
 8001670:	4621      	mov	r1, r4
 8001672:	f7ff ff5d 	bl	8001530 <__sflush_r>
 8001676:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001678:	07da      	lsls	r2, r3, #31
 800167a:	4605      	mov	r5, r0
 800167c:	d4e4      	bmi.n	8001648 <_fflush_r+0xc>
 800167e:	89a3      	ldrh	r3, [r4, #12]
 8001680:	059b      	lsls	r3, r3, #22
 8001682:	d4e1      	bmi.n	8001648 <_fflush_r+0xc>
 8001684:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001686:	f7ff fb85 	bl	8000d94 <__retarget_lock_release_recursive>
 800168a:	e7dd      	b.n	8001648 <_fflush_r+0xc>

0800168c <__swbuf_r>:
 800168c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800168e:	460e      	mov	r6, r1
 8001690:	4614      	mov	r4, r2
 8001692:	4605      	mov	r5, r0
 8001694:	b118      	cbz	r0, 800169e <__swbuf_r+0x12>
 8001696:	6a03      	ldr	r3, [r0, #32]
 8001698:	b90b      	cbnz	r3, 800169e <__swbuf_r+0x12>
 800169a:	f7ff fa75 	bl	8000b88 <__sinit>
 800169e:	69a3      	ldr	r3, [r4, #24]
 80016a0:	60a3      	str	r3, [r4, #8]
 80016a2:	89a3      	ldrh	r3, [r4, #12]
 80016a4:	071a      	lsls	r2, r3, #28
 80016a6:	d525      	bpl.n	80016f4 <__swbuf_r+0x68>
 80016a8:	6923      	ldr	r3, [r4, #16]
 80016aa:	b31b      	cbz	r3, 80016f4 <__swbuf_r+0x68>
 80016ac:	6823      	ldr	r3, [r4, #0]
 80016ae:	6922      	ldr	r2, [r4, #16]
 80016b0:	1a98      	subs	r0, r3, r2
 80016b2:	6963      	ldr	r3, [r4, #20]
 80016b4:	b2f6      	uxtb	r6, r6
 80016b6:	4283      	cmp	r3, r0
 80016b8:	4637      	mov	r7, r6
 80016ba:	dc04      	bgt.n	80016c6 <__swbuf_r+0x3a>
 80016bc:	4621      	mov	r1, r4
 80016be:	4628      	mov	r0, r5
 80016c0:	f7ff ffbc 	bl	800163c <_fflush_r>
 80016c4:	b9e0      	cbnz	r0, 8001700 <__swbuf_r+0x74>
 80016c6:	68a3      	ldr	r3, [r4, #8]
 80016c8:	3b01      	subs	r3, #1
 80016ca:	60a3      	str	r3, [r4, #8]
 80016cc:	6823      	ldr	r3, [r4, #0]
 80016ce:	1c5a      	adds	r2, r3, #1
 80016d0:	6022      	str	r2, [r4, #0]
 80016d2:	701e      	strb	r6, [r3, #0]
 80016d4:	6962      	ldr	r2, [r4, #20]
 80016d6:	1c43      	adds	r3, r0, #1
 80016d8:	429a      	cmp	r2, r3
 80016da:	d004      	beq.n	80016e6 <__swbuf_r+0x5a>
 80016dc:	89a3      	ldrh	r3, [r4, #12]
 80016de:	07db      	lsls	r3, r3, #31
 80016e0:	d506      	bpl.n	80016f0 <__swbuf_r+0x64>
 80016e2:	2e0a      	cmp	r6, #10
 80016e4:	d104      	bne.n	80016f0 <__swbuf_r+0x64>
 80016e6:	4621      	mov	r1, r4
 80016e8:	4628      	mov	r0, r5
 80016ea:	f7ff ffa7 	bl	800163c <_fflush_r>
 80016ee:	b938      	cbnz	r0, 8001700 <__swbuf_r+0x74>
 80016f0:	4638      	mov	r0, r7
 80016f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80016f4:	4621      	mov	r1, r4
 80016f6:	4628      	mov	r0, r5
 80016f8:	f000 f806 	bl	8001708 <__swsetup_r>
 80016fc:	2800      	cmp	r0, #0
 80016fe:	d0d5      	beq.n	80016ac <__swbuf_r+0x20>
 8001700:	f04f 37ff 	mov.w	r7, #4294967295
 8001704:	e7f4      	b.n	80016f0 <__swbuf_r+0x64>
	...

08001708 <__swsetup_r>:
 8001708:	b538      	push	{r3, r4, r5, lr}
 800170a:	4b2a      	ldr	r3, [pc, #168]	; (80017b4 <__swsetup_r+0xac>)
 800170c:	4605      	mov	r5, r0
 800170e:	6818      	ldr	r0, [r3, #0]
 8001710:	460c      	mov	r4, r1
 8001712:	b118      	cbz	r0, 800171c <__swsetup_r+0x14>
 8001714:	6a03      	ldr	r3, [r0, #32]
 8001716:	b90b      	cbnz	r3, 800171c <__swsetup_r+0x14>
 8001718:	f7ff fa36 	bl	8000b88 <__sinit>
 800171c:	89a3      	ldrh	r3, [r4, #12]
 800171e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001722:	0718      	lsls	r0, r3, #28
 8001724:	d422      	bmi.n	800176c <__swsetup_r+0x64>
 8001726:	06d9      	lsls	r1, r3, #27
 8001728:	d407      	bmi.n	800173a <__swsetup_r+0x32>
 800172a:	2309      	movs	r3, #9
 800172c:	602b      	str	r3, [r5, #0]
 800172e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001732:	81a3      	strh	r3, [r4, #12]
 8001734:	f04f 30ff 	mov.w	r0, #4294967295
 8001738:	e034      	b.n	80017a4 <__swsetup_r+0x9c>
 800173a:	0758      	lsls	r0, r3, #29
 800173c:	d512      	bpl.n	8001764 <__swsetup_r+0x5c>
 800173e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001740:	b141      	cbz	r1, 8001754 <__swsetup_r+0x4c>
 8001742:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001746:	4299      	cmp	r1, r3
 8001748:	d002      	beq.n	8001750 <__swsetup_r+0x48>
 800174a:	4628      	mov	r0, r5
 800174c:	f7ff fb24 	bl	8000d98 <_free_r>
 8001750:	2300      	movs	r3, #0
 8001752:	6363      	str	r3, [r4, #52]	; 0x34
 8001754:	89a3      	ldrh	r3, [r4, #12]
 8001756:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800175a:	81a3      	strh	r3, [r4, #12]
 800175c:	2300      	movs	r3, #0
 800175e:	6063      	str	r3, [r4, #4]
 8001760:	6923      	ldr	r3, [r4, #16]
 8001762:	6023      	str	r3, [r4, #0]
 8001764:	89a3      	ldrh	r3, [r4, #12]
 8001766:	f043 0308 	orr.w	r3, r3, #8
 800176a:	81a3      	strh	r3, [r4, #12]
 800176c:	6923      	ldr	r3, [r4, #16]
 800176e:	b94b      	cbnz	r3, 8001784 <__swsetup_r+0x7c>
 8001770:	89a3      	ldrh	r3, [r4, #12]
 8001772:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001776:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800177a:	d003      	beq.n	8001784 <__swsetup_r+0x7c>
 800177c:	4621      	mov	r1, r4
 800177e:	4628      	mov	r0, r5
 8001780:	f000 f850 	bl	8001824 <__smakebuf_r>
 8001784:	89a0      	ldrh	r0, [r4, #12]
 8001786:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800178a:	f010 0301 	ands.w	r3, r0, #1
 800178e:	d00a      	beq.n	80017a6 <__swsetup_r+0x9e>
 8001790:	2300      	movs	r3, #0
 8001792:	60a3      	str	r3, [r4, #8]
 8001794:	6963      	ldr	r3, [r4, #20]
 8001796:	425b      	negs	r3, r3
 8001798:	61a3      	str	r3, [r4, #24]
 800179a:	6923      	ldr	r3, [r4, #16]
 800179c:	b943      	cbnz	r3, 80017b0 <__swsetup_r+0xa8>
 800179e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80017a2:	d1c4      	bne.n	800172e <__swsetup_r+0x26>
 80017a4:	bd38      	pop	{r3, r4, r5, pc}
 80017a6:	0781      	lsls	r1, r0, #30
 80017a8:	bf58      	it	pl
 80017aa:	6963      	ldrpl	r3, [r4, #20]
 80017ac:	60a3      	str	r3, [r4, #8]
 80017ae:	e7f4      	b.n	800179a <__swsetup_r+0x92>
 80017b0:	2000      	movs	r0, #0
 80017b2:	e7f7      	b.n	80017a4 <__swsetup_r+0x9c>
 80017b4:	20000058 	.word	0x20000058

080017b8 <_sbrk_r>:
 80017b8:	b538      	push	{r3, r4, r5, lr}
 80017ba:	4d06      	ldr	r5, [pc, #24]	; (80017d4 <_sbrk_r+0x1c>)
 80017bc:	2300      	movs	r3, #0
 80017be:	4604      	mov	r4, r0
 80017c0:	4608      	mov	r0, r1
 80017c2:	602b      	str	r3, [r5, #0]
 80017c4:	f7ff f83a 	bl	800083c <_sbrk>
 80017c8:	1c43      	adds	r3, r0, #1
 80017ca:	d102      	bne.n	80017d2 <_sbrk_r+0x1a>
 80017cc:	682b      	ldr	r3, [r5, #0]
 80017ce:	b103      	cbz	r3, 80017d2 <_sbrk_r+0x1a>
 80017d0:	6023      	str	r3, [r4, #0]
 80017d2:	bd38      	pop	{r3, r4, r5, pc}
 80017d4:	200001bc 	.word	0x200001bc

080017d8 <__swhatbuf_r>:
 80017d8:	b570      	push	{r4, r5, r6, lr}
 80017da:	460c      	mov	r4, r1
 80017dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80017e0:	2900      	cmp	r1, #0
 80017e2:	b096      	sub	sp, #88	; 0x58
 80017e4:	4615      	mov	r5, r2
 80017e6:	461e      	mov	r6, r3
 80017e8:	da0d      	bge.n	8001806 <__swhatbuf_r+0x2e>
 80017ea:	89a3      	ldrh	r3, [r4, #12]
 80017ec:	f013 0f80 	tst.w	r3, #128	; 0x80
 80017f0:	f04f 0100 	mov.w	r1, #0
 80017f4:	bf0c      	ite	eq
 80017f6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80017fa:	2340      	movne	r3, #64	; 0x40
 80017fc:	2000      	movs	r0, #0
 80017fe:	6031      	str	r1, [r6, #0]
 8001800:	602b      	str	r3, [r5, #0]
 8001802:	b016      	add	sp, #88	; 0x58
 8001804:	bd70      	pop	{r4, r5, r6, pc}
 8001806:	466a      	mov	r2, sp
 8001808:	f000 f848 	bl	800189c <_fstat_r>
 800180c:	2800      	cmp	r0, #0
 800180e:	dbec      	blt.n	80017ea <__swhatbuf_r+0x12>
 8001810:	9901      	ldr	r1, [sp, #4]
 8001812:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8001816:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800181a:	4259      	negs	r1, r3
 800181c:	4159      	adcs	r1, r3
 800181e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001822:	e7eb      	b.n	80017fc <__swhatbuf_r+0x24>

08001824 <__smakebuf_r>:
 8001824:	898b      	ldrh	r3, [r1, #12]
 8001826:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001828:	079d      	lsls	r5, r3, #30
 800182a:	4606      	mov	r6, r0
 800182c:	460c      	mov	r4, r1
 800182e:	d507      	bpl.n	8001840 <__smakebuf_r+0x1c>
 8001830:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001834:	6023      	str	r3, [r4, #0]
 8001836:	6123      	str	r3, [r4, #16]
 8001838:	2301      	movs	r3, #1
 800183a:	6163      	str	r3, [r4, #20]
 800183c:	b002      	add	sp, #8
 800183e:	bd70      	pop	{r4, r5, r6, pc}
 8001840:	ab01      	add	r3, sp, #4
 8001842:	466a      	mov	r2, sp
 8001844:	f7ff ffc8 	bl	80017d8 <__swhatbuf_r>
 8001848:	9900      	ldr	r1, [sp, #0]
 800184a:	4605      	mov	r5, r0
 800184c:	4630      	mov	r0, r6
 800184e:	f7ff fb0f 	bl	8000e70 <_malloc_r>
 8001852:	b948      	cbnz	r0, 8001868 <__smakebuf_r+0x44>
 8001854:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001858:	059a      	lsls	r2, r3, #22
 800185a:	d4ef      	bmi.n	800183c <__smakebuf_r+0x18>
 800185c:	f023 0303 	bic.w	r3, r3, #3
 8001860:	f043 0302 	orr.w	r3, r3, #2
 8001864:	81a3      	strh	r3, [r4, #12]
 8001866:	e7e3      	b.n	8001830 <__smakebuf_r+0xc>
 8001868:	89a3      	ldrh	r3, [r4, #12]
 800186a:	6020      	str	r0, [r4, #0]
 800186c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001870:	81a3      	strh	r3, [r4, #12]
 8001872:	9b00      	ldr	r3, [sp, #0]
 8001874:	6163      	str	r3, [r4, #20]
 8001876:	9b01      	ldr	r3, [sp, #4]
 8001878:	6120      	str	r0, [r4, #16]
 800187a:	b15b      	cbz	r3, 8001894 <__smakebuf_r+0x70>
 800187c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001880:	4630      	mov	r0, r6
 8001882:	f000 f81d 	bl	80018c0 <_isatty_r>
 8001886:	b128      	cbz	r0, 8001894 <__smakebuf_r+0x70>
 8001888:	89a3      	ldrh	r3, [r4, #12]
 800188a:	f023 0303 	bic.w	r3, r3, #3
 800188e:	f043 0301 	orr.w	r3, r3, #1
 8001892:	81a3      	strh	r3, [r4, #12]
 8001894:	89a3      	ldrh	r3, [r4, #12]
 8001896:	431d      	orrs	r5, r3
 8001898:	81a5      	strh	r5, [r4, #12]
 800189a:	e7cf      	b.n	800183c <__smakebuf_r+0x18>

0800189c <_fstat_r>:
 800189c:	b538      	push	{r3, r4, r5, lr}
 800189e:	4d07      	ldr	r5, [pc, #28]	; (80018bc <_fstat_r+0x20>)
 80018a0:	2300      	movs	r3, #0
 80018a2:	4604      	mov	r4, r0
 80018a4:	4608      	mov	r0, r1
 80018a6:	4611      	mov	r1, r2
 80018a8:	602b      	str	r3, [r5, #0]
 80018aa:	f7fe ff9e 	bl	80007ea <_fstat>
 80018ae:	1c43      	adds	r3, r0, #1
 80018b0:	d102      	bne.n	80018b8 <_fstat_r+0x1c>
 80018b2:	682b      	ldr	r3, [r5, #0]
 80018b4:	b103      	cbz	r3, 80018b8 <_fstat_r+0x1c>
 80018b6:	6023      	str	r3, [r4, #0]
 80018b8:	bd38      	pop	{r3, r4, r5, pc}
 80018ba:	bf00      	nop
 80018bc:	200001bc 	.word	0x200001bc

080018c0 <_isatty_r>:
 80018c0:	b538      	push	{r3, r4, r5, lr}
 80018c2:	4d06      	ldr	r5, [pc, #24]	; (80018dc <_isatty_r+0x1c>)
 80018c4:	2300      	movs	r3, #0
 80018c6:	4604      	mov	r4, r0
 80018c8:	4608      	mov	r0, r1
 80018ca:	602b      	str	r3, [r5, #0]
 80018cc:	f7fe ff9d 	bl	800080a <_isatty>
 80018d0:	1c43      	adds	r3, r0, #1
 80018d2:	d102      	bne.n	80018da <_isatty_r+0x1a>
 80018d4:	682b      	ldr	r3, [r5, #0]
 80018d6:	b103      	cbz	r3, 80018da <_isatty_r+0x1a>
 80018d8:	6023      	str	r3, [r4, #0]
 80018da:	bd38      	pop	{r3, r4, r5, pc}
 80018dc:	200001bc 	.word	0x200001bc

080018e0 <_init>:
 80018e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018e2:	bf00      	nop
 80018e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018e6:	bc08      	pop	{r3}
 80018e8:	469e      	mov	lr, r3
 80018ea:	4770      	bx	lr

080018ec <_fini>:
 80018ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018ee:	bf00      	nop
 80018f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018f2:	bc08      	pop	{r3}
 80018f4:	469e      	mov	lr, r3
 80018f6:	4770      	bx	lr
