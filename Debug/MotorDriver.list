
MotorDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001844  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  080019e4  080019e4  000119e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a28  08001a28  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08001a28  08001a28  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001a28  08001a28  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a28  08001a28  00011a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001a2c  08001a2c  00011a2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08001a30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  2000005c  08001a8c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  08001a8c  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001c2d  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000007b0  00000000  00000000  00021cfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000260  00000000  00000000  000224b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001b6  00000000  00000000  00022710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000fc3d  00000000  00000000  000228c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000028a8  00000000  00000000  00032503  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0005572b  00000000  00000000  00034dab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000fc0  00000000  00000000  0008a4d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  0008b498  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080019cc 	.word	0x080019cc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	080019cc 	.word	0x080019cc

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
#include "motor_driver.h"

#define MOTORDIAMETER	60 //Motor Diameter

int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
	uart2_rxtx_init();
 8000286:	f000 fb91 	bl	80009ac <uart2_rxtx_init>
	Tim2_Ch1_Init();
 800028a:	f000 f879 	bl	8000380 <Tim2_Ch1_Init>
//	tim2_pa5_pwm();
//	Tim4_Ch1_Init();

	Encoder_A_Init();
 800028e:	f000 f99d 	bl	80005cc <Encoder_A_Init>
//	Encoder_B_Init();
//	reset_Encoder_A_counts();
//	Motor_A_Reverse(70);
	Motor_A_Forward(60);
 8000292:	203c      	movs	r0, #60	; 0x3c
 8000294:	f000 f97e 	bl	8000594 <Motor_A_Forward>
	while(1)
	{
		int pulses = get_Encoder_A_counts();
 8000298:	f000 fa62 	bl	8000760 <get_Encoder_A_counts>
 800029c:	6078      	str	r0, [r7, #4]
		printf("Pulses: %d\n\n\r", pulses);
 800029e:	6879      	ldr	r1, [r7, #4]
 80002a0:	4804      	ldr	r0, [pc, #16]	; (80002b4 <main+0x34>)
 80002a2:	f000 fd1d 	bl	8000ce0 <iprintf>
		reset_Encoder_A_counts();
 80002a6:	f000 fa67 	bl	8000778 <reset_Encoder_A_counts>
		Delay(4000);
 80002aa:	f44f 607a 	mov.w	r0, #4000	; 0xfa0
 80002ae:	f000 f84b 	bl	8000348 <Delay>
	{
 80002b2:	e7f1      	b.n	8000298 <main+0x18>
 80002b4:	080019e4 	.word	0x080019e4

080002b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002b8:	b480      	push	{r7}
 80002ba:	b083      	sub	sp, #12
 80002bc:	af00      	add	r7, sp, #0
 80002be:	4603      	mov	r3, r0
 80002c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002c6:	2b00      	cmp	r3, #0
 80002c8:	db0b      	blt.n	80002e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002ca:	79fb      	ldrb	r3, [r7, #7]
 80002cc:	f003 021f 	and.w	r2, r3, #31
 80002d0:	4907      	ldr	r1, [pc, #28]	; (80002f0 <__NVIC_EnableIRQ+0x38>)
 80002d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002d6:	095b      	lsrs	r3, r3, #5
 80002d8:	2001      	movs	r0, #1
 80002da:	fa00 f202 	lsl.w	r2, r0, r2
 80002de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002e2:	bf00      	nop
 80002e4:	370c      	adds	r7, #12
 80002e6:	46bd      	mov	sp, r7
 80002e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop
 80002f0:	e000e100 	.word	0xe000e100

080002f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	4603      	mov	r3, r0
 80002fc:	6039      	str	r1, [r7, #0]
 80002fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000300:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000304:	2b00      	cmp	r3, #0
 8000306:	db0a      	blt.n	800031e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000308:	683b      	ldr	r3, [r7, #0]
 800030a:	b2da      	uxtb	r2, r3
 800030c:	490c      	ldr	r1, [pc, #48]	; (8000340 <__NVIC_SetPriority+0x4c>)
 800030e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000312:	0112      	lsls	r2, r2, #4
 8000314:	b2d2      	uxtb	r2, r2
 8000316:	440b      	add	r3, r1
 8000318:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800031c:	e00a      	b.n	8000334 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800031e:	683b      	ldr	r3, [r7, #0]
 8000320:	b2da      	uxtb	r2, r3
 8000322:	4908      	ldr	r1, [pc, #32]	; (8000344 <__NVIC_SetPriority+0x50>)
 8000324:	79fb      	ldrb	r3, [r7, #7]
 8000326:	f003 030f 	and.w	r3, r3, #15
 800032a:	3b04      	subs	r3, #4
 800032c:	0112      	lsls	r2, r2, #4
 800032e:	b2d2      	uxtb	r2, r2
 8000330:	440b      	add	r3, r1
 8000332:	761a      	strb	r2, [r3, #24]
}
 8000334:	bf00      	nop
 8000336:	370c      	adds	r7, #12
 8000338:	46bd      	mov	sp, r7
 800033a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033e:	4770      	bx	lr
 8000340:	e000e100 	.word	0xe000e100
 8000344:	e000ed00 	.word	0xe000ed00

08000348 <Delay>:
void reset_Encoder_B_counts(void);


/* Delay function  in milliseconds*/
void Delay(uint32_t duration)
{
 8000348:	b480      	push	{r7}
 800034a:	b085      	sub	sp, #20
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
	duration = duration * 1345;
 8000350:	687b      	ldr	r3, [r7, #4]
 8000352:	f240 5241 	movw	r2, #1345	; 0x541
 8000356:	fb02 f303 	mul.w	r3, r2, r3
 800035a:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < duration; i++){}
 800035c:	2300      	movs	r3, #0
 800035e:	60fb      	str	r3, [r7, #12]
 8000360:	e002      	b.n	8000368 <Delay+0x20>
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	3301      	adds	r3, #1
 8000366:	60fb      	str	r3, [r7, #12]
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	687a      	ldr	r2, [r7, #4]
 800036c:	429a      	cmp	r2, r3
 800036e:	d8f8      	bhi.n	8000362 <Delay+0x1a>
}
 8000370:	bf00      	nop
 8000372:	bf00      	nop
 8000374:	3714      	adds	r7, #20
 8000376:	46bd      	mov	sp, r7
 8000378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037c:	4770      	bx	lr
	...

08000380 <Tim2_Ch1_Init>:
	/*Enable counter*/
	TIM2->CR1 |= CR1_CEN;
}

void Tim2_Ch1_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8000384:	4b2a      	ldr	r3, [pc, #168]	; (8000430 <Tim2_Ch1_Init+0xb0>)
 8000386:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000388:	4a29      	ldr	r2, [pc, #164]	; (8000430 <Tim2_Ch1_Init+0xb0>)
 800038a:	f043 0301 	orr.w	r3, r3, #1
 800038e:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA0 to alternate function mode*/
	GPIOA->MODER &= ~(1U<<0);
 8000390:	4b28      	ldr	r3, [pc, #160]	; (8000434 <Tim2_Ch1_Init+0xb4>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a27      	ldr	r2, [pc, #156]	; (8000434 <Tim2_Ch1_Init+0xb4>)
 8000396:	f023 0301 	bic.w	r3, r3, #1
 800039a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<1);
 800039c:	4b25      	ldr	r3, [pc, #148]	; (8000434 <Tim2_Ch1_Init+0xb4>)
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	4a24      	ldr	r2, [pc, #144]	; (8000434 <Tim2_Ch1_Init+0xb4>)
 80003a2:	f043 0302 	orr.w	r3, r3, #2
 80003a6:	6013      	str	r3, [r2, #0]

	/*Configure the alternate function type to TIM2_CH1*/
	GPIOA->AFR[0] |=  (1U<<0);
 80003a8:	4b22      	ldr	r3, [pc, #136]	; (8000434 <Tim2_Ch1_Init+0xb4>)
 80003aa:	6a1b      	ldr	r3, [r3, #32]
 80003ac:	4a21      	ldr	r2, [pc, #132]	; (8000434 <Tim2_Ch1_Init+0xb4>)
 80003ae:	f043 0301 	orr.w	r3, r3, #1
 80003b2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<1);
 80003b4:	4b1f      	ldr	r3, [pc, #124]	; (8000434 <Tim2_Ch1_Init+0xb4>)
 80003b6:	6a1b      	ldr	r3, [r3, #32]
 80003b8:	4a1e      	ldr	r2, [pc, #120]	; (8000434 <Tim2_Ch1_Init+0xb4>)
 80003ba:	f023 0302 	bic.w	r3, r3, #2
 80003be:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<2);
 80003c0:	4b1c      	ldr	r3, [pc, #112]	; (8000434 <Tim2_Ch1_Init+0xb4>)
 80003c2:	6a1b      	ldr	r3, [r3, #32]
 80003c4:	4a1b      	ldr	r2, [pc, #108]	; (8000434 <Tim2_Ch1_Init+0xb4>)
 80003c6:	f023 0304 	bic.w	r3, r3, #4
 80003ca:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<3);
 80003cc:	4b19      	ldr	r3, [pc, #100]	; (8000434 <Tim2_Ch1_Init+0xb4>)
 80003ce:	6a1b      	ldr	r3, [r3, #32]
 80003d0:	4a18      	ldr	r2, [pc, #96]	; (8000434 <Tim2_Ch1_Init+0xb4>)
 80003d2:	f023 0308 	bic.w	r3, r3, #8
 80003d6:	6213      	str	r3, [r2, #32]

	/*Enable clock access to TIM2*/
	RCC->APB1ENR |= TIM2EN;
 80003d8:	4b15      	ldr	r3, [pc, #84]	; (8000430 <Tim2_Ch1_Init+0xb0>)
 80003da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003dc:	4a14      	ldr	r2, [pc, #80]	; (8000430 <Tim2_Ch1_Init+0xb0>)
 80003de:	f043 0301 	orr.w	r3, r3, #1
 80003e2:	6413      	str	r3, [r2, #64]	; 0x40

	/*Set prescaler value*/
	TIM2->PSC = TIM_PRESCALER - 1; // 16 000 000 / 8 = 2 000 000Hz
 80003e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003e8:	2207      	movs	r2, #7
 80003ea:	629a      	str	r2, [r3, #40]	; 0x28

	/*Set auto-reload value
	 * By default, this sets the motor frequency to 20kHz, which is a frequency at the edge of the
	 * human hearing spectrum*/
	pwm_set_frequency(ARR_PRESACLER, TIMER2);
 80003ec:	2102      	movs	r1, #2
 80003ee:	2064      	movs	r0, #100	; 0x64
 80003f0:	f000 f822 	bl	8000438 <pwm_set_frequency>

	/*Set output compare toggle mode*/
	TIM2->CCMR1 = OC1_PWM_MODE1; // Register unique to each channel
 80003f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003f8:	2260      	movs	r2, #96	; 0x60
 80003fa:	619a      	str	r2, [r3, #24]

	/*Set duty cycle of PWM	% of ARR value
	 * By default, the duty cycle is set to 40% of the ARR_PRESCALER*/
	pwm_set_dutycycle(DUTY_CYCLE, TIMER2); // Register unique to each channel
 80003fc:	2102      	movs	r1, #2
 80003fe:	2028      	movs	r0, #40	; 0x28
 8000400:	f000 f838 	bl	8000474 <pwm_set_dutycycle>

	/*Enable Timer 2 Channel 1 in compare mode*/
	TIM2->CCER |= CCER_CC1E; // Register unique to each channel
 8000404:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000408:	6a1b      	ldr	r3, [r3, #32]
 800040a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800040e:	f043 0301 	orr.w	r3, r3, #1
 8000412:	6213      	str	r3, [r2, #32]

	/*Clear counter*/
	TIM2->CNT = 0;
 8000414:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000418:	2200      	movs	r2, #0
 800041a:	625a      	str	r2, [r3, #36]	; 0x24
	/*Enable counter*/
	TIM2->CR1 |= CR1_CEN;
 800041c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000426:	f043 0301 	orr.w	r3, r3, #1
 800042a:	6013      	str	r3, [r2, #0]
}
 800042c:	bf00      	nop
 800042e:	bd80      	pop	{r7, pc}
 8000430:	40023800 	.word	0x40023800
 8000434:	40020000 	.word	0x40020000

08000438 <pwm_set_frequency>:

/*Frequency prescaler dividing down 2Mhz to a usable frequency range
 * 2 000 000 / Freq = Desired Frequency
 */
void pwm_set_frequency(uint32_t Freq, uint32_t timer)
{
 8000438:	b480      	push	{r7}
 800043a:	b083      	sub	sp, #12
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
 8000440:	6039      	str	r1, [r7, #0]
	if (timer == 2)
 8000442:	683b      	ldr	r3, [r7, #0]
 8000444:	2b02      	cmp	r3, #2
 8000446:	d105      	bne.n	8000454 <pwm_set_frequency+0x1c>
	{
		TIM2->ARR = Freq - 1;
 8000448:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	3b01      	subs	r3, #1
 8000450:	62d3      	str	r3, [r2, #44]	; 0x2c
	else if (timer == 4)
	{
		TIM4->ARR = Freq - 1;
	}

}
 8000452:	e006      	b.n	8000462 <pwm_set_frequency+0x2a>
	else if (timer == 4)
 8000454:	683b      	ldr	r3, [r7, #0]
 8000456:	2b04      	cmp	r3, #4
 8000458:	d103      	bne.n	8000462 <pwm_set_frequency+0x2a>
		TIM4->ARR = Freq - 1;
 800045a:	4a05      	ldr	r2, [pc, #20]	; (8000470 <pwm_set_frequency+0x38>)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	3b01      	subs	r3, #1
 8000460:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8000462:	bf00      	nop
 8000464:	370c      	adds	r7, #12
 8000466:	46bd      	mov	sp, r7
 8000468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046c:	4770      	bx	lr
 800046e:	bf00      	nop
 8000470:	40000800 	.word	0x40000800

08000474 <pwm_set_dutycycle>:

/*Set the duty cycle of the PWM signal*/
void pwm_set_dutycycle(uint32_t DutyCycle, uint32_t timer)
{
 8000474:	b480      	push	{r7}
 8000476:	b083      	sub	sp, #12
 8000478:	af00      	add	r7, sp, #0
 800047a:	6078      	str	r0, [r7, #4]
 800047c:	6039      	str	r1, [r7, #0]
	if (timer == 2)
 800047e:	683b      	ldr	r3, [r7, #0]
 8000480:	2b02      	cmp	r3, #2
 8000482:	d105      	bne.n	8000490 <pwm_set_dutycycle+0x1c>
	{
		/*Set duty cycle of Timer 2 channel 1 PWM to % of ARR value*/
		TIM2->CCR1 = DutyCycle - 1;
 8000484:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	3b01      	subs	r3, #1
 800048c:	6353      	str	r3, [r2, #52]	; 0x34
	else if (timer == 4)
	{
		/*Set duty cycle of Timer 4 channel 1 PWM to % of ARR value*/
		TIM4->CCR1 = DutyCycle - 1;
	}
}
 800048e:	e006      	b.n	800049e <pwm_set_dutycycle+0x2a>
	else if (timer == 4)
 8000490:	683b      	ldr	r3, [r7, #0]
 8000492:	2b04      	cmp	r3, #4
 8000494:	d103      	bne.n	800049e <pwm_set_dutycycle+0x2a>
		TIM4->CCR1 = DutyCycle - 1;
 8000496:	4a05      	ldr	r2, [pc, #20]	; (80004ac <pwm_set_dutycycle+0x38>)
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	3b01      	subs	r3, #1
 800049c:	6353      	str	r3, [r2, #52]	; 0x34
}
 800049e:	bf00      	nop
 80004a0:	370c      	adds	r7, #12
 80004a2:	46bd      	mov	sp, r7
 80004a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a8:	4770      	bx	lr
 80004aa:	bf00      	nop
 80004ac:	40000800 	.word	0x40000800

080004b0 <MotorPin_Init>:

static void MotorPin_Init(void)
{
 80004b0:	b480      	push	{r7}
 80004b2:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 80004b4:	4b35      	ldr	r3, [pc, #212]	; (800058c <MotorPin_Init+0xdc>)
 80004b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b8:	4a34      	ldr	r2, [pc, #208]	; (800058c <MotorPin_Init+0xdc>)
 80004ba:	f043 0301 	orr.w	r3, r3, #1
 80004be:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA5 to output mode*/
	GPIOA->MODER |= (1U<<10);
 80004c0:	4b33      	ldr	r3, [pc, #204]	; (8000590 <MotorPin_Init+0xe0>)
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a32      	ldr	r2, [pc, #200]	; (8000590 <MotorPin_Init+0xe0>)
 80004c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004ca:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U<<11);
 80004cc:	4b30      	ldr	r3, [pc, #192]	; (8000590 <MotorPin_Init+0xe0>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4a2f      	ldr	r2, [pc, #188]	; (8000590 <MotorPin_Init+0xe0>)
 80004d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80004d6:	6013      	str	r3, [r2, #0]
	/*Set PA5 to pull down mode*/
	GPIOA->PUPDR &= ~(1U<<10);
 80004d8:	4b2d      	ldr	r3, [pc, #180]	; (8000590 <MotorPin_Init+0xe0>)
 80004da:	68db      	ldr	r3, [r3, #12]
 80004dc:	4a2c      	ldr	r2, [pc, #176]	; (8000590 <MotorPin_Init+0xe0>)
 80004de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80004e2:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (1U<<11);
 80004e4:	4b2a      	ldr	r3, [pc, #168]	; (8000590 <MotorPin_Init+0xe0>)
 80004e6:	68db      	ldr	r3, [r3, #12]
 80004e8:	4a29      	ldr	r2, [pc, #164]	; (8000590 <MotorPin_Init+0xe0>)
 80004ea:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80004ee:	60d3      	str	r3, [r2, #12]

	/*Set PA4 to output mode*/
	GPIOA->MODER |= (1U<<8);
 80004f0:	4b27      	ldr	r3, [pc, #156]	; (8000590 <MotorPin_Init+0xe0>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a26      	ldr	r2, [pc, #152]	; (8000590 <MotorPin_Init+0xe0>)
 80004f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004fa:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U<<9);
 80004fc:	4b24      	ldr	r3, [pc, #144]	; (8000590 <MotorPin_Init+0xe0>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a23      	ldr	r2, [pc, #140]	; (8000590 <MotorPin_Init+0xe0>)
 8000502:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000506:	6013      	str	r3, [r2, #0]
	/*Set PA4 to pull down mode*/
	GPIOA->PUPDR &= ~(1U<<8);
 8000508:	4b21      	ldr	r3, [pc, #132]	; (8000590 <MotorPin_Init+0xe0>)
 800050a:	68db      	ldr	r3, [r3, #12]
 800050c:	4a20      	ldr	r2, [pc, #128]	; (8000590 <MotorPin_Init+0xe0>)
 800050e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000512:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (1U<<9);
 8000514:	4b1e      	ldr	r3, [pc, #120]	; (8000590 <MotorPin_Init+0xe0>)
 8000516:	68db      	ldr	r3, [r3, #12]
 8000518:	4a1d      	ldr	r2, [pc, #116]	; (8000590 <MotorPin_Init+0xe0>)
 800051a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800051e:	60d3      	str	r3, [r2, #12]

	/*Set PA6 to output mode*/
	GPIOA->MODER |= (1U<<12);
 8000520:	4b1b      	ldr	r3, [pc, #108]	; (8000590 <MotorPin_Init+0xe0>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a1a      	ldr	r2, [pc, #104]	; (8000590 <MotorPin_Init+0xe0>)
 8000526:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800052a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U<<13);
 800052c:	4b18      	ldr	r3, [pc, #96]	; (8000590 <MotorPin_Init+0xe0>)
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	4a17      	ldr	r2, [pc, #92]	; (8000590 <MotorPin_Init+0xe0>)
 8000532:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000536:	6013      	str	r3, [r2, #0]
	/*Set PA6 to pull down mode*/
	GPIOA->PUPDR &= ~(1U<<12);
 8000538:	4b15      	ldr	r3, [pc, #84]	; (8000590 <MotorPin_Init+0xe0>)
 800053a:	68db      	ldr	r3, [r3, #12]
 800053c:	4a14      	ldr	r2, [pc, #80]	; (8000590 <MotorPin_Init+0xe0>)
 800053e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000542:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (1U<<13);
 8000544:	4b12      	ldr	r3, [pc, #72]	; (8000590 <MotorPin_Init+0xe0>)
 8000546:	68db      	ldr	r3, [r3, #12]
 8000548:	4a11      	ldr	r2, [pc, #68]	; (8000590 <MotorPin_Init+0xe0>)
 800054a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800054e:	60d3      	str	r3, [r2, #12]

	/*Set PA7 to output mode*/
	GPIOA->MODER |= (1U<<14);
 8000550:	4b0f      	ldr	r3, [pc, #60]	; (8000590 <MotorPin_Init+0xe0>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	4a0e      	ldr	r2, [pc, #56]	; (8000590 <MotorPin_Init+0xe0>)
 8000556:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800055a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U<<15);
 800055c:	4b0c      	ldr	r3, [pc, #48]	; (8000590 <MotorPin_Init+0xe0>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a0b      	ldr	r2, [pc, #44]	; (8000590 <MotorPin_Init+0xe0>)
 8000562:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000566:	6013      	str	r3, [r2, #0]
	/*Set PA7 to pull down mode*/
	GPIOA->PUPDR &= ~(1U<<14);
 8000568:	4b09      	ldr	r3, [pc, #36]	; (8000590 <MotorPin_Init+0xe0>)
 800056a:	68db      	ldr	r3, [r3, #12]
 800056c:	4a08      	ldr	r2, [pc, #32]	; (8000590 <MotorPin_Init+0xe0>)
 800056e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000572:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (1U<<15);
 8000574:	4b06      	ldr	r3, [pc, #24]	; (8000590 <MotorPin_Init+0xe0>)
 8000576:	68db      	ldr	r3, [r3, #12]
 8000578:	4a05      	ldr	r2, [pc, #20]	; (8000590 <MotorPin_Init+0xe0>)
 800057a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800057e:	60d3      	str	r3, [r2, #12]
}
 8000580:	bf00      	nop
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	40023800 	.word	0x40023800
 8000590:	40020000 	.word	0x40020000

08000594 <Motor_A_Forward>:


/* NOTE: Have to add deadtime delay to prevent shoothrough*/
void Motor_A_Forward(uint32_t speed)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b082      	sub	sp, #8
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
	MotorPin_Init();
 800059c:	f7ff ff88 	bl	80004b0 <MotorPin_Init>
	GPIOA->ODR |= IN1;
 80005a0:	4b09      	ldr	r3, [pc, #36]	; (80005c8 <Motor_A_Forward+0x34>)
 80005a2:	695b      	ldr	r3, [r3, #20]
 80005a4:	4a08      	ldr	r2, [pc, #32]	; (80005c8 <Motor_A_Forward+0x34>)
 80005a6:	f043 0320 	orr.w	r3, r3, #32
 80005aa:	6153      	str	r3, [r2, #20]
	GPIOA->ODR &= ~IN2;
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <Motor_A_Forward+0x34>)
 80005ae:	695b      	ldr	r3, [r3, #20]
 80005b0:	4a05      	ldr	r2, [pc, #20]	; (80005c8 <Motor_A_Forward+0x34>)
 80005b2:	f023 0310 	bic.w	r3, r3, #16
 80005b6:	6153      	str	r3, [r2, #20]
	pwm_set_dutycycle(speed, TIMER2);
 80005b8:	2102      	movs	r1, #2
 80005ba:	6878      	ldr	r0, [r7, #4]
 80005bc:	f7ff ff5a 	bl	8000474 <pwm_set_dutycycle>
//	Motor_A_Status();
}
 80005c0:	bf00      	nop
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	40020000 	.word	0x40020000

080005cc <Encoder_A_Init>:
		printf("IN4 ON...\n\r");
	}
}

void Encoder_A_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005d0:	b672      	cpsid	i
}
 80005d2:	bf00      	nop
	/*Disable global interrupts*/
	__disable_irq();

	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 80005d4:	4b2f      	ldr	r3, [pc, #188]	; (8000694 <Encoder_A_Init+0xc8>)
 80005d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d8:	4a2e      	ldr	r2, [pc, #184]	; (8000694 <Encoder_A_Init+0xc8>)
 80005da:	f043 0301 	orr.w	r3, r3, #1
 80005de:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA8 to input mode*/
	GPIOA->MODER &= ~(1U<<16);
 80005e0:	4b2d      	ldr	r3, [pc, #180]	; (8000698 <Encoder_A_Init+0xcc>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a2c      	ldr	r2, [pc, #176]	; (8000698 <Encoder_A_Init+0xcc>)
 80005e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005ea:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U<<17);
 80005ec:	4b2a      	ldr	r3, [pc, #168]	; (8000698 <Encoder_A_Init+0xcc>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a29      	ldr	r2, [pc, #164]	; (8000698 <Encoder_A_Init+0xcc>)
 80005f2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80005f6:	6013      	str	r3, [r2, #0]
	/*Set PA8 to no pull mode*/
	GPIOA->PUPDR &= ~(1U<<16);
 80005f8:	4b27      	ldr	r3, [pc, #156]	; (8000698 <Encoder_A_Init+0xcc>)
 80005fa:	68db      	ldr	r3, [r3, #12]
 80005fc:	4a26      	ldr	r2, [pc, #152]	; (8000698 <Encoder_A_Init+0xcc>)
 80005fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000602:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR &= ~(1U<<17);
 8000604:	4b24      	ldr	r3, [pc, #144]	; (8000698 <Encoder_A_Init+0xcc>)
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	4a23      	ldr	r2, [pc, #140]	; (8000698 <Encoder_A_Init+0xcc>)
 800060a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800060e:	60d3      	str	r3, [r2, #12]

	/*Set PA9 to input mode*/
	GPIOA->MODER &= ~(1U<<18);
 8000610:	4b21      	ldr	r3, [pc, #132]	; (8000698 <Encoder_A_Init+0xcc>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a20      	ldr	r2, [pc, #128]	; (8000698 <Encoder_A_Init+0xcc>)
 8000616:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800061a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=	~(1U<<19);
 800061c:	4b1e      	ldr	r3, [pc, #120]	; (8000698 <Encoder_A_Init+0xcc>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a1d      	ldr	r2, [pc, #116]	; (8000698 <Encoder_A_Init+0xcc>)
 8000622:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000626:	6013      	str	r3, [r2, #0]
	/*Set PA9 to no pull mode*/
	GPIOA->PUPDR &= ~(1U<<18);
 8000628:	4b1b      	ldr	r3, [pc, #108]	; (8000698 <Encoder_A_Init+0xcc>)
 800062a:	68db      	ldr	r3, [r3, #12]
 800062c:	4a1a      	ldr	r2, [pc, #104]	; (8000698 <Encoder_A_Init+0xcc>)
 800062e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000632:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR &= ~(1U<<19);
 8000634:	4b18      	ldr	r3, [pc, #96]	; (8000698 <Encoder_A_Init+0xcc>)
 8000636:	68db      	ldr	r3, [r3, #12]
 8000638:	4a17      	ldr	r2, [pc, #92]	; (8000698 <Encoder_A_Init+0xcc>)
 800063a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800063e:	60d3      	str	r3, [r2, #12]


	/*Enable clock access to SYSCFG*/
	RCC->APB2ENR |= SYSCFGEN;
 8000640:	4b14      	ldr	r3, [pc, #80]	; (8000694 <Encoder_A_Init+0xc8>)
 8000642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000644:	4a13      	ldr	r2, [pc, #76]	; (8000694 <Encoder_A_Init+0xc8>)
 8000646:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800064a:	6453      	str	r3, [r2, #68]	; 0x44

	/*Select PORTA on EXTI8*/
	SYSCFG->EXTICR[2] &= ~EXTI8; //EXTICR[3:0] chooses from the four configuration registers
 800064c:	4b13      	ldr	r3, [pc, #76]	; (800069c <Encoder_A_Init+0xd0>)
 800064e:	691b      	ldr	r3, [r3, #16]
 8000650:	4a12      	ldr	r2, [pc, #72]	; (800069c <Encoder_A_Init+0xd0>)
 8000652:	f023 030f 	bic.w	r3, r3, #15
 8000656:	6113      	str	r3, [r2, #16]

	/*Unmask EXTI8*/
	EXTI->IMR |= IMR_MR8;
 8000658:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <Encoder_A_Init+0xd4>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a10      	ldr	r2, [pc, #64]	; (80006a0 <Encoder_A_Init+0xd4>)
 800065e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000662:	6013      	str	r3, [r2, #0]
	/*Select rising edge trigger*/
	EXTI->RTSR |= RTSR_TR8;
 8000664:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <Encoder_A_Init+0xd4>)
 8000666:	689b      	ldr	r3, [r3, #8]
 8000668:	4a0d      	ldr	r2, [pc, #52]	; (80006a0 <Encoder_A_Init+0xd4>)
 800066a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800066e:	6093      	str	r3, [r2, #8]
	/*Select falling edge trigger*/
	EXTI->FTSR |= FTSR_TR8;
 8000670:	4b0b      	ldr	r3, [pc, #44]	; (80006a0 <Encoder_A_Init+0xd4>)
 8000672:	68db      	ldr	r3, [r3, #12]
 8000674:	4a0a      	ldr	r2, [pc, #40]	; (80006a0 <Encoder_A_Init+0xd4>)
 8000676:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800067a:	60d3      	str	r3, [r2, #12]

	/*Set priority of EXTI8 in NVIC*/
	NVIC_SetPriority(EXTI9_5_IRQn, 0);
 800067c:	2100      	movs	r1, #0
 800067e:	2017      	movs	r0, #23
 8000680:	f7ff fe38 	bl	80002f4 <__NVIC_SetPriority>
	/*Enable EXTI8 line in NVIC*/
	NVIC_EnableIRQ(EXTI9_5_IRQn); //EXTI9_5_IRQn selects external Line[9:5] interrupts
 8000684:	2017      	movs	r0, #23
 8000686:	f7ff fe17 	bl	80002b8 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800068a:	b662      	cpsie	i
}
 800068c:	bf00      	nop

	/*Enable global interrupts*/
	__enable_irq();

}
 800068e:	bf00      	nop
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40023800 	.word	0x40023800
 8000698:	40020000 	.word	0x40020000
 800069c:	40013800 	.word	0x40013800
 80006a0:	40013c00 	.word	0x40013c00

080006a4 <exti8_callback>:

static void exti8_callback(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
	long int last_state_A = GPIOA->IDR & Encoder_A_Pin8;
 80006aa:	4b1f      	ldr	r3, [pc, #124]	; (8000728 <exti8_callback+0x84>)
 80006ac:	691b      	ldr	r3, [r3, #16]
 80006ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006b2:	607b      	str	r3, [r7, #4]
	if ((Encoder_A_Pin8_Last == GPIO_PIN_RESET) && (last_state_A == GPIO_PIN_SET))
 80006b4:	4b1d      	ldr	r3, [pc, #116]	; (800072c <exti8_callback+0x88>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d11c      	bne.n	80006f6 <exti8_callback+0x52>
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	2b20      	cmp	r3, #32
 80006c0:	d119      	bne.n	80006f6 <exti8_callback+0x52>
	{
		long int val_A = GPIOA->IDR & Encoder_A_Pin9;
 80006c2:	4b19      	ldr	r3, [pc, #100]	; (8000728 <exti8_callback+0x84>)
 80006c4:	691b      	ldr	r3, [r3, #16]
 80006c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80006ca:	603b      	str	r3, [r7, #0]
		if ((val_A == GPIO_PIN_RESET) && direction_A)
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d107      	bne.n	80006e2 <exti8_callback+0x3e>
 80006d2:	4b17      	ldr	r3, [pc, #92]	; (8000730 <exti8_callback+0x8c>)
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d003      	beq.n	80006e2 <exti8_callback+0x3e>
		{
			direction_A = 0; // Reverse
 80006da:	4b15      	ldr	r3, [pc, #84]	; (8000730 <exti8_callback+0x8c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	701a      	strb	r2, [r3, #0]
 80006e0:	e009      	b.n	80006f6 <exti8_callback+0x52>
		}
		else if ((val_A == GPIO_PIN_SET) && (direction_A == 0))
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	2b20      	cmp	r3, #32
 80006e6:	d106      	bne.n	80006f6 <exti8_callback+0x52>
 80006e8:	4b11      	ldr	r3, [pc, #68]	; (8000730 <exti8_callback+0x8c>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d102      	bne.n	80006f6 <exti8_callback+0x52>
		{
			direction_A = 1; // Forward
 80006f0:	4b0f      	ldr	r3, [pc, #60]	; (8000730 <exti8_callback+0x8c>)
 80006f2:	2201      	movs	r2, #1
 80006f4:	701a      	strb	r2, [r3, #0]
		}
	}
	Encoder_A_Pin8_Last = last_state_A;
 80006f6:	4a0d      	ldr	r2, [pc, #52]	; (800072c <exti8_callback+0x88>)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	6013      	str	r3, [r2, #0]

	if (!direction_A)
 80006fc:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <exti8_callback+0x8c>)
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d105      	bne.n	8000710 <exti8_callback+0x6c>
		Encoder_A_counts++;
 8000704:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <exti8_callback+0x90>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	3301      	adds	r3, #1
 800070a:	4a0a      	ldr	r2, [pc, #40]	; (8000734 <exti8_callback+0x90>)
 800070c:	6013      	str	r3, [r2, #0]
	else
		Encoder_A_counts--;
}
 800070e:	e004      	b.n	800071a <exti8_callback+0x76>
		Encoder_A_counts--;
 8000710:	4b08      	ldr	r3, [pc, #32]	; (8000734 <exti8_callback+0x90>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	3b01      	subs	r3, #1
 8000716:	4a07      	ldr	r2, [pc, #28]	; (8000734 <exti8_callback+0x90>)
 8000718:	6013      	str	r3, [r2, #0]
}
 800071a:	bf00      	nop
 800071c:	370c      	adds	r7, #12
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	40020000 	.word	0x40020000
 800072c:	20000078 	.word	0x20000078
 8000730:	20000088 	.word	0x20000088
 8000734:	2000007c 	.word	0x2000007c

08000738 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
	if((EXTI->PR & Encoder_A_Pin8)!=0) //If Pending register on Line 8 is triggered
 800073c:	4b07      	ldr	r3, [pc, #28]	; (800075c <EXTI9_5_IRQHandler+0x24>)
 800073e:	695b      	ldr	r3, [r3, #20]
 8000740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000744:	2b00      	cmp	r3, #0
 8000746:	d007      	beq.n	8000758 <EXTI9_5_IRQHandler+0x20>
	{
		/*Clear PR flag*/
		EXTI->PR |= Encoder_A_Pin8;
 8000748:	4b04      	ldr	r3, [pc, #16]	; (800075c <EXTI9_5_IRQHandler+0x24>)
 800074a:	695b      	ldr	r3, [r3, #20]
 800074c:	4a03      	ldr	r2, [pc, #12]	; (800075c <EXTI9_5_IRQHandler+0x24>)
 800074e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000752:	6153      	str	r3, [r2, #20]

		exti8_callback();
 8000754:	f7ff ffa6 	bl	80006a4 <exti8_callback>
	}

}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40013c00 	.word	0x40013c00

08000760 <get_Encoder_A_counts>:

int get_Encoder_A_counts(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
	return Encoder_A_counts;
 8000764:	4b03      	ldr	r3, [pc, #12]	; (8000774 <get_Encoder_A_counts+0x14>)
 8000766:	681b      	ldr	r3, [r3, #0]
}
 8000768:	4618      	mov	r0, r3
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr
 8000772:	bf00      	nop
 8000774:	2000007c 	.word	0x2000007c

08000778 <reset_Encoder_A_counts>:

void reset_Encoder_A_counts(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
	Encoder_A_counts = 0;
 800077c:	4b03      	ldr	r3, [pc, #12]	; (800078c <reset_Encoder_A_counts+0x14>)
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	2000007c 	.word	0x2000007c

08000790 <exti10_callback>:
	__enable_irq();

}

static void exti10_callback(void)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
	long int last_state_B = GPIOA->IDR & Encoder_B_Pin10;
 8000796:	4b1f      	ldr	r3, [pc, #124]	; (8000814 <exti10_callback+0x84>)
 8000798:	691b      	ldr	r3, [r3, #16]
 800079a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800079e:	607b      	str	r3, [r7, #4]
	if ((Encoder_B_Pin10_Last == GPIO_PIN_RESET) && (last_state_B == GPIO_PIN_SET))
 80007a0:	4b1d      	ldr	r3, [pc, #116]	; (8000818 <exti10_callback+0x88>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d11c      	bne.n	80007e2 <exti10_callback+0x52>
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	2b20      	cmp	r3, #32
 80007ac:	d119      	bne.n	80007e2 <exti10_callback+0x52>
	{
		long int val_B = GPIOA->IDR & Encoder_B_Pin11;
 80007ae:	4b19      	ldr	r3, [pc, #100]	; (8000814 <exti10_callback+0x84>)
 80007b0:	691b      	ldr	r3, [r3, #16]
 80007b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80007b6:	603b      	str	r3, [r7, #0]
		if ((val_B == GPIO_PIN_RESET) && direction_B)
 80007b8:	683b      	ldr	r3, [r7, #0]
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d107      	bne.n	80007ce <exti10_callback+0x3e>
 80007be:	4b17      	ldr	r3, [pc, #92]	; (800081c <exti10_callback+0x8c>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d003      	beq.n	80007ce <exti10_callback+0x3e>
		{
			direction_B = 0; // Reverse
 80007c6:	4b15      	ldr	r3, [pc, #84]	; (800081c <exti10_callback+0x8c>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	701a      	strb	r2, [r3, #0]
 80007cc:	e009      	b.n	80007e2 <exti10_callback+0x52>
		}
		else if ((val_B == GPIO_PIN_SET) && (direction_B == 0))
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	2b20      	cmp	r3, #32
 80007d2:	d106      	bne.n	80007e2 <exti10_callback+0x52>
 80007d4:	4b11      	ldr	r3, [pc, #68]	; (800081c <exti10_callback+0x8c>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d102      	bne.n	80007e2 <exti10_callback+0x52>
		{
			direction_B = 1; // Forward
 80007dc:	4b0f      	ldr	r3, [pc, #60]	; (800081c <exti10_callback+0x8c>)
 80007de:	2201      	movs	r2, #1
 80007e0:	701a      	strb	r2, [r3, #0]
		}
	}
	Encoder_B_Pin10_Last = last_state_B;
 80007e2:	4a0d      	ldr	r2, [pc, #52]	; (8000818 <exti10_callback+0x88>)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	6013      	str	r3, [r2, #0]

	if (!direction_B)
 80007e8:	4b0c      	ldr	r3, [pc, #48]	; (800081c <exti10_callback+0x8c>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d105      	bne.n	80007fc <exti10_callback+0x6c>
		Encoder_B_counts++;
 80007f0:	4b0b      	ldr	r3, [pc, #44]	; (8000820 <exti10_callback+0x90>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	3301      	adds	r3, #1
 80007f6:	4a0a      	ldr	r2, [pc, #40]	; (8000820 <exti10_callback+0x90>)
 80007f8:	6013      	str	r3, [r2, #0]
	else
		Encoder_B_counts--;
}
 80007fa:	e004      	b.n	8000806 <exti10_callback+0x76>
		Encoder_B_counts--;
 80007fc:	4b08      	ldr	r3, [pc, #32]	; (8000820 <exti10_callback+0x90>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	3b01      	subs	r3, #1
 8000802:	4a07      	ldr	r2, [pc, #28]	; (8000820 <exti10_callback+0x90>)
 8000804:	6013      	str	r3, [r2, #0]
}
 8000806:	bf00      	nop
 8000808:	370c      	adds	r7, #12
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr
 8000812:	bf00      	nop
 8000814:	40020000 	.word	0x40020000
 8000818:	20000080 	.word	0x20000080
 800081c:	20000089 	.word	0x20000089
 8000820:	20000084 	.word	0x20000084

08000824 <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
	if((EXTI->PR & Encoder_B_Pin10)!=0) //If Pending register on Line 10 is triggered
 8000828:	4b07      	ldr	r3, [pc, #28]	; (8000848 <EXTI15_10_IRQHandler+0x24>)
 800082a:	695b      	ldr	r3, [r3, #20]
 800082c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000830:	2b00      	cmp	r3, #0
 8000832:	d007      	beq.n	8000844 <EXTI15_10_IRQHandler+0x20>
	{
		/*Clear PR flag*/
		EXTI->PR |= Encoder_B_Pin10;
 8000834:	4b04      	ldr	r3, [pc, #16]	; (8000848 <EXTI15_10_IRQHandler+0x24>)
 8000836:	695b      	ldr	r3, [r3, #20]
 8000838:	4a03      	ldr	r2, [pc, #12]	; (8000848 <EXTI15_10_IRQHandler+0x24>)
 800083a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800083e:	6153      	str	r3, [r2, #20]

		exti10_callback();
 8000840:	f7ff ffa6 	bl	8000790 <exti10_callback>
	}

}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40013c00 	.word	0x40013c00

0800084c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b086      	sub	sp, #24
 8000850:	af00      	add	r7, sp, #0
 8000852:	60f8      	str	r0, [r7, #12]
 8000854:	60b9      	str	r1, [r7, #8]
 8000856:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000858:	2300      	movs	r3, #0
 800085a:	617b      	str	r3, [r7, #20]
 800085c:	e00a      	b.n	8000874 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800085e:	f3af 8000 	nop.w
 8000862:	4601      	mov	r1, r0
 8000864:	68bb      	ldr	r3, [r7, #8]
 8000866:	1c5a      	adds	r2, r3, #1
 8000868:	60ba      	str	r2, [r7, #8]
 800086a:	b2ca      	uxtb	r2, r1
 800086c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800086e:	697b      	ldr	r3, [r7, #20]
 8000870:	3301      	adds	r3, #1
 8000872:	617b      	str	r3, [r7, #20]
 8000874:	697a      	ldr	r2, [r7, #20]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	429a      	cmp	r2, r3
 800087a:	dbf0      	blt.n	800085e <_read+0x12>
  }

  return len;
 800087c:	687b      	ldr	r3, [r7, #4]
}
 800087e:	4618      	mov	r0, r3
 8000880:	3718      	adds	r7, #24
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}

08000886 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000886:	b580      	push	{r7, lr}
 8000888:	b086      	sub	sp, #24
 800088a:	af00      	add	r7, sp, #0
 800088c:	60f8      	str	r0, [r7, #12]
 800088e:	60b9      	str	r1, [r7, #8]
 8000890:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000892:	2300      	movs	r3, #0
 8000894:	617b      	str	r3, [r7, #20]
 8000896:	e009      	b.n	80008ac <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	1c5a      	adds	r2, r3, #1
 800089c:	60ba      	str	r2, [r7, #8]
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	4618      	mov	r0, r3
 80008a2:	f000 f877 	bl	8000994 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008a6:	697b      	ldr	r3, [r7, #20]
 80008a8:	3301      	adds	r3, #1
 80008aa:	617b      	str	r3, [r7, #20]
 80008ac:	697a      	ldr	r2, [r7, #20]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	429a      	cmp	r2, r3
 80008b2:	dbf1      	blt.n	8000898 <_write+0x12>
  }
  return len;
 80008b4:	687b      	ldr	r3, [r7, #4]
}
 80008b6:	4618      	mov	r0, r3
 80008b8:	3718      	adds	r7, #24
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}

080008be <_close>:

int _close(int file)
{
 80008be:	b480      	push	{r7}
 80008c0:	b083      	sub	sp, #12
 80008c2:	af00      	add	r7, sp, #0
 80008c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80008c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	370c      	adds	r7, #12
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr

080008d6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008d6:	b480      	push	{r7}
 80008d8:	b083      	sub	sp, #12
 80008da:	af00      	add	r7, sp, #0
 80008dc:	6078      	str	r0, [r7, #4]
 80008de:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80008e6:	605a      	str	r2, [r3, #4]
  return 0;
 80008e8:	2300      	movs	r3, #0
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	370c      	adds	r7, #12
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr

080008f6 <_isatty>:

int _isatty(int file)
{
 80008f6:	b480      	push	{r7}
 80008f8:	b083      	sub	sp, #12
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80008fe:	2301      	movs	r3, #1
}
 8000900:	4618      	mov	r0, r3
 8000902:	370c      	adds	r7, #12
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr

0800090c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800090c:	b480      	push	{r7}
 800090e:	b085      	sub	sp, #20
 8000910:	af00      	add	r7, sp, #0
 8000912:	60f8      	str	r0, [r7, #12]
 8000914:	60b9      	str	r1, [r7, #8]
 8000916:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000918:	2300      	movs	r3, #0
}
 800091a:	4618      	mov	r0, r3
 800091c:	3714      	adds	r7, #20
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
	...

08000928 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b086      	sub	sp, #24
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000930:	4a14      	ldr	r2, [pc, #80]	; (8000984 <_sbrk+0x5c>)
 8000932:	4b15      	ldr	r3, [pc, #84]	; (8000988 <_sbrk+0x60>)
 8000934:	1ad3      	subs	r3, r2, r3
 8000936:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000938:	697b      	ldr	r3, [r7, #20]
 800093a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800093c:	4b13      	ldr	r3, [pc, #76]	; (800098c <_sbrk+0x64>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	2b00      	cmp	r3, #0
 8000942:	d102      	bne.n	800094a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000944:	4b11      	ldr	r3, [pc, #68]	; (800098c <_sbrk+0x64>)
 8000946:	4a12      	ldr	r2, [pc, #72]	; (8000990 <_sbrk+0x68>)
 8000948:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800094a:	4b10      	ldr	r3, [pc, #64]	; (800098c <_sbrk+0x64>)
 800094c:	681a      	ldr	r2, [r3, #0]
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	4413      	add	r3, r2
 8000952:	693a      	ldr	r2, [r7, #16]
 8000954:	429a      	cmp	r2, r3
 8000956:	d207      	bcs.n	8000968 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000958:	f000 fa66 	bl	8000e28 <__errno>
 800095c:	4603      	mov	r3, r0
 800095e:	220c      	movs	r2, #12
 8000960:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000962:	f04f 33ff 	mov.w	r3, #4294967295
 8000966:	e009      	b.n	800097c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000968:	4b08      	ldr	r3, [pc, #32]	; (800098c <_sbrk+0x64>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800096e:	4b07      	ldr	r3, [pc, #28]	; (800098c <_sbrk+0x64>)
 8000970:	681a      	ldr	r2, [r3, #0]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4413      	add	r3, r2
 8000976:	4a05      	ldr	r2, [pc, #20]	; (800098c <_sbrk+0x64>)
 8000978:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800097a:	68fb      	ldr	r3, [r7, #12]
}
 800097c:	4618      	mov	r0, r3
 800097e:	3718      	adds	r7, #24
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	20018000 	.word	0x20018000
 8000988:	00000400 	.word	0x00000400
 800098c:	2000008c 	.word	0x2000008c
 8000990:	200001e0 	.word	0x200001e0

08000994 <__io_putchar>:
static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate);
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);
void uart2_write(int ch);

int __io_putchar(int ch)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 800099c:	6878      	ldr	r0, [r7, #4]
 800099e:	f000 f875 	bl	8000a8c <uart2_write>
	return ch;
 80009a2:	687b      	ldr	r3, [r7, #4]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}

080009ac <uart2_rxtx_init>:

void uart2_rxtx_init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0
	/****************Configure uart  pin using gpio pin***************/
	/*Enable clock access to gpioa */
	RCC->AHB1ENR |= GPIOAEN;
 80009b0:	4b32      	ldr	r3, [pc, #200]	; (8000a7c <uart2_rxtx_init+0xd0>)
 80009b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b4:	4a31      	ldr	r2, [pc, #196]	; (8000a7c <uart2_rxtx_init+0xd0>)
 80009b6:	f043 0301 	orr.w	r3, r3, #1
 80009ba:	6313      	str	r3, [r2, #48]	; 0x30


	/*Set PA2 mode to alternate function mode*/
	GPIOA->MODER &=~ (1U<<4);
 80009bc:	4b30      	ldr	r3, [pc, #192]	; (8000a80 <uart2_rxtx_init+0xd4>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a2f      	ldr	r2, [pc, #188]	; (8000a80 <uart2_rxtx_init+0xd4>)
 80009c2:	f023 0310 	bic.w	r3, r3, #16
 80009c6:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 80009c8:	4b2d      	ldr	r3, [pc, #180]	; (8000a80 <uart2_rxtx_init+0xd4>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a2c      	ldr	r2, [pc, #176]	; (8000a80 <uart2_rxtx_init+0xd4>)
 80009ce:	f043 0320 	orr.w	r3, r3, #32
 80009d2:	6013      	str	r3, [r2, #0]

	/*Set PA2 alternate function type to UART_TX (AF07)*/
	GPIOA->AFR[0]|= (1U<<8);
 80009d4:	4b2a      	ldr	r3, [pc, #168]	; (8000a80 <uart2_rxtx_init+0xd4>)
 80009d6:	6a1b      	ldr	r3, [r3, #32]
 80009d8:	4a29      	ldr	r2, [pc, #164]	; (8000a80 <uart2_rxtx_init+0xd4>)
 80009da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009de:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<9);
 80009e0:	4b27      	ldr	r3, [pc, #156]	; (8000a80 <uart2_rxtx_init+0xd4>)
 80009e2:	6a1b      	ldr	r3, [r3, #32]
 80009e4:	4a26      	ldr	r2, [pc, #152]	; (8000a80 <uart2_rxtx_init+0xd4>)
 80009e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009ea:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<10);
 80009ec:	4b24      	ldr	r3, [pc, #144]	; (8000a80 <uart2_rxtx_init+0xd4>)
 80009ee:	6a1b      	ldr	r3, [r3, #32]
 80009f0:	4a23      	ldr	r2, [pc, #140]	; (8000a80 <uart2_rxtx_init+0xd4>)
 80009f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009f6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]&=~ (1U<<11);
 80009f8:	4b21      	ldr	r3, [pc, #132]	; (8000a80 <uart2_rxtx_init+0xd4>)
 80009fa:	6a1b      	ldr	r3, [r3, #32]
 80009fc:	4a20      	ldr	r2, [pc, #128]	; (8000a80 <uart2_rxtx_init+0xd4>)
 80009fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000a02:	6213      	str	r3, [r2, #32]

	/*Set PA3 mode to alternate function mode*/
	GPIOA->MODER &=~ (1U<<6);
 8000a04:	4b1e      	ldr	r3, [pc, #120]	; (8000a80 <uart2_rxtx_init+0xd4>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a1d      	ldr	r2, [pc, #116]	; (8000a80 <uart2_rxtx_init+0xd4>)
 8000a0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000a0e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<7);
 8000a10:	4b1b      	ldr	r3, [pc, #108]	; (8000a80 <uart2_rxtx_init+0xd4>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a1a      	ldr	r2, [pc, #104]	; (8000a80 <uart2_rxtx_init+0xd4>)
 8000a16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a1a:	6013      	str	r3, [r2, #0]

	/*Set PA3 alternate function type to UART_RX (AF07)*/
	GPIOA->AFR[0]|= (1U<<12);
 8000a1c:	4b18      	ldr	r3, [pc, #96]	; (8000a80 <uart2_rxtx_init+0xd4>)
 8000a1e:	6a1b      	ldr	r3, [r3, #32]
 8000a20:	4a17      	ldr	r2, [pc, #92]	; (8000a80 <uart2_rxtx_init+0xd4>)
 8000a22:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a26:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<13);
 8000a28:	4b15      	ldr	r3, [pc, #84]	; (8000a80 <uart2_rxtx_init+0xd4>)
 8000a2a:	6a1b      	ldr	r3, [r3, #32]
 8000a2c:	4a14      	ldr	r2, [pc, #80]	; (8000a80 <uart2_rxtx_init+0xd4>)
 8000a2e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a32:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<14);
 8000a34:	4b12      	ldr	r3, [pc, #72]	; (8000a80 <uart2_rxtx_init+0xd4>)
 8000a36:	6a1b      	ldr	r3, [r3, #32]
 8000a38:	4a11      	ldr	r2, [pc, #68]	; (8000a80 <uart2_rxtx_init+0xd4>)
 8000a3a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a3e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]&=~ (1U<<15);
 8000a40:	4b0f      	ldr	r3, [pc, #60]	; (8000a80 <uart2_rxtx_init+0xd4>)
 8000a42:	6a1b      	ldr	r3, [r3, #32]
 8000a44:	4a0e      	ldr	r2, [pc, #56]	; (8000a80 <uart2_rxtx_init+0xd4>)
 8000a46:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000a4a:	6213      	str	r3, [r2, #32]



	/****************Configure uart module ***************/
	/*Enable clock access to uart2 */
	RCC->APB1ENR |= USART2EN;
 8000a4c:	4b0b      	ldr	r3, [pc, #44]	; (8000a7c <uart2_rxtx_init+0xd0>)
 8000a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a50:	4a0a      	ldr	r2, [pc, #40]	; (8000a7c <uart2_rxtx_init+0xd0>)
 8000a52:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a56:	6413      	str	r3, [r2, #64]	; 0x40

	/*Configure baudrate*/
	uart_set_baudrate(USART2,APB1_CLK,UART_BAUDRATE);
 8000a58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a5c:	4909      	ldr	r1, [pc, #36]	; (8000a84 <uart2_rxtx_init+0xd8>)
 8000a5e:	480a      	ldr	r0, [pc, #40]	; (8000a88 <uart2_rxtx_init+0xdc>)
 8000a60:	f000 f82c 	bl	8000abc <uart_set_baudrate>

	/*Configure the transfer direction*/
	USART2->CR1 = (CR1_TE | CR1_RE);
 8000a64:	4b08      	ldr	r3, [pc, #32]	; (8000a88 <uart2_rxtx_init+0xdc>)
 8000a66:	220c      	movs	r2, #12
 8000a68:	60da      	str	r2, [r3, #12]

	/*Enable uart module*/
	USART2->CR1 |= CR1_UE;
 8000a6a:	4b07      	ldr	r3, [pc, #28]	; (8000a88 <uart2_rxtx_init+0xdc>)
 8000a6c:	68db      	ldr	r3, [r3, #12]
 8000a6e:	4a06      	ldr	r2, [pc, #24]	; (8000a88 <uart2_rxtx_init+0xdc>)
 8000a70:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000a74:	60d3      	str	r3, [r2, #12]

}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	40023800 	.word	0x40023800
 8000a80:	40020000 	.word	0x40020000
 8000a84:	00f42400 	.word	0x00f42400
 8000a88:	40004400 	.word	0x40004400

08000a8c <uart2_write>:
	return USART2->DR;

}

void uart2_write(int ch)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
	/*Make sure the transmit data register is empty*/
	while(!(USART2->SR & SR_TXE)){} // Program stays here until condition in while loop no longer holds
 8000a94:	bf00      	nop
 8000a96:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <uart2_write+0x2c>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d0f9      	beq.n	8000a96 <uart2_write+0xa>

	/*Write to transmit data register*/
	USART2->DR = (ch & 0xFF);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4a04      	ldr	r2, [pc, #16]	; (8000ab8 <uart2_write+0x2c>)
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	6053      	str	r3, [r2, #4]
}
 8000aaa:	bf00      	nop
 8000aac:	370c      	adds	r7, #12
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	40004400 	.word	0x40004400

08000abc <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b084      	sub	sp, #16
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	60b9      	str	r1, [r7, #8]
 8000ac6:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk,BaudRate);
 8000ac8:	6879      	ldr	r1, [r7, #4]
 8000aca:	68b8      	ldr	r0, [r7, #8]
 8000acc:	f000 f808 	bl	8000ae0 <compute_uart_bd>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	461a      	mov	r2, r3
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	609a      	str	r2, [r3, #8]
}
 8000ad8:	bf00      	nop
 8000ada:	3710      	adds	r7, #16
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}

08000ae0 <compute_uart_bd>:
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	085a      	lsrs	r2, r3, #1
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	441a      	add	r2, r3
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000af8:	b29b      	uxth	r3, r3
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
	...

08000b08 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b08:	480d      	ldr	r0, [pc, #52]	; (8000b40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b0a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b0c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b10:	480c      	ldr	r0, [pc, #48]	; (8000b44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b12:	490d      	ldr	r1, [pc, #52]	; (8000b48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b14:	4a0d      	ldr	r2, [pc, #52]	; (8000b4c <LoopForever+0xe>)
  movs r3, #0
 8000b16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b18:	e002      	b.n	8000b20 <LoopCopyDataInit>

08000b1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b1e:	3304      	adds	r3, #4

08000b20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b24:	d3f9      	bcc.n	8000b1a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b26:	4a0a      	ldr	r2, [pc, #40]	; (8000b50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b28:	4c0a      	ldr	r4, [pc, #40]	; (8000b54 <LoopForever+0x16>)
  movs r3, #0
 8000b2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b2c:	e001      	b.n	8000b32 <LoopFillZerobss>

08000b2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b30:	3204      	adds	r2, #4

08000b32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b34:	d3fb      	bcc.n	8000b2e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b36:	f000 f97d 	bl	8000e34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b3a:	f7ff fba1 	bl	8000280 <main>

08000b3e <LoopForever>:

LoopForever:
  b LoopForever
 8000b3e:	e7fe      	b.n	8000b3e <LoopForever>
  ldr   r0, =_estack
 8000b40:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b48:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000b4c:	08001a30 	.word	0x08001a30
  ldr r2, =_sbss
 8000b50:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000b54:	200001dc 	.word	0x200001dc

08000b58 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b58:	e7fe      	b.n	8000b58 <ADC_IRQHandler>
	...

08000b5c <std>:
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	b510      	push	{r4, lr}
 8000b60:	4604      	mov	r4, r0
 8000b62:	e9c0 3300 	strd	r3, r3, [r0]
 8000b66:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000b6a:	6083      	str	r3, [r0, #8]
 8000b6c:	8181      	strh	r1, [r0, #12]
 8000b6e:	6643      	str	r3, [r0, #100]	; 0x64
 8000b70:	81c2      	strh	r2, [r0, #14]
 8000b72:	6183      	str	r3, [r0, #24]
 8000b74:	4619      	mov	r1, r3
 8000b76:	2208      	movs	r2, #8
 8000b78:	305c      	adds	r0, #92	; 0x5c
 8000b7a:	f000 f906 	bl	8000d8a <memset>
 8000b7e:	4b0d      	ldr	r3, [pc, #52]	; (8000bb4 <std+0x58>)
 8000b80:	6263      	str	r3, [r4, #36]	; 0x24
 8000b82:	4b0d      	ldr	r3, [pc, #52]	; (8000bb8 <std+0x5c>)
 8000b84:	62a3      	str	r3, [r4, #40]	; 0x28
 8000b86:	4b0d      	ldr	r3, [pc, #52]	; (8000bbc <std+0x60>)
 8000b88:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000b8a:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <std+0x64>)
 8000b8c:	6323      	str	r3, [r4, #48]	; 0x30
 8000b8e:	4b0d      	ldr	r3, [pc, #52]	; (8000bc4 <std+0x68>)
 8000b90:	6224      	str	r4, [r4, #32]
 8000b92:	429c      	cmp	r4, r3
 8000b94:	d006      	beq.n	8000ba4 <std+0x48>
 8000b96:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8000b9a:	4294      	cmp	r4, r2
 8000b9c:	d002      	beq.n	8000ba4 <std+0x48>
 8000b9e:	33d0      	adds	r3, #208	; 0xd0
 8000ba0:	429c      	cmp	r4, r3
 8000ba2:	d105      	bne.n	8000bb0 <std+0x54>
 8000ba4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000ba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000bac:	f000 b966 	b.w	8000e7c <__retarget_lock_init_recursive>
 8000bb0:	bd10      	pop	{r4, pc}
 8000bb2:	bf00      	nop
 8000bb4:	08000d05 	.word	0x08000d05
 8000bb8:	08000d27 	.word	0x08000d27
 8000bbc:	08000d5f 	.word	0x08000d5f
 8000bc0:	08000d83 	.word	0x08000d83
 8000bc4:	20000090 	.word	0x20000090

08000bc8 <stdio_exit_handler>:
 8000bc8:	4a02      	ldr	r2, [pc, #8]	; (8000bd4 <stdio_exit_handler+0xc>)
 8000bca:	4903      	ldr	r1, [pc, #12]	; (8000bd8 <stdio_exit_handler+0x10>)
 8000bcc:	4803      	ldr	r0, [pc, #12]	; (8000bdc <stdio_exit_handler+0x14>)
 8000bce:	f000 b869 	b.w	8000ca4 <_fwalk_sglue>
 8000bd2:	bf00      	nop
 8000bd4:	20000000 	.word	0x20000000
 8000bd8:	08001729 	.word	0x08001729
 8000bdc:	2000000c 	.word	0x2000000c

08000be0 <cleanup_stdio>:
 8000be0:	6841      	ldr	r1, [r0, #4]
 8000be2:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <cleanup_stdio+0x34>)
 8000be4:	4299      	cmp	r1, r3
 8000be6:	b510      	push	{r4, lr}
 8000be8:	4604      	mov	r4, r0
 8000bea:	d001      	beq.n	8000bf0 <cleanup_stdio+0x10>
 8000bec:	f000 fd9c 	bl	8001728 <_fflush_r>
 8000bf0:	68a1      	ldr	r1, [r4, #8]
 8000bf2:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <cleanup_stdio+0x38>)
 8000bf4:	4299      	cmp	r1, r3
 8000bf6:	d002      	beq.n	8000bfe <cleanup_stdio+0x1e>
 8000bf8:	4620      	mov	r0, r4
 8000bfa:	f000 fd95 	bl	8001728 <_fflush_r>
 8000bfe:	68e1      	ldr	r1, [r4, #12]
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <cleanup_stdio+0x3c>)
 8000c02:	4299      	cmp	r1, r3
 8000c04:	d004      	beq.n	8000c10 <cleanup_stdio+0x30>
 8000c06:	4620      	mov	r0, r4
 8000c08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c0c:	f000 bd8c 	b.w	8001728 <_fflush_r>
 8000c10:	bd10      	pop	{r4, pc}
 8000c12:	bf00      	nop
 8000c14:	20000090 	.word	0x20000090
 8000c18:	200000f8 	.word	0x200000f8
 8000c1c:	20000160 	.word	0x20000160

08000c20 <global_stdio_init.part.0>:
 8000c20:	b510      	push	{r4, lr}
 8000c22:	4b0b      	ldr	r3, [pc, #44]	; (8000c50 <global_stdio_init.part.0+0x30>)
 8000c24:	4c0b      	ldr	r4, [pc, #44]	; (8000c54 <global_stdio_init.part.0+0x34>)
 8000c26:	4a0c      	ldr	r2, [pc, #48]	; (8000c58 <global_stdio_init.part.0+0x38>)
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	4620      	mov	r0, r4
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2104      	movs	r1, #4
 8000c30:	f7ff ff94 	bl	8000b5c <std>
 8000c34:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000c38:	2201      	movs	r2, #1
 8000c3a:	2109      	movs	r1, #9
 8000c3c:	f7ff ff8e 	bl	8000b5c <std>
 8000c40:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000c44:	2202      	movs	r2, #2
 8000c46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c4a:	2112      	movs	r1, #18
 8000c4c:	f7ff bf86 	b.w	8000b5c <std>
 8000c50:	200001c8 	.word	0x200001c8
 8000c54:	20000090 	.word	0x20000090
 8000c58:	08000bc9 	.word	0x08000bc9

08000c5c <__sfp_lock_acquire>:
 8000c5c:	4801      	ldr	r0, [pc, #4]	; (8000c64 <__sfp_lock_acquire+0x8>)
 8000c5e:	f000 b90e 	b.w	8000e7e <__retarget_lock_acquire_recursive>
 8000c62:	bf00      	nop
 8000c64:	200001d1 	.word	0x200001d1

08000c68 <__sfp_lock_release>:
 8000c68:	4801      	ldr	r0, [pc, #4]	; (8000c70 <__sfp_lock_release+0x8>)
 8000c6a:	f000 b909 	b.w	8000e80 <__retarget_lock_release_recursive>
 8000c6e:	bf00      	nop
 8000c70:	200001d1 	.word	0x200001d1

08000c74 <__sinit>:
 8000c74:	b510      	push	{r4, lr}
 8000c76:	4604      	mov	r4, r0
 8000c78:	f7ff fff0 	bl	8000c5c <__sfp_lock_acquire>
 8000c7c:	6a23      	ldr	r3, [r4, #32]
 8000c7e:	b11b      	cbz	r3, 8000c88 <__sinit+0x14>
 8000c80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000c84:	f7ff bff0 	b.w	8000c68 <__sfp_lock_release>
 8000c88:	4b04      	ldr	r3, [pc, #16]	; (8000c9c <__sinit+0x28>)
 8000c8a:	6223      	str	r3, [r4, #32]
 8000c8c:	4b04      	ldr	r3, [pc, #16]	; (8000ca0 <__sinit+0x2c>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d1f5      	bne.n	8000c80 <__sinit+0xc>
 8000c94:	f7ff ffc4 	bl	8000c20 <global_stdio_init.part.0>
 8000c98:	e7f2      	b.n	8000c80 <__sinit+0xc>
 8000c9a:	bf00      	nop
 8000c9c:	08000be1 	.word	0x08000be1
 8000ca0:	200001c8 	.word	0x200001c8

08000ca4 <_fwalk_sglue>:
 8000ca4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ca8:	4607      	mov	r7, r0
 8000caa:	4688      	mov	r8, r1
 8000cac:	4614      	mov	r4, r2
 8000cae:	2600      	movs	r6, #0
 8000cb0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000cb4:	f1b9 0901 	subs.w	r9, r9, #1
 8000cb8:	d505      	bpl.n	8000cc6 <_fwalk_sglue+0x22>
 8000cba:	6824      	ldr	r4, [r4, #0]
 8000cbc:	2c00      	cmp	r4, #0
 8000cbe:	d1f7      	bne.n	8000cb0 <_fwalk_sglue+0xc>
 8000cc0:	4630      	mov	r0, r6
 8000cc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000cc6:	89ab      	ldrh	r3, [r5, #12]
 8000cc8:	2b01      	cmp	r3, #1
 8000cca:	d907      	bls.n	8000cdc <_fwalk_sglue+0x38>
 8000ccc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000cd0:	3301      	adds	r3, #1
 8000cd2:	d003      	beq.n	8000cdc <_fwalk_sglue+0x38>
 8000cd4:	4629      	mov	r1, r5
 8000cd6:	4638      	mov	r0, r7
 8000cd8:	47c0      	blx	r8
 8000cda:	4306      	orrs	r6, r0
 8000cdc:	3568      	adds	r5, #104	; 0x68
 8000cde:	e7e9      	b.n	8000cb4 <_fwalk_sglue+0x10>

08000ce0 <iprintf>:
 8000ce0:	b40f      	push	{r0, r1, r2, r3}
 8000ce2:	b507      	push	{r0, r1, r2, lr}
 8000ce4:	4906      	ldr	r1, [pc, #24]	; (8000d00 <iprintf+0x20>)
 8000ce6:	ab04      	add	r3, sp, #16
 8000ce8:	6808      	ldr	r0, [r1, #0]
 8000cea:	f853 2b04 	ldr.w	r2, [r3], #4
 8000cee:	6881      	ldr	r1, [r0, #8]
 8000cf0:	9301      	str	r3, [sp, #4]
 8000cf2:	f000 f9e9 	bl	80010c8 <_vfiprintf_r>
 8000cf6:	b003      	add	sp, #12
 8000cf8:	f85d eb04 	ldr.w	lr, [sp], #4
 8000cfc:	b004      	add	sp, #16
 8000cfe:	4770      	bx	lr
 8000d00:	20000058 	.word	0x20000058

08000d04 <__sread>:
 8000d04:	b510      	push	{r4, lr}
 8000d06:	460c      	mov	r4, r1
 8000d08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d0c:	f000 f868 	bl	8000de0 <_read_r>
 8000d10:	2800      	cmp	r0, #0
 8000d12:	bfab      	itete	ge
 8000d14:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000d16:	89a3      	ldrhlt	r3, [r4, #12]
 8000d18:	181b      	addge	r3, r3, r0
 8000d1a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000d1e:	bfac      	ite	ge
 8000d20:	6563      	strge	r3, [r4, #84]	; 0x54
 8000d22:	81a3      	strhlt	r3, [r4, #12]
 8000d24:	bd10      	pop	{r4, pc}

08000d26 <__swrite>:
 8000d26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d2a:	461f      	mov	r7, r3
 8000d2c:	898b      	ldrh	r3, [r1, #12]
 8000d2e:	05db      	lsls	r3, r3, #23
 8000d30:	4605      	mov	r5, r0
 8000d32:	460c      	mov	r4, r1
 8000d34:	4616      	mov	r6, r2
 8000d36:	d505      	bpl.n	8000d44 <__swrite+0x1e>
 8000d38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f000 f83c 	bl	8000dbc <_lseek_r>
 8000d44:	89a3      	ldrh	r3, [r4, #12]
 8000d46:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000d4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000d4e:	81a3      	strh	r3, [r4, #12]
 8000d50:	4632      	mov	r2, r6
 8000d52:	463b      	mov	r3, r7
 8000d54:	4628      	mov	r0, r5
 8000d56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000d5a:	f000 b853 	b.w	8000e04 <_write_r>

08000d5e <__sseek>:
 8000d5e:	b510      	push	{r4, lr}
 8000d60:	460c      	mov	r4, r1
 8000d62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d66:	f000 f829 	bl	8000dbc <_lseek_r>
 8000d6a:	1c43      	adds	r3, r0, #1
 8000d6c:	89a3      	ldrh	r3, [r4, #12]
 8000d6e:	bf15      	itete	ne
 8000d70:	6560      	strne	r0, [r4, #84]	; 0x54
 8000d72:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000d76:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000d7a:	81a3      	strheq	r3, [r4, #12]
 8000d7c:	bf18      	it	ne
 8000d7e:	81a3      	strhne	r3, [r4, #12]
 8000d80:	bd10      	pop	{r4, pc}

08000d82 <__sclose>:
 8000d82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000d86:	f000 b809 	b.w	8000d9c <_close_r>

08000d8a <memset>:
 8000d8a:	4402      	add	r2, r0
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d100      	bne.n	8000d94 <memset+0xa>
 8000d92:	4770      	bx	lr
 8000d94:	f803 1b01 	strb.w	r1, [r3], #1
 8000d98:	e7f9      	b.n	8000d8e <memset+0x4>
	...

08000d9c <_close_r>:
 8000d9c:	b538      	push	{r3, r4, r5, lr}
 8000d9e:	4d06      	ldr	r5, [pc, #24]	; (8000db8 <_close_r+0x1c>)
 8000da0:	2300      	movs	r3, #0
 8000da2:	4604      	mov	r4, r0
 8000da4:	4608      	mov	r0, r1
 8000da6:	602b      	str	r3, [r5, #0]
 8000da8:	f7ff fd89 	bl	80008be <_close>
 8000dac:	1c43      	adds	r3, r0, #1
 8000dae:	d102      	bne.n	8000db6 <_close_r+0x1a>
 8000db0:	682b      	ldr	r3, [r5, #0]
 8000db2:	b103      	cbz	r3, 8000db6 <_close_r+0x1a>
 8000db4:	6023      	str	r3, [r4, #0]
 8000db6:	bd38      	pop	{r3, r4, r5, pc}
 8000db8:	200001cc 	.word	0x200001cc

08000dbc <_lseek_r>:
 8000dbc:	b538      	push	{r3, r4, r5, lr}
 8000dbe:	4d07      	ldr	r5, [pc, #28]	; (8000ddc <_lseek_r+0x20>)
 8000dc0:	4604      	mov	r4, r0
 8000dc2:	4608      	mov	r0, r1
 8000dc4:	4611      	mov	r1, r2
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	602a      	str	r2, [r5, #0]
 8000dca:	461a      	mov	r2, r3
 8000dcc:	f7ff fd9e 	bl	800090c <_lseek>
 8000dd0:	1c43      	adds	r3, r0, #1
 8000dd2:	d102      	bne.n	8000dda <_lseek_r+0x1e>
 8000dd4:	682b      	ldr	r3, [r5, #0]
 8000dd6:	b103      	cbz	r3, 8000dda <_lseek_r+0x1e>
 8000dd8:	6023      	str	r3, [r4, #0]
 8000dda:	bd38      	pop	{r3, r4, r5, pc}
 8000ddc:	200001cc 	.word	0x200001cc

08000de0 <_read_r>:
 8000de0:	b538      	push	{r3, r4, r5, lr}
 8000de2:	4d07      	ldr	r5, [pc, #28]	; (8000e00 <_read_r+0x20>)
 8000de4:	4604      	mov	r4, r0
 8000de6:	4608      	mov	r0, r1
 8000de8:	4611      	mov	r1, r2
 8000dea:	2200      	movs	r2, #0
 8000dec:	602a      	str	r2, [r5, #0]
 8000dee:	461a      	mov	r2, r3
 8000df0:	f7ff fd2c 	bl	800084c <_read>
 8000df4:	1c43      	adds	r3, r0, #1
 8000df6:	d102      	bne.n	8000dfe <_read_r+0x1e>
 8000df8:	682b      	ldr	r3, [r5, #0]
 8000dfa:	b103      	cbz	r3, 8000dfe <_read_r+0x1e>
 8000dfc:	6023      	str	r3, [r4, #0]
 8000dfe:	bd38      	pop	{r3, r4, r5, pc}
 8000e00:	200001cc 	.word	0x200001cc

08000e04 <_write_r>:
 8000e04:	b538      	push	{r3, r4, r5, lr}
 8000e06:	4d07      	ldr	r5, [pc, #28]	; (8000e24 <_write_r+0x20>)
 8000e08:	4604      	mov	r4, r0
 8000e0a:	4608      	mov	r0, r1
 8000e0c:	4611      	mov	r1, r2
 8000e0e:	2200      	movs	r2, #0
 8000e10:	602a      	str	r2, [r5, #0]
 8000e12:	461a      	mov	r2, r3
 8000e14:	f7ff fd37 	bl	8000886 <_write>
 8000e18:	1c43      	adds	r3, r0, #1
 8000e1a:	d102      	bne.n	8000e22 <_write_r+0x1e>
 8000e1c:	682b      	ldr	r3, [r5, #0]
 8000e1e:	b103      	cbz	r3, 8000e22 <_write_r+0x1e>
 8000e20:	6023      	str	r3, [r4, #0]
 8000e22:	bd38      	pop	{r3, r4, r5, pc}
 8000e24:	200001cc 	.word	0x200001cc

08000e28 <__errno>:
 8000e28:	4b01      	ldr	r3, [pc, #4]	; (8000e30 <__errno+0x8>)
 8000e2a:	6818      	ldr	r0, [r3, #0]
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop
 8000e30:	20000058 	.word	0x20000058

08000e34 <__libc_init_array>:
 8000e34:	b570      	push	{r4, r5, r6, lr}
 8000e36:	4d0d      	ldr	r5, [pc, #52]	; (8000e6c <__libc_init_array+0x38>)
 8000e38:	4c0d      	ldr	r4, [pc, #52]	; (8000e70 <__libc_init_array+0x3c>)
 8000e3a:	1b64      	subs	r4, r4, r5
 8000e3c:	10a4      	asrs	r4, r4, #2
 8000e3e:	2600      	movs	r6, #0
 8000e40:	42a6      	cmp	r6, r4
 8000e42:	d109      	bne.n	8000e58 <__libc_init_array+0x24>
 8000e44:	4d0b      	ldr	r5, [pc, #44]	; (8000e74 <__libc_init_array+0x40>)
 8000e46:	4c0c      	ldr	r4, [pc, #48]	; (8000e78 <__libc_init_array+0x44>)
 8000e48:	f000 fdc0 	bl	80019cc <_init>
 8000e4c:	1b64      	subs	r4, r4, r5
 8000e4e:	10a4      	asrs	r4, r4, #2
 8000e50:	2600      	movs	r6, #0
 8000e52:	42a6      	cmp	r6, r4
 8000e54:	d105      	bne.n	8000e62 <__libc_init_array+0x2e>
 8000e56:	bd70      	pop	{r4, r5, r6, pc}
 8000e58:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e5c:	4798      	blx	r3
 8000e5e:	3601      	adds	r6, #1
 8000e60:	e7ee      	b.n	8000e40 <__libc_init_array+0xc>
 8000e62:	f855 3b04 	ldr.w	r3, [r5], #4
 8000e66:	4798      	blx	r3
 8000e68:	3601      	adds	r6, #1
 8000e6a:	e7f2      	b.n	8000e52 <__libc_init_array+0x1e>
 8000e6c:	08001a28 	.word	0x08001a28
 8000e70:	08001a28 	.word	0x08001a28
 8000e74:	08001a28 	.word	0x08001a28
 8000e78:	08001a2c 	.word	0x08001a2c

08000e7c <__retarget_lock_init_recursive>:
 8000e7c:	4770      	bx	lr

08000e7e <__retarget_lock_acquire_recursive>:
 8000e7e:	4770      	bx	lr

08000e80 <__retarget_lock_release_recursive>:
 8000e80:	4770      	bx	lr
	...

08000e84 <_free_r>:
 8000e84:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000e86:	2900      	cmp	r1, #0
 8000e88:	d044      	beq.n	8000f14 <_free_r+0x90>
 8000e8a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000e8e:	9001      	str	r0, [sp, #4]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	f1a1 0404 	sub.w	r4, r1, #4
 8000e96:	bfb8      	it	lt
 8000e98:	18e4      	addlt	r4, r4, r3
 8000e9a:	f000 f8df 	bl	800105c <__malloc_lock>
 8000e9e:	4a1e      	ldr	r2, [pc, #120]	; (8000f18 <_free_r+0x94>)
 8000ea0:	9801      	ldr	r0, [sp, #4]
 8000ea2:	6813      	ldr	r3, [r2, #0]
 8000ea4:	b933      	cbnz	r3, 8000eb4 <_free_r+0x30>
 8000ea6:	6063      	str	r3, [r4, #4]
 8000ea8:	6014      	str	r4, [r2, #0]
 8000eaa:	b003      	add	sp, #12
 8000eac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000eb0:	f000 b8da 	b.w	8001068 <__malloc_unlock>
 8000eb4:	42a3      	cmp	r3, r4
 8000eb6:	d908      	bls.n	8000eca <_free_r+0x46>
 8000eb8:	6825      	ldr	r5, [r4, #0]
 8000eba:	1961      	adds	r1, r4, r5
 8000ebc:	428b      	cmp	r3, r1
 8000ebe:	bf01      	itttt	eq
 8000ec0:	6819      	ldreq	r1, [r3, #0]
 8000ec2:	685b      	ldreq	r3, [r3, #4]
 8000ec4:	1949      	addeq	r1, r1, r5
 8000ec6:	6021      	streq	r1, [r4, #0]
 8000ec8:	e7ed      	b.n	8000ea6 <_free_r+0x22>
 8000eca:	461a      	mov	r2, r3
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	b10b      	cbz	r3, 8000ed4 <_free_r+0x50>
 8000ed0:	42a3      	cmp	r3, r4
 8000ed2:	d9fa      	bls.n	8000eca <_free_r+0x46>
 8000ed4:	6811      	ldr	r1, [r2, #0]
 8000ed6:	1855      	adds	r5, r2, r1
 8000ed8:	42a5      	cmp	r5, r4
 8000eda:	d10b      	bne.n	8000ef4 <_free_r+0x70>
 8000edc:	6824      	ldr	r4, [r4, #0]
 8000ede:	4421      	add	r1, r4
 8000ee0:	1854      	adds	r4, r2, r1
 8000ee2:	42a3      	cmp	r3, r4
 8000ee4:	6011      	str	r1, [r2, #0]
 8000ee6:	d1e0      	bne.n	8000eaa <_free_r+0x26>
 8000ee8:	681c      	ldr	r4, [r3, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	6053      	str	r3, [r2, #4]
 8000eee:	440c      	add	r4, r1
 8000ef0:	6014      	str	r4, [r2, #0]
 8000ef2:	e7da      	b.n	8000eaa <_free_r+0x26>
 8000ef4:	d902      	bls.n	8000efc <_free_r+0x78>
 8000ef6:	230c      	movs	r3, #12
 8000ef8:	6003      	str	r3, [r0, #0]
 8000efa:	e7d6      	b.n	8000eaa <_free_r+0x26>
 8000efc:	6825      	ldr	r5, [r4, #0]
 8000efe:	1961      	adds	r1, r4, r5
 8000f00:	428b      	cmp	r3, r1
 8000f02:	bf04      	itt	eq
 8000f04:	6819      	ldreq	r1, [r3, #0]
 8000f06:	685b      	ldreq	r3, [r3, #4]
 8000f08:	6063      	str	r3, [r4, #4]
 8000f0a:	bf04      	itt	eq
 8000f0c:	1949      	addeq	r1, r1, r5
 8000f0e:	6021      	streq	r1, [r4, #0]
 8000f10:	6054      	str	r4, [r2, #4]
 8000f12:	e7ca      	b.n	8000eaa <_free_r+0x26>
 8000f14:	b003      	add	sp, #12
 8000f16:	bd30      	pop	{r4, r5, pc}
 8000f18:	200001d4 	.word	0x200001d4

08000f1c <sbrk_aligned>:
 8000f1c:	b570      	push	{r4, r5, r6, lr}
 8000f1e:	4e0e      	ldr	r6, [pc, #56]	; (8000f58 <sbrk_aligned+0x3c>)
 8000f20:	460c      	mov	r4, r1
 8000f22:	6831      	ldr	r1, [r6, #0]
 8000f24:	4605      	mov	r5, r0
 8000f26:	b911      	cbnz	r1, 8000f2e <sbrk_aligned+0x12>
 8000f28:	f000 fcbc 	bl	80018a4 <_sbrk_r>
 8000f2c:	6030      	str	r0, [r6, #0]
 8000f2e:	4621      	mov	r1, r4
 8000f30:	4628      	mov	r0, r5
 8000f32:	f000 fcb7 	bl	80018a4 <_sbrk_r>
 8000f36:	1c43      	adds	r3, r0, #1
 8000f38:	d00a      	beq.n	8000f50 <sbrk_aligned+0x34>
 8000f3a:	1cc4      	adds	r4, r0, #3
 8000f3c:	f024 0403 	bic.w	r4, r4, #3
 8000f40:	42a0      	cmp	r0, r4
 8000f42:	d007      	beq.n	8000f54 <sbrk_aligned+0x38>
 8000f44:	1a21      	subs	r1, r4, r0
 8000f46:	4628      	mov	r0, r5
 8000f48:	f000 fcac 	bl	80018a4 <_sbrk_r>
 8000f4c:	3001      	adds	r0, #1
 8000f4e:	d101      	bne.n	8000f54 <sbrk_aligned+0x38>
 8000f50:	f04f 34ff 	mov.w	r4, #4294967295
 8000f54:	4620      	mov	r0, r4
 8000f56:	bd70      	pop	{r4, r5, r6, pc}
 8000f58:	200001d8 	.word	0x200001d8

08000f5c <_malloc_r>:
 8000f5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000f60:	1ccd      	adds	r5, r1, #3
 8000f62:	f025 0503 	bic.w	r5, r5, #3
 8000f66:	3508      	adds	r5, #8
 8000f68:	2d0c      	cmp	r5, #12
 8000f6a:	bf38      	it	cc
 8000f6c:	250c      	movcc	r5, #12
 8000f6e:	2d00      	cmp	r5, #0
 8000f70:	4607      	mov	r7, r0
 8000f72:	db01      	blt.n	8000f78 <_malloc_r+0x1c>
 8000f74:	42a9      	cmp	r1, r5
 8000f76:	d905      	bls.n	8000f84 <_malloc_r+0x28>
 8000f78:	230c      	movs	r3, #12
 8000f7a:	603b      	str	r3, [r7, #0]
 8000f7c:	2600      	movs	r6, #0
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000f84:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001058 <_malloc_r+0xfc>
 8000f88:	f000 f868 	bl	800105c <__malloc_lock>
 8000f8c:	f8d8 3000 	ldr.w	r3, [r8]
 8000f90:	461c      	mov	r4, r3
 8000f92:	bb5c      	cbnz	r4, 8000fec <_malloc_r+0x90>
 8000f94:	4629      	mov	r1, r5
 8000f96:	4638      	mov	r0, r7
 8000f98:	f7ff ffc0 	bl	8000f1c <sbrk_aligned>
 8000f9c:	1c43      	adds	r3, r0, #1
 8000f9e:	4604      	mov	r4, r0
 8000fa0:	d155      	bne.n	800104e <_malloc_r+0xf2>
 8000fa2:	f8d8 4000 	ldr.w	r4, [r8]
 8000fa6:	4626      	mov	r6, r4
 8000fa8:	2e00      	cmp	r6, #0
 8000faa:	d145      	bne.n	8001038 <_malloc_r+0xdc>
 8000fac:	2c00      	cmp	r4, #0
 8000fae:	d048      	beq.n	8001042 <_malloc_r+0xe6>
 8000fb0:	6823      	ldr	r3, [r4, #0]
 8000fb2:	4631      	mov	r1, r6
 8000fb4:	4638      	mov	r0, r7
 8000fb6:	eb04 0903 	add.w	r9, r4, r3
 8000fba:	f000 fc73 	bl	80018a4 <_sbrk_r>
 8000fbe:	4581      	cmp	r9, r0
 8000fc0:	d13f      	bne.n	8001042 <_malloc_r+0xe6>
 8000fc2:	6821      	ldr	r1, [r4, #0]
 8000fc4:	1a6d      	subs	r5, r5, r1
 8000fc6:	4629      	mov	r1, r5
 8000fc8:	4638      	mov	r0, r7
 8000fca:	f7ff ffa7 	bl	8000f1c <sbrk_aligned>
 8000fce:	3001      	adds	r0, #1
 8000fd0:	d037      	beq.n	8001042 <_malloc_r+0xe6>
 8000fd2:	6823      	ldr	r3, [r4, #0]
 8000fd4:	442b      	add	r3, r5
 8000fd6:	6023      	str	r3, [r4, #0]
 8000fd8:	f8d8 3000 	ldr.w	r3, [r8]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d038      	beq.n	8001052 <_malloc_r+0xf6>
 8000fe0:	685a      	ldr	r2, [r3, #4]
 8000fe2:	42a2      	cmp	r2, r4
 8000fe4:	d12b      	bne.n	800103e <_malloc_r+0xe2>
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	e00f      	b.n	800100c <_malloc_r+0xb0>
 8000fec:	6822      	ldr	r2, [r4, #0]
 8000fee:	1b52      	subs	r2, r2, r5
 8000ff0:	d41f      	bmi.n	8001032 <_malloc_r+0xd6>
 8000ff2:	2a0b      	cmp	r2, #11
 8000ff4:	d917      	bls.n	8001026 <_malloc_r+0xca>
 8000ff6:	1961      	adds	r1, r4, r5
 8000ff8:	42a3      	cmp	r3, r4
 8000ffa:	6025      	str	r5, [r4, #0]
 8000ffc:	bf18      	it	ne
 8000ffe:	6059      	strne	r1, [r3, #4]
 8001000:	6863      	ldr	r3, [r4, #4]
 8001002:	bf08      	it	eq
 8001004:	f8c8 1000 	streq.w	r1, [r8]
 8001008:	5162      	str	r2, [r4, r5]
 800100a:	604b      	str	r3, [r1, #4]
 800100c:	4638      	mov	r0, r7
 800100e:	f104 060b 	add.w	r6, r4, #11
 8001012:	f000 f829 	bl	8001068 <__malloc_unlock>
 8001016:	f026 0607 	bic.w	r6, r6, #7
 800101a:	1d23      	adds	r3, r4, #4
 800101c:	1af2      	subs	r2, r6, r3
 800101e:	d0ae      	beq.n	8000f7e <_malloc_r+0x22>
 8001020:	1b9b      	subs	r3, r3, r6
 8001022:	50a3      	str	r3, [r4, r2]
 8001024:	e7ab      	b.n	8000f7e <_malloc_r+0x22>
 8001026:	42a3      	cmp	r3, r4
 8001028:	6862      	ldr	r2, [r4, #4]
 800102a:	d1dd      	bne.n	8000fe8 <_malloc_r+0x8c>
 800102c:	f8c8 2000 	str.w	r2, [r8]
 8001030:	e7ec      	b.n	800100c <_malloc_r+0xb0>
 8001032:	4623      	mov	r3, r4
 8001034:	6864      	ldr	r4, [r4, #4]
 8001036:	e7ac      	b.n	8000f92 <_malloc_r+0x36>
 8001038:	4634      	mov	r4, r6
 800103a:	6876      	ldr	r6, [r6, #4]
 800103c:	e7b4      	b.n	8000fa8 <_malloc_r+0x4c>
 800103e:	4613      	mov	r3, r2
 8001040:	e7cc      	b.n	8000fdc <_malloc_r+0x80>
 8001042:	230c      	movs	r3, #12
 8001044:	603b      	str	r3, [r7, #0]
 8001046:	4638      	mov	r0, r7
 8001048:	f000 f80e 	bl	8001068 <__malloc_unlock>
 800104c:	e797      	b.n	8000f7e <_malloc_r+0x22>
 800104e:	6025      	str	r5, [r4, #0]
 8001050:	e7dc      	b.n	800100c <_malloc_r+0xb0>
 8001052:	605b      	str	r3, [r3, #4]
 8001054:	deff      	udf	#255	; 0xff
 8001056:	bf00      	nop
 8001058:	200001d4 	.word	0x200001d4

0800105c <__malloc_lock>:
 800105c:	4801      	ldr	r0, [pc, #4]	; (8001064 <__malloc_lock+0x8>)
 800105e:	f7ff bf0e 	b.w	8000e7e <__retarget_lock_acquire_recursive>
 8001062:	bf00      	nop
 8001064:	200001d0 	.word	0x200001d0

08001068 <__malloc_unlock>:
 8001068:	4801      	ldr	r0, [pc, #4]	; (8001070 <__malloc_unlock+0x8>)
 800106a:	f7ff bf09 	b.w	8000e80 <__retarget_lock_release_recursive>
 800106e:	bf00      	nop
 8001070:	200001d0 	.word	0x200001d0

08001074 <__sfputc_r>:
 8001074:	6893      	ldr	r3, [r2, #8]
 8001076:	3b01      	subs	r3, #1
 8001078:	2b00      	cmp	r3, #0
 800107a:	b410      	push	{r4}
 800107c:	6093      	str	r3, [r2, #8]
 800107e:	da08      	bge.n	8001092 <__sfputc_r+0x1e>
 8001080:	6994      	ldr	r4, [r2, #24]
 8001082:	42a3      	cmp	r3, r4
 8001084:	db01      	blt.n	800108a <__sfputc_r+0x16>
 8001086:	290a      	cmp	r1, #10
 8001088:	d103      	bne.n	8001092 <__sfputc_r+0x1e>
 800108a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800108e:	f000 bb73 	b.w	8001778 <__swbuf_r>
 8001092:	6813      	ldr	r3, [r2, #0]
 8001094:	1c58      	adds	r0, r3, #1
 8001096:	6010      	str	r0, [r2, #0]
 8001098:	7019      	strb	r1, [r3, #0]
 800109a:	4608      	mov	r0, r1
 800109c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80010a0:	4770      	bx	lr

080010a2 <__sfputs_r>:
 80010a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010a4:	4606      	mov	r6, r0
 80010a6:	460f      	mov	r7, r1
 80010a8:	4614      	mov	r4, r2
 80010aa:	18d5      	adds	r5, r2, r3
 80010ac:	42ac      	cmp	r4, r5
 80010ae:	d101      	bne.n	80010b4 <__sfputs_r+0x12>
 80010b0:	2000      	movs	r0, #0
 80010b2:	e007      	b.n	80010c4 <__sfputs_r+0x22>
 80010b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80010b8:	463a      	mov	r2, r7
 80010ba:	4630      	mov	r0, r6
 80010bc:	f7ff ffda 	bl	8001074 <__sfputc_r>
 80010c0:	1c43      	adds	r3, r0, #1
 80010c2:	d1f3      	bne.n	80010ac <__sfputs_r+0xa>
 80010c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080010c8 <_vfiprintf_r>:
 80010c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010cc:	460d      	mov	r5, r1
 80010ce:	b09d      	sub	sp, #116	; 0x74
 80010d0:	4614      	mov	r4, r2
 80010d2:	4698      	mov	r8, r3
 80010d4:	4606      	mov	r6, r0
 80010d6:	b118      	cbz	r0, 80010e0 <_vfiprintf_r+0x18>
 80010d8:	6a03      	ldr	r3, [r0, #32]
 80010da:	b90b      	cbnz	r3, 80010e0 <_vfiprintf_r+0x18>
 80010dc:	f7ff fdca 	bl	8000c74 <__sinit>
 80010e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80010e2:	07d9      	lsls	r1, r3, #31
 80010e4:	d405      	bmi.n	80010f2 <_vfiprintf_r+0x2a>
 80010e6:	89ab      	ldrh	r3, [r5, #12]
 80010e8:	059a      	lsls	r2, r3, #22
 80010ea:	d402      	bmi.n	80010f2 <_vfiprintf_r+0x2a>
 80010ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80010ee:	f7ff fec6 	bl	8000e7e <__retarget_lock_acquire_recursive>
 80010f2:	89ab      	ldrh	r3, [r5, #12]
 80010f4:	071b      	lsls	r3, r3, #28
 80010f6:	d501      	bpl.n	80010fc <_vfiprintf_r+0x34>
 80010f8:	692b      	ldr	r3, [r5, #16]
 80010fa:	b99b      	cbnz	r3, 8001124 <_vfiprintf_r+0x5c>
 80010fc:	4629      	mov	r1, r5
 80010fe:	4630      	mov	r0, r6
 8001100:	f000 fb78 	bl	80017f4 <__swsetup_r>
 8001104:	b170      	cbz	r0, 8001124 <_vfiprintf_r+0x5c>
 8001106:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001108:	07dc      	lsls	r4, r3, #31
 800110a:	d504      	bpl.n	8001116 <_vfiprintf_r+0x4e>
 800110c:	f04f 30ff 	mov.w	r0, #4294967295
 8001110:	b01d      	add	sp, #116	; 0x74
 8001112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001116:	89ab      	ldrh	r3, [r5, #12]
 8001118:	0598      	lsls	r0, r3, #22
 800111a:	d4f7      	bmi.n	800110c <_vfiprintf_r+0x44>
 800111c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800111e:	f7ff feaf 	bl	8000e80 <__retarget_lock_release_recursive>
 8001122:	e7f3      	b.n	800110c <_vfiprintf_r+0x44>
 8001124:	2300      	movs	r3, #0
 8001126:	9309      	str	r3, [sp, #36]	; 0x24
 8001128:	2320      	movs	r3, #32
 800112a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800112e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001132:	2330      	movs	r3, #48	; 0x30
 8001134:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80012e8 <_vfiprintf_r+0x220>
 8001138:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800113c:	f04f 0901 	mov.w	r9, #1
 8001140:	4623      	mov	r3, r4
 8001142:	469a      	mov	sl, r3
 8001144:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001148:	b10a      	cbz	r2, 800114e <_vfiprintf_r+0x86>
 800114a:	2a25      	cmp	r2, #37	; 0x25
 800114c:	d1f9      	bne.n	8001142 <_vfiprintf_r+0x7a>
 800114e:	ebba 0b04 	subs.w	fp, sl, r4
 8001152:	d00b      	beq.n	800116c <_vfiprintf_r+0xa4>
 8001154:	465b      	mov	r3, fp
 8001156:	4622      	mov	r2, r4
 8001158:	4629      	mov	r1, r5
 800115a:	4630      	mov	r0, r6
 800115c:	f7ff ffa1 	bl	80010a2 <__sfputs_r>
 8001160:	3001      	adds	r0, #1
 8001162:	f000 80a9 	beq.w	80012b8 <_vfiprintf_r+0x1f0>
 8001166:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001168:	445a      	add	r2, fp
 800116a:	9209      	str	r2, [sp, #36]	; 0x24
 800116c:	f89a 3000 	ldrb.w	r3, [sl]
 8001170:	2b00      	cmp	r3, #0
 8001172:	f000 80a1 	beq.w	80012b8 <_vfiprintf_r+0x1f0>
 8001176:	2300      	movs	r3, #0
 8001178:	f04f 32ff 	mov.w	r2, #4294967295
 800117c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001180:	f10a 0a01 	add.w	sl, sl, #1
 8001184:	9304      	str	r3, [sp, #16]
 8001186:	9307      	str	r3, [sp, #28]
 8001188:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800118c:	931a      	str	r3, [sp, #104]	; 0x68
 800118e:	4654      	mov	r4, sl
 8001190:	2205      	movs	r2, #5
 8001192:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001196:	4854      	ldr	r0, [pc, #336]	; (80012e8 <_vfiprintf_r+0x220>)
 8001198:	f7ff f822 	bl	80001e0 <memchr>
 800119c:	9a04      	ldr	r2, [sp, #16]
 800119e:	b9d8      	cbnz	r0, 80011d8 <_vfiprintf_r+0x110>
 80011a0:	06d1      	lsls	r1, r2, #27
 80011a2:	bf44      	itt	mi
 80011a4:	2320      	movmi	r3, #32
 80011a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80011aa:	0713      	lsls	r3, r2, #28
 80011ac:	bf44      	itt	mi
 80011ae:	232b      	movmi	r3, #43	; 0x2b
 80011b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80011b4:	f89a 3000 	ldrb.w	r3, [sl]
 80011b8:	2b2a      	cmp	r3, #42	; 0x2a
 80011ba:	d015      	beq.n	80011e8 <_vfiprintf_r+0x120>
 80011bc:	9a07      	ldr	r2, [sp, #28]
 80011be:	4654      	mov	r4, sl
 80011c0:	2000      	movs	r0, #0
 80011c2:	f04f 0c0a 	mov.w	ip, #10
 80011c6:	4621      	mov	r1, r4
 80011c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80011cc:	3b30      	subs	r3, #48	; 0x30
 80011ce:	2b09      	cmp	r3, #9
 80011d0:	d94d      	bls.n	800126e <_vfiprintf_r+0x1a6>
 80011d2:	b1b0      	cbz	r0, 8001202 <_vfiprintf_r+0x13a>
 80011d4:	9207      	str	r2, [sp, #28]
 80011d6:	e014      	b.n	8001202 <_vfiprintf_r+0x13a>
 80011d8:	eba0 0308 	sub.w	r3, r0, r8
 80011dc:	fa09 f303 	lsl.w	r3, r9, r3
 80011e0:	4313      	orrs	r3, r2
 80011e2:	9304      	str	r3, [sp, #16]
 80011e4:	46a2      	mov	sl, r4
 80011e6:	e7d2      	b.n	800118e <_vfiprintf_r+0xc6>
 80011e8:	9b03      	ldr	r3, [sp, #12]
 80011ea:	1d19      	adds	r1, r3, #4
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	9103      	str	r1, [sp, #12]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	bfbb      	ittet	lt
 80011f4:	425b      	neglt	r3, r3
 80011f6:	f042 0202 	orrlt.w	r2, r2, #2
 80011fa:	9307      	strge	r3, [sp, #28]
 80011fc:	9307      	strlt	r3, [sp, #28]
 80011fe:	bfb8      	it	lt
 8001200:	9204      	strlt	r2, [sp, #16]
 8001202:	7823      	ldrb	r3, [r4, #0]
 8001204:	2b2e      	cmp	r3, #46	; 0x2e
 8001206:	d10c      	bne.n	8001222 <_vfiprintf_r+0x15a>
 8001208:	7863      	ldrb	r3, [r4, #1]
 800120a:	2b2a      	cmp	r3, #42	; 0x2a
 800120c:	d134      	bne.n	8001278 <_vfiprintf_r+0x1b0>
 800120e:	9b03      	ldr	r3, [sp, #12]
 8001210:	1d1a      	adds	r2, r3, #4
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	9203      	str	r2, [sp, #12]
 8001216:	2b00      	cmp	r3, #0
 8001218:	bfb8      	it	lt
 800121a:	f04f 33ff 	movlt.w	r3, #4294967295
 800121e:	3402      	adds	r4, #2
 8001220:	9305      	str	r3, [sp, #20]
 8001222:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80012f8 <_vfiprintf_r+0x230>
 8001226:	7821      	ldrb	r1, [r4, #0]
 8001228:	2203      	movs	r2, #3
 800122a:	4650      	mov	r0, sl
 800122c:	f7fe ffd8 	bl	80001e0 <memchr>
 8001230:	b138      	cbz	r0, 8001242 <_vfiprintf_r+0x17a>
 8001232:	9b04      	ldr	r3, [sp, #16]
 8001234:	eba0 000a 	sub.w	r0, r0, sl
 8001238:	2240      	movs	r2, #64	; 0x40
 800123a:	4082      	lsls	r2, r0
 800123c:	4313      	orrs	r3, r2
 800123e:	3401      	adds	r4, #1
 8001240:	9304      	str	r3, [sp, #16]
 8001242:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001246:	4829      	ldr	r0, [pc, #164]	; (80012ec <_vfiprintf_r+0x224>)
 8001248:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800124c:	2206      	movs	r2, #6
 800124e:	f7fe ffc7 	bl	80001e0 <memchr>
 8001252:	2800      	cmp	r0, #0
 8001254:	d03f      	beq.n	80012d6 <_vfiprintf_r+0x20e>
 8001256:	4b26      	ldr	r3, [pc, #152]	; (80012f0 <_vfiprintf_r+0x228>)
 8001258:	bb1b      	cbnz	r3, 80012a2 <_vfiprintf_r+0x1da>
 800125a:	9b03      	ldr	r3, [sp, #12]
 800125c:	3307      	adds	r3, #7
 800125e:	f023 0307 	bic.w	r3, r3, #7
 8001262:	3308      	adds	r3, #8
 8001264:	9303      	str	r3, [sp, #12]
 8001266:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001268:	443b      	add	r3, r7
 800126a:	9309      	str	r3, [sp, #36]	; 0x24
 800126c:	e768      	b.n	8001140 <_vfiprintf_r+0x78>
 800126e:	fb0c 3202 	mla	r2, ip, r2, r3
 8001272:	460c      	mov	r4, r1
 8001274:	2001      	movs	r0, #1
 8001276:	e7a6      	b.n	80011c6 <_vfiprintf_r+0xfe>
 8001278:	2300      	movs	r3, #0
 800127a:	3401      	adds	r4, #1
 800127c:	9305      	str	r3, [sp, #20]
 800127e:	4619      	mov	r1, r3
 8001280:	f04f 0c0a 	mov.w	ip, #10
 8001284:	4620      	mov	r0, r4
 8001286:	f810 2b01 	ldrb.w	r2, [r0], #1
 800128a:	3a30      	subs	r2, #48	; 0x30
 800128c:	2a09      	cmp	r2, #9
 800128e:	d903      	bls.n	8001298 <_vfiprintf_r+0x1d0>
 8001290:	2b00      	cmp	r3, #0
 8001292:	d0c6      	beq.n	8001222 <_vfiprintf_r+0x15a>
 8001294:	9105      	str	r1, [sp, #20]
 8001296:	e7c4      	b.n	8001222 <_vfiprintf_r+0x15a>
 8001298:	fb0c 2101 	mla	r1, ip, r1, r2
 800129c:	4604      	mov	r4, r0
 800129e:	2301      	movs	r3, #1
 80012a0:	e7f0      	b.n	8001284 <_vfiprintf_r+0x1bc>
 80012a2:	ab03      	add	r3, sp, #12
 80012a4:	9300      	str	r3, [sp, #0]
 80012a6:	462a      	mov	r2, r5
 80012a8:	4b12      	ldr	r3, [pc, #72]	; (80012f4 <_vfiprintf_r+0x22c>)
 80012aa:	a904      	add	r1, sp, #16
 80012ac:	4630      	mov	r0, r6
 80012ae:	f3af 8000 	nop.w
 80012b2:	4607      	mov	r7, r0
 80012b4:	1c78      	adds	r0, r7, #1
 80012b6:	d1d6      	bne.n	8001266 <_vfiprintf_r+0x19e>
 80012b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80012ba:	07d9      	lsls	r1, r3, #31
 80012bc:	d405      	bmi.n	80012ca <_vfiprintf_r+0x202>
 80012be:	89ab      	ldrh	r3, [r5, #12]
 80012c0:	059a      	lsls	r2, r3, #22
 80012c2:	d402      	bmi.n	80012ca <_vfiprintf_r+0x202>
 80012c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80012c6:	f7ff fddb 	bl	8000e80 <__retarget_lock_release_recursive>
 80012ca:	89ab      	ldrh	r3, [r5, #12]
 80012cc:	065b      	lsls	r3, r3, #25
 80012ce:	f53f af1d 	bmi.w	800110c <_vfiprintf_r+0x44>
 80012d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80012d4:	e71c      	b.n	8001110 <_vfiprintf_r+0x48>
 80012d6:	ab03      	add	r3, sp, #12
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	462a      	mov	r2, r5
 80012dc:	4b05      	ldr	r3, [pc, #20]	; (80012f4 <_vfiprintf_r+0x22c>)
 80012de:	a904      	add	r1, sp, #16
 80012e0:	4630      	mov	r0, r6
 80012e2:	f000 f879 	bl	80013d8 <_printf_i>
 80012e6:	e7e4      	b.n	80012b2 <_vfiprintf_r+0x1ea>
 80012e8:	080019f2 	.word	0x080019f2
 80012ec:	080019fc 	.word	0x080019fc
 80012f0:	00000000 	.word	0x00000000
 80012f4:	080010a3 	.word	0x080010a3
 80012f8:	080019f8 	.word	0x080019f8

080012fc <_printf_common>:
 80012fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001300:	4616      	mov	r6, r2
 8001302:	4699      	mov	r9, r3
 8001304:	688a      	ldr	r2, [r1, #8]
 8001306:	690b      	ldr	r3, [r1, #16]
 8001308:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800130c:	4293      	cmp	r3, r2
 800130e:	bfb8      	it	lt
 8001310:	4613      	movlt	r3, r2
 8001312:	6033      	str	r3, [r6, #0]
 8001314:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001318:	4607      	mov	r7, r0
 800131a:	460c      	mov	r4, r1
 800131c:	b10a      	cbz	r2, 8001322 <_printf_common+0x26>
 800131e:	3301      	adds	r3, #1
 8001320:	6033      	str	r3, [r6, #0]
 8001322:	6823      	ldr	r3, [r4, #0]
 8001324:	0699      	lsls	r1, r3, #26
 8001326:	bf42      	ittt	mi
 8001328:	6833      	ldrmi	r3, [r6, #0]
 800132a:	3302      	addmi	r3, #2
 800132c:	6033      	strmi	r3, [r6, #0]
 800132e:	6825      	ldr	r5, [r4, #0]
 8001330:	f015 0506 	ands.w	r5, r5, #6
 8001334:	d106      	bne.n	8001344 <_printf_common+0x48>
 8001336:	f104 0a19 	add.w	sl, r4, #25
 800133a:	68e3      	ldr	r3, [r4, #12]
 800133c:	6832      	ldr	r2, [r6, #0]
 800133e:	1a9b      	subs	r3, r3, r2
 8001340:	42ab      	cmp	r3, r5
 8001342:	dc26      	bgt.n	8001392 <_printf_common+0x96>
 8001344:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001348:	1e13      	subs	r3, r2, #0
 800134a:	6822      	ldr	r2, [r4, #0]
 800134c:	bf18      	it	ne
 800134e:	2301      	movne	r3, #1
 8001350:	0692      	lsls	r2, r2, #26
 8001352:	d42b      	bmi.n	80013ac <_printf_common+0xb0>
 8001354:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001358:	4649      	mov	r1, r9
 800135a:	4638      	mov	r0, r7
 800135c:	47c0      	blx	r8
 800135e:	3001      	adds	r0, #1
 8001360:	d01e      	beq.n	80013a0 <_printf_common+0xa4>
 8001362:	6823      	ldr	r3, [r4, #0]
 8001364:	6922      	ldr	r2, [r4, #16]
 8001366:	f003 0306 	and.w	r3, r3, #6
 800136a:	2b04      	cmp	r3, #4
 800136c:	bf02      	ittt	eq
 800136e:	68e5      	ldreq	r5, [r4, #12]
 8001370:	6833      	ldreq	r3, [r6, #0]
 8001372:	1aed      	subeq	r5, r5, r3
 8001374:	68a3      	ldr	r3, [r4, #8]
 8001376:	bf0c      	ite	eq
 8001378:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800137c:	2500      	movne	r5, #0
 800137e:	4293      	cmp	r3, r2
 8001380:	bfc4      	itt	gt
 8001382:	1a9b      	subgt	r3, r3, r2
 8001384:	18ed      	addgt	r5, r5, r3
 8001386:	2600      	movs	r6, #0
 8001388:	341a      	adds	r4, #26
 800138a:	42b5      	cmp	r5, r6
 800138c:	d11a      	bne.n	80013c4 <_printf_common+0xc8>
 800138e:	2000      	movs	r0, #0
 8001390:	e008      	b.n	80013a4 <_printf_common+0xa8>
 8001392:	2301      	movs	r3, #1
 8001394:	4652      	mov	r2, sl
 8001396:	4649      	mov	r1, r9
 8001398:	4638      	mov	r0, r7
 800139a:	47c0      	blx	r8
 800139c:	3001      	adds	r0, #1
 800139e:	d103      	bne.n	80013a8 <_printf_common+0xac>
 80013a0:	f04f 30ff 	mov.w	r0, #4294967295
 80013a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013a8:	3501      	adds	r5, #1
 80013aa:	e7c6      	b.n	800133a <_printf_common+0x3e>
 80013ac:	18e1      	adds	r1, r4, r3
 80013ae:	1c5a      	adds	r2, r3, #1
 80013b0:	2030      	movs	r0, #48	; 0x30
 80013b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80013b6:	4422      	add	r2, r4
 80013b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80013bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80013c0:	3302      	adds	r3, #2
 80013c2:	e7c7      	b.n	8001354 <_printf_common+0x58>
 80013c4:	2301      	movs	r3, #1
 80013c6:	4622      	mov	r2, r4
 80013c8:	4649      	mov	r1, r9
 80013ca:	4638      	mov	r0, r7
 80013cc:	47c0      	blx	r8
 80013ce:	3001      	adds	r0, #1
 80013d0:	d0e6      	beq.n	80013a0 <_printf_common+0xa4>
 80013d2:	3601      	adds	r6, #1
 80013d4:	e7d9      	b.n	800138a <_printf_common+0x8e>
	...

080013d8 <_printf_i>:
 80013d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80013dc:	7e0f      	ldrb	r7, [r1, #24]
 80013de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80013e0:	2f78      	cmp	r7, #120	; 0x78
 80013e2:	4691      	mov	r9, r2
 80013e4:	4680      	mov	r8, r0
 80013e6:	460c      	mov	r4, r1
 80013e8:	469a      	mov	sl, r3
 80013ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80013ee:	d807      	bhi.n	8001400 <_printf_i+0x28>
 80013f0:	2f62      	cmp	r7, #98	; 0x62
 80013f2:	d80a      	bhi.n	800140a <_printf_i+0x32>
 80013f4:	2f00      	cmp	r7, #0
 80013f6:	f000 80d4 	beq.w	80015a2 <_printf_i+0x1ca>
 80013fa:	2f58      	cmp	r7, #88	; 0x58
 80013fc:	f000 80c0 	beq.w	8001580 <_printf_i+0x1a8>
 8001400:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001404:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001408:	e03a      	b.n	8001480 <_printf_i+0xa8>
 800140a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800140e:	2b15      	cmp	r3, #21
 8001410:	d8f6      	bhi.n	8001400 <_printf_i+0x28>
 8001412:	a101      	add	r1, pc, #4	; (adr r1, 8001418 <_printf_i+0x40>)
 8001414:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001418:	08001471 	.word	0x08001471
 800141c:	08001485 	.word	0x08001485
 8001420:	08001401 	.word	0x08001401
 8001424:	08001401 	.word	0x08001401
 8001428:	08001401 	.word	0x08001401
 800142c:	08001401 	.word	0x08001401
 8001430:	08001485 	.word	0x08001485
 8001434:	08001401 	.word	0x08001401
 8001438:	08001401 	.word	0x08001401
 800143c:	08001401 	.word	0x08001401
 8001440:	08001401 	.word	0x08001401
 8001444:	08001589 	.word	0x08001589
 8001448:	080014b1 	.word	0x080014b1
 800144c:	08001543 	.word	0x08001543
 8001450:	08001401 	.word	0x08001401
 8001454:	08001401 	.word	0x08001401
 8001458:	080015ab 	.word	0x080015ab
 800145c:	08001401 	.word	0x08001401
 8001460:	080014b1 	.word	0x080014b1
 8001464:	08001401 	.word	0x08001401
 8001468:	08001401 	.word	0x08001401
 800146c:	0800154b 	.word	0x0800154b
 8001470:	682b      	ldr	r3, [r5, #0]
 8001472:	1d1a      	adds	r2, r3, #4
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	602a      	str	r2, [r5, #0]
 8001478:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800147c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001480:	2301      	movs	r3, #1
 8001482:	e09f      	b.n	80015c4 <_printf_i+0x1ec>
 8001484:	6820      	ldr	r0, [r4, #0]
 8001486:	682b      	ldr	r3, [r5, #0]
 8001488:	0607      	lsls	r7, r0, #24
 800148a:	f103 0104 	add.w	r1, r3, #4
 800148e:	6029      	str	r1, [r5, #0]
 8001490:	d501      	bpl.n	8001496 <_printf_i+0xbe>
 8001492:	681e      	ldr	r6, [r3, #0]
 8001494:	e003      	b.n	800149e <_printf_i+0xc6>
 8001496:	0646      	lsls	r6, r0, #25
 8001498:	d5fb      	bpl.n	8001492 <_printf_i+0xba>
 800149a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800149e:	2e00      	cmp	r6, #0
 80014a0:	da03      	bge.n	80014aa <_printf_i+0xd2>
 80014a2:	232d      	movs	r3, #45	; 0x2d
 80014a4:	4276      	negs	r6, r6
 80014a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80014aa:	485a      	ldr	r0, [pc, #360]	; (8001614 <_printf_i+0x23c>)
 80014ac:	230a      	movs	r3, #10
 80014ae:	e012      	b.n	80014d6 <_printf_i+0xfe>
 80014b0:	682b      	ldr	r3, [r5, #0]
 80014b2:	6820      	ldr	r0, [r4, #0]
 80014b4:	1d19      	adds	r1, r3, #4
 80014b6:	6029      	str	r1, [r5, #0]
 80014b8:	0605      	lsls	r5, r0, #24
 80014ba:	d501      	bpl.n	80014c0 <_printf_i+0xe8>
 80014bc:	681e      	ldr	r6, [r3, #0]
 80014be:	e002      	b.n	80014c6 <_printf_i+0xee>
 80014c0:	0641      	lsls	r1, r0, #25
 80014c2:	d5fb      	bpl.n	80014bc <_printf_i+0xe4>
 80014c4:	881e      	ldrh	r6, [r3, #0]
 80014c6:	4853      	ldr	r0, [pc, #332]	; (8001614 <_printf_i+0x23c>)
 80014c8:	2f6f      	cmp	r7, #111	; 0x6f
 80014ca:	bf0c      	ite	eq
 80014cc:	2308      	moveq	r3, #8
 80014ce:	230a      	movne	r3, #10
 80014d0:	2100      	movs	r1, #0
 80014d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80014d6:	6865      	ldr	r5, [r4, #4]
 80014d8:	60a5      	str	r5, [r4, #8]
 80014da:	2d00      	cmp	r5, #0
 80014dc:	bfa2      	ittt	ge
 80014de:	6821      	ldrge	r1, [r4, #0]
 80014e0:	f021 0104 	bicge.w	r1, r1, #4
 80014e4:	6021      	strge	r1, [r4, #0]
 80014e6:	b90e      	cbnz	r6, 80014ec <_printf_i+0x114>
 80014e8:	2d00      	cmp	r5, #0
 80014ea:	d04b      	beq.n	8001584 <_printf_i+0x1ac>
 80014ec:	4615      	mov	r5, r2
 80014ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80014f2:	fb03 6711 	mls	r7, r3, r1, r6
 80014f6:	5dc7      	ldrb	r7, [r0, r7]
 80014f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80014fc:	4637      	mov	r7, r6
 80014fe:	42bb      	cmp	r3, r7
 8001500:	460e      	mov	r6, r1
 8001502:	d9f4      	bls.n	80014ee <_printf_i+0x116>
 8001504:	2b08      	cmp	r3, #8
 8001506:	d10b      	bne.n	8001520 <_printf_i+0x148>
 8001508:	6823      	ldr	r3, [r4, #0]
 800150a:	07de      	lsls	r6, r3, #31
 800150c:	d508      	bpl.n	8001520 <_printf_i+0x148>
 800150e:	6923      	ldr	r3, [r4, #16]
 8001510:	6861      	ldr	r1, [r4, #4]
 8001512:	4299      	cmp	r1, r3
 8001514:	bfde      	ittt	le
 8001516:	2330      	movle	r3, #48	; 0x30
 8001518:	f805 3c01 	strble.w	r3, [r5, #-1]
 800151c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001520:	1b52      	subs	r2, r2, r5
 8001522:	6122      	str	r2, [r4, #16]
 8001524:	f8cd a000 	str.w	sl, [sp]
 8001528:	464b      	mov	r3, r9
 800152a:	aa03      	add	r2, sp, #12
 800152c:	4621      	mov	r1, r4
 800152e:	4640      	mov	r0, r8
 8001530:	f7ff fee4 	bl	80012fc <_printf_common>
 8001534:	3001      	adds	r0, #1
 8001536:	d14a      	bne.n	80015ce <_printf_i+0x1f6>
 8001538:	f04f 30ff 	mov.w	r0, #4294967295
 800153c:	b004      	add	sp, #16
 800153e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001542:	6823      	ldr	r3, [r4, #0]
 8001544:	f043 0320 	orr.w	r3, r3, #32
 8001548:	6023      	str	r3, [r4, #0]
 800154a:	4833      	ldr	r0, [pc, #204]	; (8001618 <_printf_i+0x240>)
 800154c:	2778      	movs	r7, #120	; 0x78
 800154e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001552:	6823      	ldr	r3, [r4, #0]
 8001554:	6829      	ldr	r1, [r5, #0]
 8001556:	061f      	lsls	r7, r3, #24
 8001558:	f851 6b04 	ldr.w	r6, [r1], #4
 800155c:	d402      	bmi.n	8001564 <_printf_i+0x18c>
 800155e:	065f      	lsls	r7, r3, #25
 8001560:	bf48      	it	mi
 8001562:	b2b6      	uxthmi	r6, r6
 8001564:	07df      	lsls	r7, r3, #31
 8001566:	bf48      	it	mi
 8001568:	f043 0320 	orrmi.w	r3, r3, #32
 800156c:	6029      	str	r1, [r5, #0]
 800156e:	bf48      	it	mi
 8001570:	6023      	strmi	r3, [r4, #0]
 8001572:	b91e      	cbnz	r6, 800157c <_printf_i+0x1a4>
 8001574:	6823      	ldr	r3, [r4, #0]
 8001576:	f023 0320 	bic.w	r3, r3, #32
 800157a:	6023      	str	r3, [r4, #0]
 800157c:	2310      	movs	r3, #16
 800157e:	e7a7      	b.n	80014d0 <_printf_i+0xf8>
 8001580:	4824      	ldr	r0, [pc, #144]	; (8001614 <_printf_i+0x23c>)
 8001582:	e7e4      	b.n	800154e <_printf_i+0x176>
 8001584:	4615      	mov	r5, r2
 8001586:	e7bd      	b.n	8001504 <_printf_i+0x12c>
 8001588:	682b      	ldr	r3, [r5, #0]
 800158a:	6826      	ldr	r6, [r4, #0]
 800158c:	6961      	ldr	r1, [r4, #20]
 800158e:	1d18      	adds	r0, r3, #4
 8001590:	6028      	str	r0, [r5, #0]
 8001592:	0635      	lsls	r5, r6, #24
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	d501      	bpl.n	800159c <_printf_i+0x1c4>
 8001598:	6019      	str	r1, [r3, #0]
 800159a:	e002      	b.n	80015a2 <_printf_i+0x1ca>
 800159c:	0670      	lsls	r0, r6, #25
 800159e:	d5fb      	bpl.n	8001598 <_printf_i+0x1c0>
 80015a0:	8019      	strh	r1, [r3, #0]
 80015a2:	2300      	movs	r3, #0
 80015a4:	6123      	str	r3, [r4, #16]
 80015a6:	4615      	mov	r5, r2
 80015a8:	e7bc      	b.n	8001524 <_printf_i+0x14c>
 80015aa:	682b      	ldr	r3, [r5, #0]
 80015ac:	1d1a      	adds	r2, r3, #4
 80015ae:	602a      	str	r2, [r5, #0]
 80015b0:	681d      	ldr	r5, [r3, #0]
 80015b2:	6862      	ldr	r2, [r4, #4]
 80015b4:	2100      	movs	r1, #0
 80015b6:	4628      	mov	r0, r5
 80015b8:	f7fe fe12 	bl	80001e0 <memchr>
 80015bc:	b108      	cbz	r0, 80015c2 <_printf_i+0x1ea>
 80015be:	1b40      	subs	r0, r0, r5
 80015c0:	6060      	str	r0, [r4, #4]
 80015c2:	6863      	ldr	r3, [r4, #4]
 80015c4:	6123      	str	r3, [r4, #16]
 80015c6:	2300      	movs	r3, #0
 80015c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80015cc:	e7aa      	b.n	8001524 <_printf_i+0x14c>
 80015ce:	6923      	ldr	r3, [r4, #16]
 80015d0:	462a      	mov	r2, r5
 80015d2:	4649      	mov	r1, r9
 80015d4:	4640      	mov	r0, r8
 80015d6:	47d0      	blx	sl
 80015d8:	3001      	adds	r0, #1
 80015da:	d0ad      	beq.n	8001538 <_printf_i+0x160>
 80015dc:	6823      	ldr	r3, [r4, #0]
 80015de:	079b      	lsls	r3, r3, #30
 80015e0:	d413      	bmi.n	800160a <_printf_i+0x232>
 80015e2:	68e0      	ldr	r0, [r4, #12]
 80015e4:	9b03      	ldr	r3, [sp, #12]
 80015e6:	4298      	cmp	r0, r3
 80015e8:	bfb8      	it	lt
 80015ea:	4618      	movlt	r0, r3
 80015ec:	e7a6      	b.n	800153c <_printf_i+0x164>
 80015ee:	2301      	movs	r3, #1
 80015f0:	4632      	mov	r2, r6
 80015f2:	4649      	mov	r1, r9
 80015f4:	4640      	mov	r0, r8
 80015f6:	47d0      	blx	sl
 80015f8:	3001      	adds	r0, #1
 80015fa:	d09d      	beq.n	8001538 <_printf_i+0x160>
 80015fc:	3501      	adds	r5, #1
 80015fe:	68e3      	ldr	r3, [r4, #12]
 8001600:	9903      	ldr	r1, [sp, #12]
 8001602:	1a5b      	subs	r3, r3, r1
 8001604:	42ab      	cmp	r3, r5
 8001606:	dcf2      	bgt.n	80015ee <_printf_i+0x216>
 8001608:	e7eb      	b.n	80015e2 <_printf_i+0x20a>
 800160a:	2500      	movs	r5, #0
 800160c:	f104 0619 	add.w	r6, r4, #25
 8001610:	e7f5      	b.n	80015fe <_printf_i+0x226>
 8001612:	bf00      	nop
 8001614:	08001a03 	.word	0x08001a03
 8001618:	08001a14 	.word	0x08001a14

0800161c <__sflush_r>:
 800161c:	898a      	ldrh	r2, [r1, #12]
 800161e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001622:	4605      	mov	r5, r0
 8001624:	0710      	lsls	r0, r2, #28
 8001626:	460c      	mov	r4, r1
 8001628:	d458      	bmi.n	80016dc <__sflush_r+0xc0>
 800162a:	684b      	ldr	r3, [r1, #4]
 800162c:	2b00      	cmp	r3, #0
 800162e:	dc05      	bgt.n	800163c <__sflush_r+0x20>
 8001630:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001632:	2b00      	cmp	r3, #0
 8001634:	dc02      	bgt.n	800163c <__sflush_r+0x20>
 8001636:	2000      	movs	r0, #0
 8001638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800163c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800163e:	2e00      	cmp	r6, #0
 8001640:	d0f9      	beq.n	8001636 <__sflush_r+0x1a>
 8001642:	2300      	movs	r3, #0
 8001644:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001648:	682f      	ldr	r7, [r5, #0]
 800164a:	6a21      	ldr	r1, [r4, #32]
 800164c:	602b      	str	r3, [r5, #0]
 800164e:	d032      	beq.n	80016b6 <__sflush_r+0x9a>
 8001650:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001652:	89a3      	ldrh	r3, [r4, #12]
 8001654:	075a      	lsls	r2, r3, #29
 8001656:	d505      	bpl.n	8001664 <__sflush_r+0x48>
 8001658:	6863      	ldr	r3, [r4, #4]
 800165a:	1ac0      	subs	r0, r0, r3
 800165c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800165e:	b10b      	cbz	r3, 8001664 <__sflush_r+0x48>
 8001660:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001662:	1ac0      	subs	r0, r0, r3
 8001664:	2300      	movs	r3, #0
 8001666:	4602      	mov	r2, r0
 8001668:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800166a:	6a21      	ldr	r1, [r4, #32]
 800166c:	4628      	mov	r0, r5
 800166e:	47b0      	blx	r6
 8001670:	1c43      	adds	r3, r0, #1
 8001672:	89a3      	ldrh	r3, [r4, #12]
 8001674:	d106      	bne.n	8001684 <__sflush_r+0x68>
 8001676:	6829      	ldr	r1, [r5, #0]
 8001678:	291d      	cmp	r1, #29
 800167a:	d82b      	bhi.n	80016d4 <__sflush_r+0xb8>
 800167c:	4a29      	ldr	r2, [pc, #164]	; (8001724 <__sflush_r+0x108>)
 800167e:	410a      	asrs	r2, r1
 8001680:	07d6      	lsls	r6, r2, #31
 8001682:	d427      	bmi.n	80016d4 <__sflush_r+0xb8>
 8001684:	2200      	movs	r2, #0
 8001686:	6062      	str	r2, [r4, #4]
 8001688:	04d9      	lsls	r1, r3, #19
 800168a:	6922      	ldr	r2, [r4, #16]
 800168c:	6022      	str	r2, [r4, #0]
 800168e:	d504      	bpl.n	800169a <__sflush_r+0x7e>
 8001690:	1c42      	adds	r2, r0, #1
 8001692:	d101      	bne.n	8001698 <__sflush_r+0x7c>
 8001694:	682b      	ldr	r3, [r5, #0]
 8001696:	b903      	cbnz	r3, 800169a <__sflush_r+0x7e>
 8001698:	6560      	str	r0, [r4, #84]	; 0x54
 800169a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800169c:	602f      	str	r7, [r5, #0]
 800169e:	2900      	cmp	r1, #0
 80016a0:	d0c9      	beq.n	8001636 <__sflush_r+0x1a>
 80016a2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80016a6:	4299      	cmp	r1, r3
 80016a8:	d002      	beq.n	80016b0 <__sflush_r+0x94>
 80016aa:	4628      	mov	r0, r5
 80016ac:	f7ff fbea 	bl	8000e84 <_free_r>
 80016b0:	2000      	movs	r0, #0
 80016b2:	6360      	str	r0, [r4, #52]	; 0x34
 80016b4:	e7c0      	b.n	8001638 <__sflush_r+0x1c>
 80016b6:	2301      	movs	r3, #1
 80016b8:	4628      	mov	r0, r5
 80016ba:	47b0      	blx	r6
 80016bc:	1c41      	adds	r1, r0, #1
 80016be:	d1c8      	bne.n	8001652 <__sflush_r+0x36>
 80016c0:	682b      	ldr	r3, [r5, #0]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d0c5      	beq.n	8001652 <__sflush_r+0x36>
 80016c6:	2b1d      	cmp	r3, #29
 80016c8:	d001      	beq.n	80016ce <__sflush_r+0xb2>
 80016ca:	2b16      	cmp	r3, #22
 80016cc:	d101      	bne.n	80016d2 <__sflush_r+0xb6>
 80016ce:	602f      	str	r7, [r5, #0]
 80016d0:	e7b1      	b.n	8001636 <__sflush_r+0x1a>
 80016d2:	89a3      	ldrh	r3, [r4, #12]
 80016d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016d8:	81a3      	strh	r3, [r4, #12]
 80016da:	e7ad      	b.n	8001638 <__sflush_r+0x1c>
 80016dc:	690f      	ldr	r7, [r1, #16]
 80016de:	2f00      	cmp	r7, #0
 80016e0:	d0a9      	beq.n	8001636 <__sflush_r+0x1a>
 80016e2:	0793      	lsls	r3, r2, #30
 80016e4:	680e      	ldr	r6, [r1, #0]
 80016e6:	bf08      	it	eq
 80016e8:	694b      	ldreq	r3, [r1, #20]
 80016ea:	600f      	str	r7, [r1, #0]
 80016ec:	bf18      	it	ne
 80016ee:	2300      	movne	r3, #0
 80016f0:	eba6 0807 	sub.w	r8, r6, r7
 80016f4:	608b      	str	r3, [r1, #8]
 80016f6:	f1b8 0f00 	cmp.w	r8, #0
 80016fa:	dd9c      	ble.n	8001636 <__sflush_r+0x1a>
 80016fc:	6a21      	ldr	r1, [r4, #32]
 80016fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001700:	4643      	mov	r3, r8
 8001702:	463a      	mov	r2, r7
 8001704:	4628      	mov	r0, r5
 8001706:	47b0      	blx	r6
 8001708:	2800      	cmp	r0, #0
 800170a:	dc06      	bgt.n	800171a <__sflush_r+0xfe>
 800170c:	89a3      	ldrh	r3, [r4, #12]
 800170e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001712:	81a3      	strh	r3, [r4, #12]
 8001714:	f04f 30ff 	mov.w	r0, #4294967295
 8001718:	e78e      	b.n	8001638 <__sflush_r+0x1c>
 800171a:	4407      	add	r7, r0
 800171c:	eba8 0800 	sub.w	r8, r8, r0
 8001720:	e7e9      	b.n	80016f6 <__sflush_r+0xda>
 8001722:	bf00      	nop
 8001724:	dfbffffe 	.word	0xdfbffffe

08001728 <_fflush_r>:
 8001728:	b538      	push	{r3, r4, r5, lr}
 800172a:	690b      	ldr	r3, [r1, #16]
 800172c:	4605      	mov	r5, r0
 800172e:	460c      	mov	r4, r1
 8001730:	b913      	cbnz	r3, 8001738 <_fflush_r+0x10>
 8001732:	2500      	movs	r5, #0
 8001734:	4628      	mov	r0, r5
 8001736:	bd38      	pop	{r3, r4, r5, pc}
 8001738:	b118      	cbz	r0, 8001742 <_fflush_r+0x1a>
 800173a:	6a03      	ldr	r3, [r0, #32]
 800173c:	b90b      	cbnz	r3, 8001742 <_fflush_r+0x1a>
 800173e:	f7ff fa99 	bl	8000c74 <__sinit>
 8001742:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d0f3      	beq.n	8001732 <_fflush_r+0xa>
 800174a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800174c:	07d0      	lsls	r0, r2, #31
 800174e:	d404      	bmi.n	800175a <_fflush_r+0x32>
 8001750:	0599      	lsls	r1, r3, #22
 8001752:	d402      	bmi.n	800175a <_fflush_r+0x32>
 8001754:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001756:	f7ff fb92 	bl	8000e7e <__retarget_lock_acquire_recursive>
 800175a:	4628      	mov	r0, r5
 800175c:	4621      	mov	r1, r4
 800175e:	f7ff ff5d 	bl	800161c <__sflush_r>
 8001762:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001764:	07da      	lsls	r2, r3, #31
 8001766:	4605      	mov	r5, r0
 8001768:	d4e4      	bmi.n	8001734 <_fflush_r+0xc>
 800176a:	89a3      	ldrh	r3, [r4, #12]
 800176c:	059b      	lsls	r3, r3, #22
 800176e:	d4e1      	bmi.n	8001734 <_fflush_r+0xc>
 8001770:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001772:	f7ff fb85 	bl	8000e80 <__retarget_lock_release_recursive>
 8001776:	e7dd      	b.n	8001734 <_fflush_r+0xc>

08001778 <__swbuf_r>:
 8001778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800177a:	460e      	mov	r6, r1
 800177c:	4614      	mov	r4, r2
 800177e:	4605      	mov	r5, r0
 8001780:	b118      	cbz	r0, 800178a <__swbuf_r+0x12>
 8001782:	6a03      	ldr	r3, [r0, #32]
 8001784:	b90b      	cbnz	r3, 800178a <__swbuf_r+0x12>
 8001786:	f7ff fa75 	bl	8000c74 <__sinit>
 800178a:	69a3      	ldr	r3, [r4, #24]
 800178c:	60a3      	str	r3, [r4, #8]
 800178e:	89a3      	ldrh	r3, [r4, #12]
 8001790:	071a      	lsls	r2, r3, #28
 8001792:	d525      	bpl.n	80017e0 <__swbuf_r+0x68>
 8001794:	6923      	ldr	r3, [r4, #16]
 8001796:	b31b      	cbz	r3, 80017e0 <__swbuf_r+0x68>
 8001798:	6823      	ldr	r3, [r4, #0]
 800179a:	6922      	ldr	r2, [r4, #16]
 800179c:	1a98      	subs	r0, r3, r2
 800179e:	6963      	ldr	r3, [r4, #20]
 80017a0:	b2f6      	uxtb	r6, r6
 80017a2:	4283      	cmp	r3, r0
 80017a4:	4637      	mov	r7, r6
 80017a6:	dc04      	bgt.n	80017b2 <__swbuf_r+0x3a>
 80017a8:	4621      	mov	r1, r4
 80017aa:	4628      	mov	r0, r5
 80017ac:	f7ff ffbc 	bl	8001728 <_fflush_r>
 80017b0:	b9e0      	cbnz	r0, 80017ec <__swbuf_r+0x74>
 80017b2:	68a3      	ldr	r3, [r4, #8]
 80017b4:	3b01      	subs	r3, #1
 80017b6:	60a3      	str	r3, [r4, #8]
 80017b8:	6823      	ldr	r3, [r4, #0]
 80017ba:	1c5a      	adds	r2, r3, #1
 80017bc:	6022      	str	r2, [r4, #0]
 80017be:	701e      	strb	r6, [r3, #0]
 80017c0:	6962      	ldr	r2, [r4, #20]
 80017c2:	1c43      	adds	r3, r0, #1
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d004      	beq.n	80017d2 <__swbuf_r+0x5a>
 80017c8:	89a3      	ldrh	r3, [r4, #12]
 80017ca:	07db      	lsls	r3, r3, #31
 80017cc:	d506      	bpl.n	80017dc <__swbuf_r+0x64>
 80017ce:	2e0a      	cmp	r6, #10
 80017d0:	d104      	bne.n	80017dc <__swbuf_r+0x64>
 80017d2:	4621      	mov	r1, r4
 80017d4:	4628      	mov	r0, r5
 80017d6:	f7ff ffa7 	bl	8001728 <_fflush_r>
 80017da:	b938      	cbnz	r0, 80017ec <__swbuf_r+0x74>
 80017dc:	4638      	mov	r0, r7
 80017de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80017e0:	4621      	mov	r1, r4
 80017e2:	4628      	mov	r0, r5
 80017e4:	f000 f806 	bl	80017f4 <__swsetup_r>
 80017e8:	2800      	cmp	r0, #0
 80017ea:	d0d5      	beq.n	8001798 <__swbuf_r+0x20>
 80017ec:	f04f 37ff 	mov.w	r7, #4294967295
 80017f0:	e7f4      	b.n	80017dc <__swbuf_r+0x64>
	...

080017f4 <__swsetup_r>:
 80017f4:	b538      	push	{r3, r4, r5, lr}
 80017f6:	4b2a      	ldr	r3, [pc, #168]	; (80018a0 <__swsetup_r+0xac>)
 80017f8:	4605      	mov	r5, r0
 80017fa:	6818      	ldr	r0, [r3, #0]
 80017fc:	460c      	mov	r4, r1
 80017fe:	b118      	cbz	r0, 8001808 <__swsetup_r+0x14>
 8001800:	6a03      	ldr	r3, [r0, #32]
 8001802:	b90b      	cbnz	r3, 8001808 <__swsetup_r+0x14>
 8001804:	f7ff fa36 	bl	8000c74 <__sinit>
 8001808:	89a3      	ldrh	r3, [r4, #12]
 800180a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800180e:	0718      	lsls	r0, r3, #28
 8001810:	d422      	bmi.n	8001858 <__swsetup_r+0x64>
 8001812:	06d9      	lsls	r1, r3, #27
 8001814:	d407      	bmi.n	8001826 <__swsetup_r+0x32>
 8001816:	2309      	movs	r3, #9
 8001818:	602b      	str	r3, [r5, #0]
 800181a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800181e:	81a3      	strh	r3, [r4, #12]
 8001820:	f04f 30ff 	mov.w	r0, #4294967295
 8001824:	e034      	b.n	8001890 <__swsetup_r+0x9c>
 8001826:	0758      	lsls	r0, r3, #29
 8001828:	d512      	bpl.n	8001850 <__swsetup_r+0x5c>
 800182a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800182c:	b141      	cbz	r1, 8001840 <__swsetup_r+0x4c>
 800182e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001832:	4299      	cmp	r1, r3
 8001834:	d002      	beq.n	800183c <__swsetup_r+0x48>
 8001836:	4628      	mov	r0, r5
 8001838:	f7ff fb24 	bl	8000e84 <_free_r>
 800183c:	2300      	movs	r3, #0
 800183e:	6363      	str	r3, [r4, #52]	; 0x34
 8001840:	89a3      	ldrh	r3, [r4, #12]
 8001842:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001846:	81a3      	strh	r3, [r4, #12]
 8001848:	2300      	movs	r3, #0
 800184a:	6063      	str	r3, [r4, #4]
 800184c:	6923      	ldr	r3, [r4, #16]
 800184e:	6023      	str	r3, [r4, #0]
 8001850:	89a3      	ldrh	r3, [r4, #12]
 8001852:	f043 0308 	orr.w	r3, r3, #8
 8001856:	81a3      	strh	r3, [r4, #12]
 8001858:	6923      	ldr	r3, [r4, #16]
 800185a:	b94b      	cbnz	r3, 8001870 <__swsetup_r+0x7c>
 800185c:	89a3      	ldrh	r3, [r4, #12]
 800185e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001862:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001866:	d003      	beq.n	8001870 <__swsetup_r+0x7c>
 8001868:	4621      	mov	r1, r4
 800186a:	4628      	mov	r0, r5
 800186c:	f000 f850 	bl	8001910 <__smakebuf_r>
 8001870:	89a0      	ldrh	r0, [r4, #12]
 8001872:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001876:	f010 0301 	ands.w	r3, r0, #1
 800187a:	d00a      	beq.n	8001892 <__swsetup_r+0x9e>
 800187c:	2300      	movs	r3, #0
 800187e:	60a3      	str	r3, [r4, #8]
 8001880:	6963      	ldr	r3, [r4, #20]
 8001882:	425b      	negs	r3, r3
 8001884:	61a3      	str	r3, [r4, #24]
 8001886:	6923      	ldr	r3, [r4, #16]
 8001888:	b943      	cbnz	r3, 800189c <__swsetup_r+0xa8>
 800188a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800188e:	d1c4      	bne.n	800181a <__swsetup_r+0x26>
 8001890:	bd38      	pop	{r3, r4, r5, pc}
 8001892:	0781      	lsls	r1, r0, #30
 8001894:	bf58      	it	pl
 8001896:	6963      	ldrpl	r3, [r4, #20]
 8001898:	60a3      	str	r3, [r4, #8]
 800189a:	e7f4      	b.n	8001886 <__swsetup_r+0x92>
 800189c:	2000      	movs	r0, #0
 800189e:	e7f7      	b.n	8001890 <__swsetup_r+0x9c>
 80018a0:	20000058 	.word	0x20000058

080018a4 <_sbrk_r>:
 80018a4:	b538      	push	{r3, r4, r5, lr}
 80018a6:	4d06      	ldr	r5, [pc, #24]	; (80018c0 <_sbrk_r+0x1c>)
 80018a8:	2300      	movs	r3, #0
 80018aa:	4604      	mov	r4, r0
 80018ac:	4608      	mov	r0, r1
 80018ae:	602b      	str	r3, [r5, #0]
 80018b0:	f7ff f83a 	bl	8000928 <_sbrk>
 80018b4:	1c43      	adds	r3, r0, #1
 80018b6:	d102      	bne.n	80018be <_sbrk_r+0x1a>
 80018b8:	682b      	ldr	r3, [r5, #0]
 80018ba:	b103      	cbz	r3, 80018be <_sbrk_r+0x1a>
 80018bc:	6023      	str	r3, [r4, #0]
 80018be:	bd38      	pop	{r3, r4, r5, pc}
 80018c0:	200001cc 	.word	0x200001cc

080018c4 <__swhatbuf_r>:
 80018c4:	b570      	push	{r4, r5, r6, lr}
 80018c6:	460c      	mov	r4, r1
 80018c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80018cc:	2900      	cmp	r1, #0
 80018ce:	b096      	sub	sp, #88	; 0x58
 80018d0:	4615      	mov	r5, r2
 80018d2:	461e      	mov	r6, r3
 80018d4:	da0d      	bge.n	80018f2 <__swhatbuf_r+0x2e>
 80018d6:	89a3      	ldrh	r3, [r4, #12]
 80018d8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80018dc:	f04f 0100 	mov.w	r1, #0
 80018e0:	bf0c      	ite	eq
 80018e2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80018e6:	2340      	movne	r3, #64	; 0x40
 80018e8:	2000      	movs	r0, #0
 80018ea:	6031      	str	r1, [r6, #0]
 80018ec:	602b      	str	r3, [r5, #0]
 80018ee:	b016      	add	sp, #88	; 0x58
 80018f0:	bd70      	pop	{r4, r5, r6, pc}
 80018f2:	466a      	mov	r2, sp
 80018f4:	f000 f848 	bl	8001988 <_fstat_r>
 80018f8:	2800      	cmp	r0, #0
 80018fa:	dbec      	blt.n	80018d6 <__swhatbuf_r+0x12>
 80018fc:	9901      	ldr	r1, [sp, #4]
 80018fe:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8001902:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8001906:	4259      	negs	r1, r3
 8001908:	4159      	adcs	r1, r3
 800190a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800190e:	e7eb      	b.n	80018e8 <__swhatbuf_r+0x24>

08001910 <__smakebuf_r>:
 8001910:	898b      	ldrh	r3, [r1, #12]
 8001912:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001914:	079d      	lsls	r5, r3, #30
 8001916:	4606      	mov	r6, r0
 8001918:	460c      	mov	r4, r1
 800191a:	d507      	bpl.n	800192c <__smakebuf_r+0x1c>
 800191c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001920:	6023      	str	r3, [r4, #0]
 8001922:	6123      	str	r3, [r4, #16]
 8001924:	2301      	movs	r3, #1
 8001926:	6163      	str	r3, [r4, #20]
 8001928:	b002      	add	sp, #8
 800192a:	bd70      	pop	{r4, r5, r6, pc}
 800192c:	ab01      	add	r3, sp, #4
 800192e:	466a      	mov	r2, sp
 8001930:	f7ff ffc8 	bl	80018c4 <__swhatbuf_r>
 8001934:	9900      	ldr	r1, [sp, #0]
 8001936:	4605      	mov	r5, r0
 8001938:	4630      	mov	r0, r6
 800193a:	f7ff fb0f 	bl	8000f5c <_malloc_r>
 800193e:	b948      	cbnz	r0, 8001954 <__smakebuf_r+0x44>
 8001940:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001944:	059a      	lsls	r2, r3, #22
 8001946:	d4ef      	bmi.n	8001928 <__smakebuf_r+0x18>
 8001948:	f023 0303 	bic.w	r3, r3, #3
 800194c:	f043 0302 	orr.w	r3, r3, #2
 8001950:	81a3      	strh	r3, [r4, #12]
 8001952:	e7e3      	b.n	800191c <__smakebuf_r+0xc>
 8001954:	89a3      	ldrh	r3, [r4, #12]
 8001956:	6020      	str	r0, [r4, #0]
 8001958:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800195c:	81a3      	strh	r3, [r4, #12]
 800195e:	9b00      	ldr	r3, [sp, #0]
 8001960:	6163      	str	r3, [r4, #20]
 8001962:	9b01      	ldr	r3, [sp, #4]
 8001964:	6120      	str	r0, [r4, #16]
 8001966:	b15b      	cbz	r3, 8001980 <__smakebuf_r+0x70>
 8001968:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800196c:	4630      	mov	r0, r6
 800196e:	f000 f81d 	bl	80019ac <_isatty_r>
 8001972:	b128      	cbz	r0, 8001980 <__smakebuf_r+0x70>
 8001974:	89a3      	ldrh	r3, [r4, #12]
 8001976:	f023 0303 	bic.w	r3, r3, #3
 800197a:	f043 0301 	orr.w	r3, r3, #1
 800197e:	81a3      	strh	r3, [r4, #12]
 8001980:	89a3      	ldrh	r3, [r4, #12]
 8001982:	431d      	orrs	r5, r3
 8001984:	81a5      	strh	r5, [r4, #12]
 8001986:	e7cf      	b.n	8001928 <__smakebuf_r+0x18>

08001988 <_fstat_r>:
 8001988:	b538      	push	{r3, r4, r5, lr}
 800198a:	4d07      	ldr	r5, [pc, #28]	; (80019a8 <_fstat_r+0x20>)
 800198c:	2300      	movs	r3, #0
 800198e:	4604      	mov	r4, r0
 8001990:	4608      	mov	r0, r1
 8001992:	4611      	mov	r1, r2
 8001994:	602b      	str	r3, [r5, #0]
 8001996:	f7fe ff9e 	bl	80008d6 <_fstat>
 800199a:	1c43      	adds	r3, r0, #1
 800199c:	d102      	bne.n	80019a4 <_fstat_r+0x1c>
 800199e:	682b      	ldr	r3, [r5, #0]
 80019a0:	b103      	cbz	r3, 80019a4 <_fstat_r+0x1c>
 80019a2:	6023      	str	r3, [r4, #0]
 80019a4:	bd38      	pop	{r3, r4, r5, pc}
 80019a6:	bf00      	nop
 80019a8:	200001cc 	.word	0x200001cc

080019ac <_isatty_r>:
 80019ac:	b538      	push	{r3, r4, r5, lr}
 80019ae:	4d06      	ldr	r5, [pc, #24]	; (80019c8 <_isatty_r+0x1c>)
 80019b0:	2300      	movs	r3, #0
 80019b2:	4604      	mov	r4, r0
 80019b4:	4608      	mov	r0, r1
 80019b6:	602b      	str	r3, [r5, #0]
 80019b8:	f7fe ff9d 	bl	80008f6 <_isatty>
 80019bc:	1c43      	adds	r3, r0, #1
 80019be:	d102      	bne.n	80019c6 <_isatty_r+0x1a>
 80019c0:	682b      	ldr	r3, [r5, #0]
 80019c2:	b103      	cbz	r3, 80019c6 <_isatty_r+0x1a>
 80019c4:	6023      	str	r3, [r4, #0]
 80019c6:	bd38      	pop	{r3, r4, r5, pc}
 80019c8:	200001cc 	.word	0x200001cc

080019cc <_init>:
 80019cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019ce:	bf00      	nop
 80019d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019d2:	bc08      	pop	{r3}
 80019d4:	469e      	mov	lr, r3
 80019d6:	4770      	bx	lr

080019d8 <_fini>:
 80019d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019da:	bf00      	nop
 80019dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019de:	bc08      	pop	{r3}
 80019e0:	469e      	mov	lr, r3
 80019e2:	4770      	bx	lr
