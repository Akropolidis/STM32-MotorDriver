
MotorDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001e20  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08001fc0  08001fc0  00011fc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002008  08002008  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  08002008  08002008  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002008  08002008  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002008  08002008  00012008  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800200c  0800200c  0001200c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002010  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000184  2000005c  0800206c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e0  0800206c  000201e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001c0e  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000785  00000000  00000000  00021cdd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000260  00000000  00000000  00022468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000001b6  00000000  00000000  000226c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000fc3d  00000000  00000000  0002287e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000289d  00000000  00000000  000324bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0005572e  00000000  00000000  00034d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000010e0  00000000  00000000  0008a488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  0008b568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001fa8 	.word	0x08001fa8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08001fa8 	.word	0x08001fa8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <main>:
#include "motor_driver.h"

#define MOTORDIAMETER	60 //Motor Diameter

int main(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
	uart2_rxtx_init();
 8000a72:	f000 fa89 	bl	8000f88 <uart2_rxtx_init>
//	Tim2_Ch1_Init();
//	Tim4_Ch1_Init();

	Encoder_B_Init();
 8000a76:	f000 f8b3 	bl	8000be0 <Encoder_B_Init>
	reset_Encoder_B_counts();
 8000a7a:	f000 f987 	bl	8000d8c <reset_Encoder_B_counts>
//	Motor_A_Forward(50);
	while(1)
	{
//		int pulses = get_Encoder_B_counts();
//		printf("Pulses: %d\n\n\r", pulses);
		int distance = Motor_B_Dist_mm(MOTORDIAMETER);
 8000a7e:	203c      	movs	r0, #60	; 0x3c
 8000a80:	f000 f992 	bl	8000da8 <Motor_B_Dist_mm>
 8000a84:	6078      	str	r0, [r7, #4]
		printf("Distance: %d mm\n\n\r", distance);
 8000a86:	6879      	ldr	r1, [r7, #4]
 8000a88:	4801      	ldr	r0, [pc, #4]	; (8000a90 <main+0x24>)
 8000a8a:	f000 fc17 	bl	80012bc <iprintf>
	{
 8000a8e:	e7f6      	b.n	8000a7e <main+0x12>
 8000a90:	08001fc0 	.word	0x08001fc0

08000a94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	db0b      	blt.n	8000abe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	f003 021f 	and.w	r2, r3, #31
 8000aac:	4907      	ldr	r1, [pc, #28]	; (8000acc <__NVIC_EnableIRQ+0x38>)
 8000aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab2:	095b      	lsrs	r3, r3, #5
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	fa00 f202 	lsl.w	r2, r0, r2
 8000aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000abe:	bf00      	nop
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	e000e100 	.word	0xe000e100

08000ad0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	6039      	str	r1, [r7, #0]
 8000ada:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	db0a      	blt.n	8000afa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	b2da      	uxtb	r2, r3
 8000ae8:	490c      	ldr	r1, [pc, #48]	; (8000b1c <__NVIC_SetPriority+0x4c>)
 8000aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aee:	0112      	lsls	r2, r2, #4
 8000af0:	b2d2      	uxtb	r2, r2
 8000af2:	440b      	add	r3, r1
 8000af4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000af8:	e00a      	b.n	8000b10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	b2da      	uxtb	r2, r3
 8000afe:	4908      	ldr	r1, [pc, #32]	; (8000b20 <__NVIC_SetPriority+0x50>)
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	f003 030f 	and.w	r3, r3, #15
 8000b06:	3b04      	subs	r3, #4
 8000b08:	0112      	lsls	r2, r2, #4
 8000b0a:	b2d2      	uxtb	r2, r2
 8000b0c:	440b      	add	r3, r1
 8000b0e:	761a      	strb	r2, [r3, #24]
}
 8000b10:	bf00      	nop
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	e000e100 	.word	0xe000e100
 8000b20:	e000ed00 	.word	0xe000ed00

08000b24 <exti8_callback>:
	__enable_irq();

}

static void exti8_callback(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b083      	sub	sp, #12
 8000b28:	af00      	add	r7, sp, #0
	long int last_state_A = GPIOA->IDR & Encoder_A_Pin8;
 8000b2a:	4b1f      	ldr	r3, [pc, #124]	; (8000ba8 <exti8_callback+0x84>)
 8000b2c:	691b      	ldr	r3, [r3, #16]
 8000b2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b32:	607b      	str	r3, [r7, #4]
	if ((Encoder_A_Pin8_Last == GPIO_PIN_RESET) && (last_state_A == GPIO_PIN_SET))
 8000b34:	4b1d      	ldr	r3, [pc, #116]	; (8000bac <exti8_callback+0x88>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d11c      	bne.n	8000b76 <exti8_callback+0x52>
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	2b20      	cmp	r3, #32
 8000b40:	d119      	bne.n	8000b76 <exti8_callback+0x52>
	{
		long int val_A = GPIOA->IDR & Encoder_A_Pin9;
 8000b42:	4b19      	ldr	r3, [pc, #100]	; (8000ba8 <exti8_callback+0x84>)
 8000b44:	691b      	ldr	r3, [r3, #16]
 8000b46:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000b4a:	603b      	str	r3, [r7, #0]
		if ((val_A == GPIO_PIN_RESET) && direction_A)
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d107      	bne.n	8000b62 <exti8_callback+0x3e>
 8000b52:	4b17      	ldr	r3, [pc, #92]	; (8000bb0 <exti8_callback+0x8c>)
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d003      	beq.n	8000b62 <exti8_callback+0x3e>
		{
			direction_A = 0; // Reverse
 8000b5a:	4b15      	ldr	r3, [pc, #84]	; (8000bb0 <exti8_callback+0x8c>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	701a      	strb	r2, [r3, #0]
 8000b60:	e009      	b.n	8000b76 <exti8_callback+0x52>
		}
		else if ((val_A == GPIO_PIN_SET) && (direction_A == 0))
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	2b20      	cmp	r3, #32
 8000b66:	d106      	bne.n	8000b76 <exti8_callback+0x52>
 8000b68:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <exti8_callback+0x8c>)
 8000b6a:	781b      	ldrb	r3, [r3, #0]
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d102      	bne.n	8000b76 <exti8_callback+0x52>
		{
			direction_A = 1; // Forward
 8000b70:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <exti8_callback+0x8c>)
 8000b72:	2201      	movs	r2, #1
 8000b74:	701a      	strb	r2, [r3, #0]
		}
	}
	Encoder_A_Pin8_Last = last_state_A;
 8000b76:	4a0d      	ldr	r2, [pc, #52]	; (8000bac <exti8_callback+0x88>)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	6013      	str	r3, [r2, #0]

	if (!direction_A)
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <exti8_callback+0x8c>)
 8000b7e:	781b      	ldrb	r3, [r3, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d105      	bne.n	8000b90 <exti8_callback+0x6c>
		Encoder_A_counts++;
 8000b84:	4b0b      	ldr	r3, [pc, #44]	; (8000bb4 <exti8_callback+0x90>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	4a0a      	ldr	r2, [pc, #40]	; (8000bb4 <exti8_callback+0x90>)
 8000b8c:	6013      	str	r3, [r2, #0]
	else
		Encoder_A_counts--;
}
 8000b8e:	e004      	b.n	8000b9a <exti8_callback+0x76>
		Encoder_A_counts--;
 8000b90:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <exti8_callback+0x90>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	3b01      	subs	r3, #1
 8000b96:	4a07      	ldr	r2, [pc, #28]	; (8000bb4 <exti8_callback+0x90>)
 8000b98:	6013      	str	r3, [r2, #0]
}
 8000b9a:	bf00      	nop
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	40020000 	.word	0x40020000
 8000bac:	20000078 	.word	0x20000078
 8000bb0:	20000088 	.word	0x20000088
 8000bb4:	2000007c 	.word	0x2000007c

08000bb8 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	af00      	add	r7, sp, #0
	if((EXTI->PR & Encoder_A_Pin8)!=0) //If Pending register on Line 8 is triggered
 8000bbc:	4b07      	ldr	r3, [pc, #28]	; (8000bdc <EXTI9_5_IRQHandler+0x24>)
 8000bbe:	695b      	ldr	r3, [r3, #20]
 8000bc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d007      	beq.n	8000bd8 <EXTI9_5_IRQHandler+0x20>
	{
		/*Clear PR flag*/
		EXTI->PR |= Encoder_A_Pin8;
 8000bc8:	4b04      	ldr	r3, [pc, #16]	; (8000bdc <EXTI9_5_IRQHandler+0x24>)
 8000bca:	695b      	ldr	r3, [r3, #20]
 8000bcc:	4a03      	ldr	r2, [pc, #12]	; (8000bdc <EXTI9_5_IRQHandler+0x24>)
 8000bce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bd2:	6153      	str	r3, [r2, #20]

		exti8_callback();
 8000bd4:	f7ff ffa6 	bl	8000b24 <exti8_callback>
	}

}
 8000bd8:	bf00      	nop
 8000bda:	bd80      	pop	{r7, pc}
 8000bdc:	40013c00 	.word	0x40013c00

08000be0 <Encoder_B_Init>:

	return Motor_A_Distance;
}

void Encoder_B_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be4:	b672      	cpsid	i
}
 8000be6:	bf00      	nop
	/*Disable global interrupts*/
	__disable_irq();

	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8000be8:	4b2f      	ldr	r3, [pc, #188]	; (8000ca8 <Encoder_B_Init+0xc8>)
 8000bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bec:	4a2e      	ldr	r2, [pc, #184]	; (8000ca8 <Encoder_B_Init+0xc8>)
 8000bee:	f043 0301 	orr.w	r3, r3, #1
 8000bf2:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA10 to input mode*/
	GPIOA->MODER &= ~(1U<<20);
 8000bf4:	4b2d      	ldr	r3, [pc, #180]	; (8000cac <Encoder_B_Init+0xcc>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a2c      	ldr	r2, [pc, #176]	; (8000cac <Encoder_B_Init+0xcc>)
 8000bfa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000bfe:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U<<21);
 8000c00:	4b2a      	ldr	r3, [pc, #168]	; (8000cac <Encoder_B_Init+0xcc>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a29      	ldr	r2, [pc, #164]	; (8000cac <Encoder_B_Init+0xcc>)
 8000c06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000c0a:	6013      	str	r3, [r2, #0]
	/*Set PA10 to no pull mode*/
	GPIOA->PUPDR &= ~(1U<<20);
 8000c0c:	4b27      	ldr	r3, [pc, #156]	; (8000cac <Encoder_B_Init+0xcc>)
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	4a26      	ldr	r2, [pc, #152]	; (8000cac <Encoder_B_Init+0xcc>)
 8000c12:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000c16:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR &= ~(1U<<21);
 8000c18:	4b24      	ldr	r3, [pc, #144]	; (8000cac <Encoder_B_Init+0xcc>)
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	4a23      	ldr	r2, [pc, #140]	; (8000cac <Encoder_B_Init+0xcc>)
 8000c1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000c22:	60d3      	str	r3, [r2, #12]

	/*Set PA11 to input mode*/
	GPIOA->MODER &= ~(1U<<22);
 8000c24:	4b21      	ldr	r3, [pc, #132]	; (8000cac <Encoder_B_Init+0xcc>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a20      	ldr	r2, [pc, #128]	; (8000cac <Encoder_B_Init+0xcc>)
 8000c2a:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000c2e:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=	~(1U<<23);
 8000c30:	4b1e      	ldr	r3, [pc, #120]	; (8000cac <Encoder_B_Init+0xcc>)
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	4a1d      	ldr	r2, [pc, #116]	; (8000cac <Encoder_B_Init+0xcc>)
 8000c36:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000c3a:	6013      	str	r3, [r2, #0]
	/*Set PA11 to no pull mode*/
	GPIOA->PUPDR &= ~(1U<<22);
 8000c3c:	4b1b      	ldr	r3, [pc, #108]	; (8000cac <Encoder_B_Init+0xcc>)
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	4a1a      	ldr	r2, [pc, #104]	; (8000cac <Encoder_B_Init+0xcc>)
 8000c42:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000c46:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR &= ~(1U<<23);
 8000c48:	4b18      	ldr	r3, [pc, #96]	; (8000cac <Encoder_B_Init+0xcc>)
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	4a17      	ldr	r2, [pc, #92]	; (8000cac <Encoder_B_Init+0xcc>)
 8000c4e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8000c52:	60d3      	str	r3, [r2, #12]

	/*Enable clock access to SYSCFG*/
	RCC->APB2ENR |= SYSCFGEN;
 8000c54:	4b14      	ldr	r3, [pc, #80]	; (8000ca8 <Encoder_B_Init+0xc8>)
 8000c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c58:	4a13      	ldr	r2, [pc, #76]	; (8000ca8 <Encoder_B_Init+0xc8>)
 8000c5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c5e:	6453      	str	r3, [r2, #68]	; 0x44

	/*Select PORTA on EXTI10*/
	SYSCFG->EXTICR[2] &= ~EXTI10; //EXTICR[3:0] chooses from the four configuration registers
 8000c60:	4b13      	ldr	r3, [pc, #76]	; (8000cb0 <Encoder_B_Init+0xd0>)
 8000c62:	691b      	ldr	r3, [r3, #16]
 8000c64:	4a12      	ldr	r2, [pc, #72]	; (8000cb0 <Encoder_B_Init+0xd0>)
 8000c66:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000c6a:	6113      	str	r3, [r2, #16]

	/*Unmask EXTI10*/
	EXTI->IMR |= IMR_MR10;
 8000c6c:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <Encoder_B_Init+0xd4>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a10      	ldr	r2, [pc, #64]	; (8000cb4 <Encoder_B_Init+0xd4>)
 8000c72:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c76:	6013      	str	r3, [r2, #0]
	/*Select rising edge trigger*/
	EXTI->RTSR |= RTSR_TR10;
 8000c78:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <Encoder_B_Init+0xd4>)
 8000c7a:	689b      	ldr	r3, [r3, #8]
 8000c7c:	4a0d      	ldr	r2, [pc, #52]	; (8000cb4 <Encoder_B_Init+0xd4>)
 8000c7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c82:	6093      	str	r3, [r2, #8]
	/*Select falling edge trigger*/
	EXTI->FTSR |= FTSR_TR10;
 8000c84:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <Encoder_B_Init+0xd4>)
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	4a0a      	ldr	r2, [pc, #40]	; (8000cb4 <Encoder_B_Init+0xd4>)
 8000c8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c8e:	60d3      	str	r3, [r2, #12]

	/*Set priority of EXTI10 in NVIC*/
	NVIC_SetPriority(EXTI15_10_IRQn, 0);
 8000c90:	2100      	movs	r1, #0
 8000c92:	2028      	movs	r0, #40	; 0x28
 8000c94:	f7ff ff1c 	bl	8000ad0 <__NVIC_SetPriority>
	/*Enable EXTI10 line in NVIC*/
	NVIC_EnableIRQ(EXTI15_10_IRQn); //EXTI15_10_IRQn selects external Line[15:10] interrupts
 8000c98:	2028      	movs	r0, #40	; 0x28
 8000c9a:	f7ff fefb 	bl	8000a94 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 8000c9e:	b662      	cpsie	i
}
 8000ca0:	bf00      	nop

	/*Enable global interrupts*/
	__enable_irq();

}
 8000ca2:	bf00      	nop
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	40023800 	.word	0x40023800
 8000cac:	40020000 	.word	0x40020000
 8000cb0:	40013800 	.word	0x40013800
 8000cb4:	40013c00 	.word	0x40013c00

08000cb8 <exti10_callback>:

static void exti10_callback(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
	long int last_state_B = GPIOA->IDR & Encoder_B_Pin10;
 8000cbe:	4b1f      	ldr	r3, [pc, #124]	; (8000d3c <exti10_callback+0x84>)
 8000cc0:	691b      	ldr	r3, [r3, #16]
 8000cc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000cc6:	607b      	str	r3, [r7, #4]
	if ((Encoder_B_Pin10_Last == GPIO_PIN_RESET) && (last_state_B == GPIO_PIN_SET))
 8000cc8:	4b1d      	ldr	r3, [pc, #116]	; (8000d40 <exti10_callback+0x88>)
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d11c      	bne.n	8000d0a <exti10_callback+0x52>
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2b20      	cmp	r3, #32
 8000cd4:	d119      	bne.n	8000d0a <exti10_callback+0x52>
	{
		long int val_B = GPIOA->IDR & Encoder_B_Pin11;
 8000cd6:	4b19      	ldr	r3, [pc, #100]	; (8000d3c <exti10_callback+0x84>)
 8000cd8:	691b      	ldr	r3, [r3, #16]
 8000cda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000cde:	603b      	str	r3, [r7, #0]
		if ((val_B == GPIO_PIN_RESET) && direction_B)
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d107      	bne.n	8000cf6 <exti10_callback+0x3e>
 8000ce6:	4b17      	ldr	r3, [pc, #92]	; (8000d44 <exti10_callback+0x8c>)
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d003      	beq.n	8000cf6 <exti10_callback+0x3e>
		{
			direction_B = 0; // Reverse
 8000cee:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <exti10_callback+0x8c>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	701a      	strb	r2, [r3, #0]
 8000cf4:	e009      	b.n	8000d0a <exti10_callback+0x52>
		}
		else if ((val_B == GPIO_PIN_SET) && (direction_B == 0))
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	2b20      	cmp	r3, #32
 8000cfa:	d106      	bne.n	8000d0a <exti10_callback+0x52>
 8000cfc:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <exti10_callback+0x8c>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d102      	bne.n	8000d0a <exti10_callback+0x52>
		{
			direction_B = 1; // Forward
 8000d04:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <exti10_callback+0x8c>)
 8000d06:	2201      	movs	r2, #1
 8000d08:	701a      	strb	r2, [r3, #0]
		}
	}
	Encoder_B_Pin10_Last = last_state_B;
 8000d0a:	4a0d      	ldr	r2, [pc, #52]	; (8000d40 <exti10_callback+0x88>)
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	6013      	str	r3, [r2, #0]

	if (!direction_B)
 8000d10:	4b0c      	ldr	r3, [pc, #48]	; (8000d44 <exti10_callback+0x8c>)
 8000d12:	781b      	ldrb	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d105      	bne.n	8000d24 <exti10_callback+0x6c>
		Encoder_B_counts++;
 8000d18:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <exti10_callback+0x90>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	3301      	adds	r3, #1
 8000d1e:	4a0a      	ldr	r2, [pc, #40]	; (8000d48 <exti10_callback+0x90>)
 8000d20:	6013      	str	r3, [r2, #0]
	else
		Encoder_B_counts--;
}
 8000d22:	e004      	b.n	8000d2e <exti10_callback+0x76>
		Encoder_B_counts--;
 8000d24:	4b08      	ldr	r3, [pc, #32]	; (8000d48 <exti10_callback+0x90>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	3b01      	subs	r3, #1
 8000d2a:	4a07      	ldr	r2, [pc, #28]	; (8000d48 <exti10_callback+0x90>)
 8000d2c:	6013      	str	r3, [r2, #0]
}
 8000d2e:	bf00      	nop
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	40020000 	.word	0x40020000
 8000d40:	20000080 	.word	0x20000080
 8000d44:	20000089 	.word	0x20000089
 8000d48:	20000084 	.word	0x20000084

08000d4c <EXTI15_10_IRQHandler>:

void EXTI15_10_IRQHandler(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	af00      	add	r7, sp, #0
	if((EXTI->PR & Encoder_B_Pin10)!=0) //If Pending register on Line 10 is triggered
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <EXTI15_10_IRQHandler+0x24>)
 8000d52:	695b      	ldr	r3, [r3, #20]
 8000d54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d007      	beq.n	8000d6c <EXTI15_10_IRQHandler+0x20>
	{
		/*Clear PR flag*/
		EXTI->PR |= Encoder_B_Pin10;
 8000d5c:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <EXTI15_10_IRQHandler+0x24>)
 8000d5e:	695b      	ldr	r3, [r3, #20]
 8000d60:	4a03      	ldr	r2, [pc, #12]	; (8000d70 <EXTI15_10_IRQHandler+0x24>)
 8000d62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000d66:	6153      	str	r3, [r2, #20]

		exti10_callback();
 8000d68:	f7ff ffa6 	bl	8000cb8 <exti10_callback>
	}

}
 8000d6c:	bf00      	nop
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40013c00 	.word	0x40013c00

08000d74 <get_Encoder_B_counts>:

int get_Encoder_B_counts(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
	return Encoder_B_counts;
 8000d78:	4b03      	ldr	r3, [pc, #12]	; (8000d88 <get_Encoder_B_counts+0x14>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	20000084 	.word	0x20000084

08000d8c <reset_Encoder_B_counts>:

void reset_Encoder_B_counts(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
	Encoder_B_counts = 0;
 8000d90:	4b03      	ldr	r3, [pc, #12]	; (8000da0 <reset_Encoder_B_counts+0x14>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	601a      	str	r2, [r3, #0]
}
 8000d96:	bf00      	nop
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	20000084 	.word	0x20000084
 8000da4:	00000000 	.word	0x00000000

08000da8 <Motor_B_Dist_mm>:

int Motor_B_Dist_mm(uint16_t diameter)
{
 8000da8:	b5b0      	push	{r4, r5, r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	80fb      	strh	r3, [r7, #6]
	Motor_B_Distance = (2*PI*(diameter/2)*get_Encoder_B_counts())/PPR;
 8000db2:	88fb      	ldrh	r3, [r7, #6]
 8000db4:	085b      	lsrs	r3, r3, #1
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff fbb3 	bl	8000524 <__aeabi_i2d>
 8000dbe:	a318      	add	r3, pc, #96	; (adr r3, 8000e20 <Motor_B_Dist_mm+0x78>)
 8000dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dc4:	f7ff fc18 	bl	80005f8 <__aeabi_dmul>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	460b      	mov	r3, r1
 8000dcc:	4614      	mov	r4, r2
 8000dce:	461d      	mov	r5, r3
 8000dd0:	f7ff ffd0 	bl	8000d74 <get_Encoder_B_counts>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff fba4 	bl	8000524 <__aeabi_i2d>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	460b      	mov	r3, r1
 8000de0:	4620      	mov	r0, r4
 8000de2:	4629      	mov	r1, r5
 8000de4:	f7ff fc08 	bl	80005f8 <__aeabi_dmul>
 8000de8:	4602      	mov	r2, r0
 8000dea:	460b      	mov	r3, r1
 8000dec:	4610      	mov	r0, r2
 8000dee:	4619      	mov	r1, r3
 8000df0:	f04f 0200 	mov.w	r2, #0
 8000df4:	4b08      	ldr	r3, [pc, #32]	; (8000e18 <Motor_B_Dist_mm+0x70>)
 8000df6:	f7ff fd29 	bl	800084c <__aeabi_ddiv>
 8000dfa:	4602      	mov	r2, r0
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	4610      	mov	r0, r2
 8000e00:	4619      	mov	r1, r3
 8000e02:	f7ff fe0b 	bl	8000a1c <__aeabi_d2iz>
 8000e06:	4603      	mov	r3, r0
 8000e08:	4a04      	ldr	r2, [pc, #16]	; (8000e1c <Motor_B_Dist_mm+0x74>)
 8000e0a:	6013      	str	r3, [r2, #0]

	return Motor_B_Distance;
 8000e0c:	4b03      	ldr	r3, [pc, #12]	; (8000e1c <Motor_B_Dist_mm+0x74>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	3708      	adds	r7, #8
 8000e14:	46bd      	mov	sp, r7
 8000e16:	bdb0      	pop	{r4, r5, r7, pc}
 8000e18:	409e0000 	.word	0x409e0000
 8000e1c:	2000008c 	.word	0x2000008c
 8000e20:	c083126f 	.word	0xc083126f
 8000e24:	401921ca 	.word	0x401921ca

08000e28 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e34:	2300      	movs	r3, #0
 8000e36:	617b      	str	r3, [r7, #20]
 8000e38:	e00a      	b.n	8000e50 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e3a:	f3af 8000 	nop.w
 8000e3e:	4601      	mov	r1, r0
 8000e40:	68bb      	ldr	r3, [r7, #8]
 8000e42:	1c5a      	adds	r2, r3, #1
 8000e44:	60ba      	str	r2, [r7, #8]
 8000e46:	b2ca      	uxtb	r2, r1
 8000e48:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	617b      	str	r3, [r7, #20]
 8000e50:	697a      	ldr	r2, [r7, #20]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	dbf0      	blt.n	8000e3a <_read+0x12>
  }

  return len;
 8000e58:	687b      	ldr	r3, [r7, #4]
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3718      	adds	r7, #24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b086      	sub	sp, #24
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	60f8      	str	r0, [r7, #12]
 8000e6a:	60b9      	str	r1, [r7, #8]
 8000e6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]
 8000e72:	e009      	b.n	8000e88 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	1c5a      	adds	r2, r3, #1
 8000e78:	60ba      	str	r2, [r7, #8]
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f000 f877 	bl	8000f70 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	3301      	adds	r3, #1
 8000e86:	617b      	str	r3, [r7, #20]
 8000e88:	697a      	ldr	r2, [r7, #20]
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	429a      	cmp	r2, r3
 8000e8e:	dbf1      	blt.n	8000e74 <_write+0x12>
  }
  return len;
 8000e90:	687b      	ldr	r3, [r7, #4]
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3718      	adds	r7, #24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <_close>:

int _close(int file)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	b083      	sub	sp, #12
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ea2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	370c      	adds	r7, #12
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr

08000eb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	b083      	sub	sp, #12
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	6078      	str	r0, [r7, #4]
 8000eba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ec2:	605a      	str	r2, [r3, #4]
  return 0;
 8000ec4:	2300      	movs	r3, #0
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <_isatty>:

int _isatty(int file)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	b083      	sub	sp, #12
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000eda:	2301      	movs	r3, #1
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	370c      	adds	r7, #12
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee6:	4770      	bx	lr

08000ee8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b085      	sub	sp, #20
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ef4:	2300      	movs	r3, #0
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	3714      	adds	r7, #20
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
	...

08000f04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f0c:	4a14      	ldr	r2, [pc, #80]	; (8000f60 <_sbrk+0x5c>)
 8000f0e:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <_sbrk+0x60>)
 8000f10:	1ad3      	subs	r3, r2, r3
 8000f12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f18:	4b13      	ldr	r3, [pc, #76]	; (8000f68 <_sbrk+0x64>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d102      	bne.n	8000f26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f20:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <_sbrk+0x64>)
 8000f22:	4a12      	ldr	r2, [pc, #72]	; (8000f6c <_sbrk+0x68>)
 8000f24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f26:	4b10      	ldr	r3, [pc, #64]	; (8000f68 <_sbrk+0x64>)
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	4413      	add	r3, r2
 8000f2e:	693a      	ldr	r2, [r7, #16]
 8000f30:	429a      	cmp	r2, r3
 8000f32:	d207      	bcs.n	8000f44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f34:	f000 fa66 	bl	8001404 <__errno>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	220c      	movs	r2, #12
 8000f3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f42:	e009      	b.n	8000f58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f44:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <_sbrk+0x64>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f4a:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <_sbrk+0x64>)
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4413      	add	r3, r2
 8000f52:	4a05      	ldr	r2, [pc, #20]	; (8000f68 <_sbrk+0x64>)
 8000f54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f56:	68fb      	ldr	r3, [r7, #12]
}
 8000f58:	4618      	mov	r0, r3
 8000f5a:	3718      	adds	r7, #24
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	20018000 	.word	0x20018000
 8000f64:	00000400 	.word	0x00000400
 8000f68:	20000090 	.word	0x20000090
 8000f6c:	200001e0 	.word	0x200001e0

08000f70 <__io_putchar>:
static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate);
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);
void uart2_write(int ch);

int __io_putchar(int ch)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f000 f875 	bl	8001068 <uart2_write>
	return ch;
 8000f7e:	687b      	ldr	r3, [r7, #4]
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <uart2_rxtx_init>:

void uart2_rxtx_init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	af00      	add	r7, sp, #0
	/****************Configure uart  pin using gpio pin***************/
	/*Enable clock access to gpioa */
	RCC->AHB1ENR |= GPIOAEN;
 8000f8c:	4b32      	ldr	r3, [pc, #200]	; (8001058 <uart2_rxtx_init+0xd0>)
 8000f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f90:	4a31      	ldr	r2, [pc, #196]	; (8001058 <uart2_rxtx_init+0xd0>)
 8000f92:	f043 0301 	orr.w	r3, r3, #1
 8000f96:	6313      	str	r3, [r2, #48]	; 0x30


	/*Set PA2 mode to alternate function mode*/
	GPIOA->MODER &=~ (1U<<4);
 8000f98:	4b30      	ldr	r3, [pc, #192]	; (800105c <uart2_rxtx_init+0xd4>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a2f      	ldr	r2, [pc, #188]	; (800105c <uart2_rxtx_init+0xd4>)
 8000f9e:	f023 0310 	bic.w	r3, r3, #16
 8000fa2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 8000fa4:	4b2d      	ldr	r3, [pc, #180]	; (800105c <uart2_rxtx_init+0xd4>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a2c      	ldr	r2, [pc, #176]	; (800105c <uart2_rxtx_init+0xd4>)
 8000faa:	f043 0320 	orr.w	r3, r3, #32
 8000fae:	6013      	str	r3, [r2, #0]

	/*Set PA2 alternate function type to UART_TX (AF07)*/
	GPIOA->AFR[0]|= (1U<<8);
 8000fb0:	4b2a      	ldr	r3, [pc, #168]	; (800105c <uart2_rxtx_init+0xd4>)
 8000fb2:	6a1b      	ldr	r3, [r3, #32]
 8000fb4:	4a29      	ldr	r2, [pc, #164]	; (800105c <uart2_rxtx_init+0xd4>)
 8000fb6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fba:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<9);
 8000fbc:	4b27      	ldr	r3, [pc, #156]	; (800105c <uart2_rxtx_init+0xd4>)
 8000fbe:	6a1b      	ldr	r3, [r3, #32]
 8000fc0:	4a26      	ldr	r2, [pc, #152]	; (800105c <uart2_rxtx_init+0xd4>)
 8000fc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fc6:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<10);
 8000fc8:	4b24      	ldr	r3, [pc, #144]	; (800105c <uart2_rxtx_init+0xd4>)
 8000fca:	6a1b      	ldr	r3, [r3, #32]
 8000fcc:	4a23      	ldr	r2, [pc, #140]	; (800105c <uart2_rxtx_init+0xd4>)
 8000fce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fd2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]&=~ (1U<<11);
 8000fd4:	4b21      	ldr	r3, [pc, #132]	; (800105c <uart2_rxtx_init+0xd4>)
 8000fd6:	6a1b      	ldr	r3, [r3, #32]
 8000fd8:	4a20      	ldr	r2, [pc, #128]	; (800105c <uart2_rxtx_init+0xd4>)
 8000fda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000fde:	6213      	str	r3, [r2, #32]

	/*Set PA3 mode to alternate function mode*/
	GPIOA->MODER &=~ (1U<<6);
 8000fe0:	4b1e      	ldr	r3, [pc, #120]	; (800105c <uart2_rxtx_init+0xd4>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a1d      	ldr	r2, [pc, #116]	; (800105c <uart2_rxtx_init+0xd4>)
 8000fe6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000fea:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<7);
 8000fec:	4b1b      	ldr	r3, [pc, #108]	; (800105c <uart2_rxtx_init+0xd4>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a1a      	ldr	r2, [pc, #104]	; (800105c <uart2_rxtx_init+0xd4>)
 8000ff2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ff6:	6013      	str	r3, [r2, #0]

	/*Set PA3 alternate function type to UART_RX (AF07)*/
	GPIOA->AFR[0]|= (1U<<12);
 8000ff8:	4b18      	ldr	r3, [pc, #96]	; (800105c <uart2_rxtx_init+0xd4>)
 8000ffa:	6a1b      	ldr	r3, [r3, #32]
 8000ffc:	4a17      	ldr	r2, [pc, #92]	; (800105c <uart2_rxtx_init+0xd4>)
 8000ffe:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001002:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<13);
 8001004:	4b15      	ldr	r3, [pc, #84]	; (800105c <uart2_rxtx_init+0xd4>)
 8001006:	6a1b      	ldr	r3, [r3, #32]
 8001008:	4a14      	ldr	r2, [pc, #80]	; (800105c <uart2_rxtx_init+0xd4>)
 800100a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800100e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<14);
 8001010:	4b12      	ldr	r3, [pc, #72]	; (800105c <uart2_rxtx_init+0xd4>)
 8001012:	6a1b      	ldr	r3, [r3, #32]
 8001014:	4a11      	ldr	r2, [pc, #68]	; (800105c <uart2_rxtx_init+0xd4>)
 8001016:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800101a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]&=~ (1U<<15);
 800101c:	4b0f      	ldr	r3, [pc, #60]	; (800105c <uart2_rxtx_init+0xd4>)
 800101e:	6a1b      	ldr	r3, [r3, #32]
 8001020:	4a0e      	ldr	r2, [pc, #56]	; (800105c <uart2_rxtx_init+0xd4>)
 8001022:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8001026:	6213      	str	r3, [r2, #32]



	/****************Configure uart module ***************/
	/*Enable clock access to uart2 */
	RCC->APB1ENR |= USART2EN;
 8001028:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <uart2_rxtx_init+0xd0>)
 800102a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102c:	4a0a      	ldr	r2, [pc, #40]	; (8001058 <uart2_rxtx_init+0xd0>)
 800102e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001032:	6413      	str	r3, [r2, #64]	; 0x40

	/*Configure baudrate*/
	uart_set_baudrate(USART2,APB1_CLK,UART_BAUDRATE);
 8001034:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001038:	4909      	ldr	r1, [pc, #36]	; (8001060 <uart2_rxtx_init+0xd8>)
 800103a:	480a      	ldr	r0, [pc, #40]	; (8001064 <uart2_rxtx_init+0xdc>)
 800103c:	f000 f82c 	bl	8001098 <uart_set_baudrate>

	/*Configure the transfer direction*/
	USART2->CR1 = (CR1_TE | CR1_RE);
 8001040:	4b08      	ldr	r3, [pc, #32]	; (8001064 <uart2_rxtx_init+0xdc>)
 8001042:	220c      	movs	r2, #12
 8001044:	60da      	str	r2, [r3, #12]

	/*Enable uart module*/
	USART2->CR1 |= CR1_UE;
 8001046:	4b07      	ldr	r3, [pc, #28]	; (8001064 <uart2_rxtx_init+0xdc>)
 8001048:	68db      	ldr	r3, [r3, #12]
 800104a:	4a06      	ldr	r2, [pc, #24]	; (8001064 <uart2_rxtx_init+0xdc>)
 800104c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001050:	60d3      	str	r3, [r2, #12]

}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	40023800 	.word	0x40023800
 800105c:	40020000 	.word	0x40020000
 8001060:	00f42400 	.word	0x00f42400
 8001064:	40004400 	.word	0x40004400

08001068 <uart2_write>:
	return USART2->DR;

}

void uart2_write(int ch)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
	/*Make sure the transmit data register is empty*/
	while(!(USART2->SR & SR_TXE)){} // Program stays here until condition in while loop no longer holds
 8001070:	bf00      	nop
 8001072:	4b08      	ldr	r3, [pc, #32]	; (8001094 <uart2_write+0x2c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800107a:	2b00      	cmp	r3, #0
 800107c:	d0f9      	beq.n	8001072 <uart2_write+0xa>

	/*Write to transmit data register*/
	USART2->DR = (ch & 0xFF);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a04      	ldr	r2, [pc, #16]	; (8001094 <uart2_write+0x2c>)
 8001082:	b2db      	uxtb	r3, r3
 8001084:	6053      	str	r3, [r2, #4]
}
 8001086:	bf00      	nop
 8001088:	370c      	adds	r7, #12
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	40004400 	.word	0x40004400

08001098 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk,BaudRate);
 80010a4:	6879      	ldr	r1, [r7, #4]
 80010a6:	68b8      	ldr	r0, [r7, #8]
 80010a8:	f000 f808 	bl	80010bc <compute_uart_bd>
 80010ac:	4603      	mov	r3, r0
 80010ae:	461a      	mov	r2, r3
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	609a      	str	r2, [r3, #8]
}
 80010b4:	bf00      	nop
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}

080010bc <compute_uart_bd>:
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 80010bc:	b480      	push	{r7}
 80010be:	b083      	sub	sp, #12
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
 80010c4:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	085a      	lsrs	r2, r3, #1
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	441a      	add	r2, r3
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80010d4:	b29b      	uxth	r3, r3
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
	...

080010e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010e4:	480d      	ldr	r0, [pc, #52]	; (800111c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010e6:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80010e8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010ec:	480c      	ldr	r0, [pc, #48]	; (8001120 <LoopForever+0x6>)
  ldr r1, =_edata
 80010ee:	490d      	ldr	r1, [pc, #52]	; (8001124 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010f0:	4a0d      	ldr	r2, [pc, #52]	; (8001128 <LoopForever+0xe>)
  movs r3, #0
 80010f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010f4:	e002      	b.n	80010fc <LoopCopyDataInit>

080010f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010fa:	3304      	adds	r3, #4

080010fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001100:	d3f9      	bcc.n	80010f6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001102:	4a0a      	ldr	r2, [pc, #40]	; (800112c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001104:	4c0a      	ldr	r4, [pc, #40]	; (8001130 <LoopForever+0x16>)
  movs r3, #0
 8001106:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001108:	e001      	b.n	800110e <LoopFillZerobss>

0800110a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800110a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800110c:	3204      	adds	r2, #4

0800110e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800110e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001110:	d3fb      	bcc.n	800110a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001112:	f000 f97d 	bl	8001410 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001116:	f7ff fca9 	bl	8000a6c <main>

0800111a <LoopForever>:

LoopForever:
  b LoopForever
 800111a:	e7fe      	b.n	800111a <LoopForever>
  ldr   r0, =_estack
 800111c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001120:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001124:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001128:	08002010 	.word	0x08002010
  ldr r2, =_sbss
 800112c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001130:	200001e0 	.word	0x200001e0

08001134 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001134:	e7fe      	b.n	8001134 <ADC_IRQHandler>
	...

08001138 <std>:
 8001138:	2300      	movs	r3, #0
 800113a:	b510      	push	{r4, lr}
 800113c:	4604      	mov	r4, r0
 800113e:	e9c0 3300 	strd	r3, r3, [r0]
 8001142:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001146:	6083      	str	r3, [r0, #8]
 8001148:	8181      	strh	r1, [r0, #12]
 800114a:	6643      	str	r3, [r0, #100]	; 0x64
 800114c:	81c2      	strh	r2, [r0, #14]
 800114e:	6183      	str	r3, [r0, #24]
 8001150:	4619      	mov	r1, r3
 8001152:	2208      	movs	r2, #8
 8001154:	305c      	adds	r0, #92	; 0x5c
 8001156:	f000 f906 	bl	8001366 <memset>
 800115a:	4b0d      	ldr	r3, [pc, #52]	; (8001190 <std+0x58>)
 800115c:	6263      	str	r3, [r4, #36]	; 0x24
 800115e:	4b0d      	ldr	r3, [pc, #52]	; (8001194 <std+0x5c>)
 8001160:	62a3      	str	r3, [r4, #40]	; 0x28
 8001162:	4b0d      	ldr	r3, [pc, #52]	; (8001198 <std+0x60>)
 8001164:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001166:	4b0d      	ldr	r3, [pc, #52]	; (800119c <std+0x64>)
 8001168:	6323      	str	r3, [r4, #48]	; 0x30
 800116a:	4b0d      	ldr	r3, [pc, #52]	; (80011a0 <std+0x68>)
 800116c:	6224      	str	r4, [r4, #32]
 800116e:	429c      	cmp	r4, r3
 8001170:	d006      	beq.n	8001180 <std+0x48>
 8001172:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8001176:	4294      	cmp	r4, r2
 8001178:	d002      	beq.n	8001180 <std+0x48>
 800117a:	33d0      	adds	r3, #208	; 0xd0
 800117c:	429c      	cmp	r4, r3
 800117e:	d105      	bne.n	800118c <std+0x54>
 8001180:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001188:	f000 b966 	b.w	8001458 <__retarget_lock_init_recursive>
 800118c:	bd10      	pop	{r4, pc}
 800118e:	bf00      	nop
 8001190:	080012e1 	.word	0x080012e1
 8001194:	08001303 	.word	0x08001303
 8001198:	0800133b 	.word	0x0800133b
 800119c:	0800135f 	.word	0x0800135f
 80011a0:	20000094 	.word	0x20000094

080011a4 <stdio_exit_handler>:
 80011a4:	4a02      	ldr	r2, [pc, #8]	; (80011b0 <stdio_exit_handler+0xc>)
 80011a6:	4903      	ldr	r1, [pc, #12]	; (80011b4 <stdio_exit_handler+0x10>)
 80011a8:	4803      	ldr	r0, [pc, #12]	; (80011b8 <stdio_exit_handler+0x14>)
 80011aa:	f000 b869 	b.w	8001280 <_fwalk_sglue>
 80011ae:	bf00      	nop
 80011b0:	20000000 	.word	0x20000000
 80011b4:	08001d05 	.word	0x08001d05
 80011b8:	2000000c 	.word	0x2000000c

080011bc <cleanup_stdio>:
 80011bc:	6841      	ldr	r1, [r0, #4]
 80011be:	4b0c      	ldr	r3, [pc, #48]	; (80011f0 <cleanup_stdio+0x34>)
 80011c0:	4299      	cmp	r1, r3
 80011c2:	b510      	push	{r4, lr}
 80011c4:	4604      	mov	r4, r0
 80011c6:	d001      	beq.n	80011cc <cleanup_stdio+0x10>
 80011c8:	f000 fd9c 	bl	8001d04 <_fflush_r>
 80011cc:	68a1      	ldr	r1, [r4, #8]
 80011ce:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <cleanup_stdio+0x38>)
 80011d0:	4299      	cmp	r1, r3
 80011d2:	d002      	beq.n	80011da <cleanup_stdio+0x1e>
 80011d4:	4620      	mov	r0, r4
 80011d6:	f000 fd95 	bl	8001d04 <_fflush_r>
 80011da:	68e1      	ldr	r1, [r4, #12]
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <cleanup_stdio+0x3c>)
 80011de:	4299      	cmp	r1, r3
 80011e0:	d004      	beq.n	80011ec <cleanup_stdio+0x30>
 80011e2:	4620      	mov	r0, r4
 80011e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80011e8:	f000 bd8c 	b.w	8001d04 <_fflush_r>
 80011ec:	bd10      	pop	{r4, pc}
 80011ee:	bf00      	nop
 80011f0:	20000094 	.word	0x20000094
 80011f4:	200000fc 	.word	0x200000fc
 80011f8:	20000164 	.word	0x20000164

080011fc <global_stdio_init.part.0>:
 80011fc:	b510      	push	{r4, lr}
 80011fe:	4b0b      	ldr	r3, [pc, #44]	; (800122c <global_stdio_init.part.0+0x30>)
 8001200:	4c0b      	ldr	r4, [pc, #44]	; (8001230 <global_stdio_init.part.0+0x34>)
 8001202:	4a0c      	ldr	r2, [pc, #48]	; (8001234 <global_stdio_init.part.0+0x38>)
 8001204:	601a      	str	r2, [r3, #0]
 8001206:	4620      	mov	r0, r4
 8001208:	2200      	movs	r2, #0
 800120a:	2104      	movs	r1, #4
 800120c:	f7ff ff94 	bl	8001138 <std>
 8001210:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8001214:	2201      	movs	r2, #1
 8001216:	2109      	movs	r1, #9
 8001218:	f7ff ff8e 	bl	8001138 <std>
 800121c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8001220:	2202      	movs	r2, #2
 8001222:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001226:	2112      	movs	r1, #18
 8001228:	f7ff bf86 	b.w	8001138 <std>
 800122c:	200001cc 	.word	0x200001cc
 8001230:	20000094 	.word	0x20000094
 8001234:	080011a5 	.word	0x080011a5

08001238 <__sfp_lock_acquire>:
 8001238:	4801      	ldr	r0, [pc, #4]	; (8001240 <__sfp_lock_acquire+0x8>)
 800123a:	f000 b90e 	b.w	800145a <__retarget_lock_acquire_recursive>
 800123e:	bf00      	nop
 8001240:	200001d5 	.word	0x200001d5

08001244 <__sfp_lock_release>:
 8001244:	4801      	ldr	r0, [pc, #4]	; (800124c <__sfp_lock_release+0x8>)
 8001246:	f000 b909 	b.w	800145c <__retarget_lock_release_recursive>
 800124a:	bf00      	nop
 800124c:	200001d5 	.word	0x200001d5

08001250 <__sinit>:
 8001250:	b510      	push	{r4, lr}
 8001252:	4604      	mov	r4, r0
 8001254:	f7ff fff0 	bl	8001238 <__sfp_lock_acquire>
 8001258:	6a23      	ldr	r3, [r4, #32]
 800125a:	b11b      	cbz	r3, 8001264 <__sinit+0x14>
 800125c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001260:	f7ff bff0 	b.w	8001244 <__sfp_lock_release>
 8001264:	4b04      	ldr	r3, [pc, #16]	; (8001278 <__sinit+0x28>)
 8001266:	6223      	str	r3, [r4, #32]
 8001268:	4b04      	ldr	r3, [pc, #16]	; (800127c <__sinit+0x2c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d1f5      	bne.n	800125c <__sinit+0xc>
 8001270:	f7ff ffc4 	bl	80011fc <global_stdio_init.part.0>
 8001274:	e7f2      	b.n	800125c <__sinit+0xc>
 8001276:	bf00      	nop
 8001278:	080011bd 	.word	0x080011bd
 800127c:	200001cc 	.word	0x200001cc

08001280 <_fwalk_sglue>:
 8001280:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001284:	4607      	mov	r7, r0
 8001286:	4688      	mov	r8, r1
 8001288:	4614      	mov	r4, r2
 800128a:	2600      	movs	r6, #0
 800128c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8001290:	f1b9 0901 	subs.w	r9, r9, #1
 8001294:	d505      	bpl.n	80012a2 <_fwalk_sglue+0x22>
 8001296:	6824      	ldr	r4, [r4, #0]
 8001298:	2c00      	cmp	r4, #0
 800129a:	d1f7      	bne.n	800128c <_fwalk_sglue+0xc>
 800129c:	4630      	mov	r0, r6
 800129e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80012a2:	89ab      	ldrh	r3, [r5, #12]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d907      	bls.n	80012b8 <_fwalk_sglue+0x38>
 80012a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80012ac:	3301      	adds	r3, #1
 80012ae:	d003      	beq.n	80012b8 <_fwalk_sglue+0x38>
 80012b0:	4629      	mov	r1, r5
 80012b2:	4638      	mov	r0, r7
 80012b4:	47c0      	blx	r8
 80012b6:	4306      	orrs	r6, r0
 80012b8:	3568      	adds	r5, #104	; 0x68
 80012ba:	e7e9      	b.n	8001290 <_fwalk_sglue+0x10>

080012bc <iprintf>:
 80012bc:	b40f      	push	{r0, r1, r2, r3}
 80012be:	b507      	push	{r0, r1, r2, lr}
 80012c0:	4906      	ldr	r1, [pc, #24]	; (80012dc <iprintf+0x20>)
 80012c2:	ab04      	add	r3, sp, #16
 80012c4:	6808      	ldr	r0, [r1, #0]
 80012c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80012ca:	6881      	ldr	r1, [r0, #8]
 80012cc:	9301      	str	r3, [sp, #4]
 80012ce:	f000 f9e9 	bl	80016a4 <_vfiprintf_r>
 80012d2:	b003      	add	sp, #12
 80012d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80012d8:	b004      	add	sp, #16
 80012da:	4770      	bx	lr
 80012dc:	20000058 	.word	0x20000058

080012e0 <__sread>:
 80012e0:	b510      	push	{r4, lr}
 80012e2:	460c      	mov	r4, r1
 80012e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80012e8:	f000 f868 	bl	80013bc <_read_r>
 80012ec:	2800      	cmp	r0, #0
 80012ee:	bfab      	itete	ge
 80012f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80012f2:	89a3      	ldrhlt	r3, [r4, #12]
 80012f4:	181b      	addge	r3, r3, r0
 80012f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80012fa:	bfac      	ite	ge
 80012fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80012fe:	81a3      	strhlt	r3, [r4, #12]
 8001300:	bd10      	pop	{r4, pc}

08001302 <__swrite>:
 8001302:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001306:	461f      	mov	r7, r3
 8001308:	898b      	ldrh	r3, [r1, #12]
 800130a:	05db      	lsls	r3, r3, #23
 800130c:	4605      	mov	r5, r0
 800130e:	460c      	mov	r4, r1
 8001310:	4616      	mov	r6, r2
 8001312:	d505      	bpl.n	8001320 <__swrite+0x1e>
 8001314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001318:	2302      	movs	r3, #2
 800131a:	2200      	movs	r2, #0
 800131c:	f000 f83c 	bl	8001398 <_lseek_r>
 8001320:	89a3      	ldrh	r3, [r4, #12]
 8001322:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001326:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800132a:	81a3      	strh	r3, [r4, #12]
 800132c:	4632      	mov	r2, r6
 800132e:	463b      	mov	r3, r7
 8001330:	4628      	mov	r0, r5
 8001332:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001336:	f000 b853 	b.w	80013e0 <_write_r>

0800133a <__sseek>:
 800133a:	b510      	push	{r4, lr}
 800133c:	460c      	mov	r4, r1
 800133e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001342:	f000 f829 	bl	8001398 <_lseek_r>
 8001346:	1c43      	adds	r3, r0, #1
 8001348:	89a3      	ldrh	r3, [r4, #12]
 800134a:	bf15      	itete	ne
 800134c:	6560      	strne	r0, [r4, #84]	; 0x54
 800134e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001352:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001356:	81a3      	strheq	r3, [r4, #12]
 8001358:	bf18      	it	ne
 800135a:	81a3      	strhne	r3, [r4, #12]
 800135c:	bd10      	pop	{r4, pc}

0800135e <__sclose>:
 800135e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001362:	f000 b809 	b.w	8001378 <_close_r>

08001366 <memset>:
 8001366:	4402      	add	r2, r0
 8001368:	4603      	mov	r3, r0
 800136a:	4293      	cmp	r3, r2
 800136c:	d100      	bne.n	8001370 <memset+0xa>
 800136e:	4770      	bx	lr
 8001370:	f803 1b01 	strb.w	r1, [r3], #1
 8001374:	e7f9      	b.n	800136a <memset+0x4>
	...

08001378 <_close_r>:
 8001378:	b538      	push	{r3, r4, r5, lr}
 800137a:	4d06      	ldr	r5, [pc, #24]	; (8001394 <_close_r+0x1c>)
 800137c:	2300      	movs	r3, #0
 800137e:	4604      	mov	r4, r0
 8001380:	4608      	mov	r0, r1
 8001382:	602b      	str	r3, [r5, #0]
 8001384:	f7ff fd89 	bl	8000e9a <_close>
 8001388:	1c43      	adds	r3, r0, #1
 800138a:	d102      	bne.n	8001392 <_close_r+0x1a>
 800138c:	682b      	ldr	r3, [r5, #0]
 800138e:	b103      	cbz	r3, 8001392 <_close_r+0x1a>
 8001390:	6023      	str	r3, [r4, #0]
 8001392:	bd38      	pop	{r3, r4, r5, pc}
 8001394:	200001d0 	.word	0x200001d0

08001398 <_lseek_r>:
 8001398:	b538      	push	{r3, r4, r5, lr}
 800139a:	4d07      	ldr	r5, [pc, #28]	; (80013b8 <_lseek_r+0x20>)
 800139c:	4604      	mov	r4, r0
 800139e:	4608      	mov	r0, r1
 80013a0:	4611      	mov	r1, r2
 80013a2:	2200      	movs	r2, #0
 80013a4:	602a      	str	r2, [r5, #0]
 80013a6:	461a      	mov	r2, r3
 80013a8:	f7ff fd9e 	bl	8000ee8 <_lseek>
 80013ac:	1c43      	adds	r3, r0, #1
 80013ae:	d102      	bne.n	80013b6 <_lseek_r+0x1e>
 80013b0:	682b      	ldr	r3, [r5, #0]
 80013b2:	b103      	cbz	r3, 80013b6 <_lseek_r+0x1e>
 80013b4:	6023      	str	r3, [r4, #0]
 80013b6:	bd38      	pop	{r3, r4, r5, pc}
 80013b8:	200001d0 	.word	0x200001d0

080013bc <_read_r>:
 80013bc:	b538      	push	{r3, r4, r5, lr}
 80013be:	4d07      	ldr	r5, [pc, #28]	; (80013dc <_read_r+0x20>)
 80013c0:	4604      	mov	r4, r0
 80013c2:	4608      	mov	r0, r1
 80013c4:	4611      	mov	r1, r2
 80013c6:	2200      	movs	r2, #0
 80013c8:	602a      	str	r2, [r5, #0]
 80013ca:	461a      	mov	r2, r3
 80013cc:	f7ff fd2c 	bl	8000e28 <_read>
 80013d0:	1c43      	adds	r3, r0, #1
 80013d2:	d102      	bne.n	80013da <_read_r+0x1e>
 80013d4:	682b      	ldr	r3, [r5, #0]
 80013d6:	b103      	cbz	r3, 80013da <_read_r+0x1e>
 80013d8:	6023      	str	r3, [r4, #0]
 80013da:	bd38      	pop	{r3, r4, r5, pc}
 80013dc:	200001d0 	.word	0x200001d0

080013e0 <_write_r>:
 80013e0:	b538      	push	{r3, r4, r5, lr}
 80013e2:	4d07      	ldr	r5, [pc, #28]	; (8001400 <_write_r+0x20>)
 80013e4:	4604      	mov	r4, r0
 80013e6:	4608      	mov	r0, r1
 80013e8:	4611      	mov	r1, r2
 80013ea:	2200      	movs	r2, #0
 80013ec:	602a      	str	r2, [r5, #0]
 80013ee:	461a      	mov	r2, r3
 80013f0:	f7ff fd37 	bl	8000e62 <_write>
 80013f4:	1c43      	adds	r3, r0, #1
 80013f6:	d102      	bne.n	80013fe <_write_r+0x1e>
 80013f8:	682b      	ldr	r3, [r5, #0]
 80013fa:	b103      	cbz	r3, 80013fe <_write_r+0x1e>
 80013fc:	6023      	str	r3, [r4, #0]
 80013fe:	bd38      	pop	{r3, r4, r5, pc}
 8001400:	200001d0 	.word	0x200001d0

08001404 <__errno>:
 8001404:	4b01      	ldr	r3, [pc, #4]	; (800140c <__errno+0x8>)
 8001406:	6818      	ldr	r0, [r3, #0]
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	20000058 	.word	0x20000058

08001410 <__libc_init_array>:
 8001410:	b570      	push	{r4, r5, r6, lr}
 8001412:	4d0d      	ldr	r5, [pc, #52]	; (8001448 <__libc_init_array+0x38>)
 8001414:	4c0d      	ldr	r4, [pc, #52]	; (800144c <__libc_init_array+0x3c>)
 8001416:	1b64      	subs	r4, r4, r5
 8001418:	10a4      	asrs	r4, r4, #2
 800141a:	2600      	movs	r6, #0
 800141c:	42a6      	cmp	r6, r4
 800141e:	d109      	bne.n	8001434 <__libc_init_array+0x24>
 8001420:	4d0b      	ldr	r5, [pc, #44]	; (8001450 <__libc_init_array+0x40>)
 8001422:	4c0c      	ldr	r4, [pc, #48]	; (8001454 <__libc_init_array+0x44>)
 8001424:	f000 fdc0 	bl	8001fa8 <_init>
 8001428:	1b64      	subs	r4, r4, r5
 800142a:	10a4      	asrs	r4, r4, #2
 800142c:	2600      	movs	r6, #0
 800142e:	42a6      	cmp	r6, r4
 8001430:	d105      	bne.n	800143e <__libc_init_array+0x2e>
 8001432:	bd70      	pop	{r4, r5, r6, pc}
 8001434:	f855 3b04 	ldr.w	r3, [r5], #4
 8001438:	4798      	blx	r3
 800143a:	3601      	adds	r6, #1
 800143c:	e7ee      	b.n	800141c <__libc_init_array+0xc>
 800143e:	f855 3b04 	ldr.w	r3, [r5], #4
 8001442:	4798      	blx	r3
 8001444:	3601      	adds	r6, #1
 8001446:	e7f2      	b.n	800142e <__libc_init_array+0x1e>
 8001448:	08002008 	.word	0x08002008
 800144c:	08002008 	.word	0x08002008
 8001450:	08002008 	.word	0x08002008
 8001454:	0800200c 	.word	0x0800200c

08001458 <__retarget_lock_init_recursive>:
 8001458:	4770      	bx	lr

0800145a <__retarget_lock_acquire_recursive>:
 800145a:	4770      	bx	lr

0800145c <__retarget_lock_release_recursive>:
 800145c:	4770      	bx	lr
	...

08001460 <_free_r>:
 8001460:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001462:	2900      	cmp	r1, #0
 8001464:	d044      	beq.n	80014f0 <_free_r+0x90>
 8001466:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800146a:	9001      	str	r0, [sp, #4]
 800146c:	2b00      	cmp	r3, #0
 800146e:	f1a1 0404 	sub.w	r4, r1, #4
 8001472:	bfb8      	it	lt
 8001474:	18e4      	addlt	r4, r4, r3
 8001476:	f000 f8df 	bl	8001638 <__malloc_lock>
 800147a:	4a1e      	ldr	r2, [pc, #120]	; (80014f4 <_free_r+0x94>)
 800147c:	9801      	ldr	r0, [sp, #4]
 800147e:	6813      	ldr	r3, [r2, #0]
 8001480:	b933      	cbnz	r3, 8001490 <_free_r+0x30>
 8001482:	6063      	str	r3, [r4, #4]
 8001484:	6014      	str	r4, [r2, #0]
 8001486:	b003      	add	sp, #12
 8001488:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800148c:	f000 b8da 	b.w	8001644 <__malloc_unlock>
 8001490:	42a3      	cmp	r3, r4
 8001492:	d908      	bls.n	80014a6 <_free_r+0x46>
 8001494:	6825      	ldr	r5, [r4, #0]
 8001496:	1961      	adds	r1, r4, r5
 8001498:	428b      	cmp	r3, r1
 800149a:	bf01      	itttt	eq
 800149c:	6819      	ldreq	r1, [r3, #0]
 800149e:	685b      	ldreq	r3, [r3, #4]
 80014a0:	1949      	addeq	r1, r1, r5
 80014a2:	6021      	streq	r1, [r4, #0]
 80014a4:	e7ed      	b.n	8001482 <_free_r+0x22>
 80014a6:	461a      	mov	r2, r3
 80014a8:	685b      	ldr	r3, [r3, #4]
 80014aa:	b10b      	cbz	r3, 80014b0 <_free_r+0x50>
 80014ac:	42a3      	cmp	r3, r4
 80014ae:	d9fa      	bls.n	80014a6 <_free_r+0x46>
 80014b0:	6811      	ldr	r1, [r2, #0]
 80014b2:	1855      	adds	r5, r2, r1
 80014b4:	42a5      	cmp	r5, r4
 80014b6:	d10b      	bne.n	80014d0 <_free_r+0x70>
 80014b8:	6824      	ldr	r4, [r4, #0]
 80014ba:	4421      	add	r1, r4
 80014bc:	1854      	adds	r4, r2, r1
 80014be:	42a3      	cmp	r3, r4
 80014c0:	6011      	str	r1, [r2, #0]
 80014c2:	d1e0      	bne.n	8001486 <_free_r+0x26>
 80014c4:	681c      	ldr	r4, [r3, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	6053      	str	r3, [r2, #4]
 80014ca:	440c      	add	r4, r1
 80014cc:	6014      	str	r4, [r2, #0]
 80014ce:	e7da      	b.n	8001486 <_free_r+0x26>
 80014d0:	d902      	bls.n	80014d8 <_free_r+0x78>
 80014d2:	230c      	movs	r3, #12
 80014d4:	6003      	str	r3, [r0, #0]
 80014d6:	e7d6      	b.n	8001486 <_free_r+0x26>
 80014d8:	6825      	ldr	r5, [r4, #0]
 80014da:	1961      	adds	r1, r4, r5
 80014dc:	428b      	cmp	r3, r1
 80014de:	bf04      	itt	eq
 80014e0:	6819      	ldreq	r1, [r3, #0]
 80014e2:	685b      	ldreq	r3, [r3, #4]
 80014e4:	6063      	str	r3, [r4, #4]
 80014e6:	bf04      	itt	eq
 80014e8:	1949      	addeq	r1, r1, r5
 80014ea:	6021      	streq	r1, [r4, #0]
 80014ec:	6054      	str	r4, [r2, #4]
 80014ee:	e7ca      	b.n	8001486 <_free_r+0x26>
 80014f0:	b003      	add	sp, #12
 80014f2:	bd30      	pop	{r4, r5, pc}
 80014f4:	200001d8 	.word	0x200001d8

080014f8 <sbrk_aligned>:
 80014f8:	b570      	push	{r4, r5, r6, lr}
 80014fa:	4e0e      	ldr	r6, [pc, #56]	; (8001534 <sbrk_aligned+0x3c>)
 80014fc:	460c      	mov	r4, r1
 80014fe:	6831      	ldr	r1, [r6, #0]
 8001500:	4605      	mov	r5, r0
 8001502:	b911      	cbnz	r1, 800150a <sbrk_aligned+0x12>
 8001504:	f000 fcbc 	bl	8001e80 <_sbrk_r>
 8001508:	6030      	str	r0, [r6, #0]
 800150a:	4621      	mov	r1, r4
 800150c:	4628      	mov	r0, r5
 800150e:	f000 fcb7 	bl	8001e80 <_sbrk_r>
 8001512:	1c43      	adds	r3, r0, #1
 8001514:	d00a      	beq.n	800152c <sbrk_aligned+0x34>
 8001516:	1cc4      	adds	r4, r0, #3
 8001518:	f024 0403 	bic.w	r4, r4, #3
 800151c:	42a0      	cmp	r0, r4
 800151e:	d007      	beq.n	8001530 <sbrk_aligned+0x38>
 8001520:	1a21      	subs	r1, r4, r0
 8001522:	4628      	mov	r0, r5
 8001524:	f000 fcac 	bl	8001e80 <_sbrk_r>
 8001528:	3001      	adds	r0, #1
 800152a:	d101      	bne.n	8001530 <sbrk_aligned+0x38>
 800152c:	f04f 34ff 	mov.w	r4, #4294967295
 8001530:	4620      	mov	r0, r4
 8001532:	bd70      	pop	{r4, r5, r6, pc}
 8001534:	200001dc 	.word	0x200001dc

08001538 <_malloc_r>:
 8001538:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800153c:	1ccd      	adds	r5, r1, #3
 800153e:	f025 0503 	bic.w	r5, r5, #3
 8001542:	3508      	adds	r5, #8
 8001544:	2d0c      	cmp	r5, #12
 8001546:	bf38      	it	cc
 8001548:	250c      	movcc	r5, #12
 800154a:	2d00      	cmp	r5, #0
 800154c:	4607      	mov	r7, r0
 800154e:	db01      	blt.n	8001554 <_malloc_r+0x1c>
 8001550:	42a9      	cmp	r1, r5
 8001552:	d905      	bls.n	8001560 <_malloc_r+0x28>
 8001554:	230c      	movs	r3, #12
 8001556:	603b      	str	r3, [r7, #0]
 8001558:	2600      	movs	r6, #0
 800155a:	4630      	mov	r0, r6
 800155c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001560:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8001634 <_malloc_r+0xfc>
 8001564:	f000 f868 	bl	8001638 <__malloc_lock>
 8001568:	f8d8 3000 	ldr.w	r3, [r8]
 800156c:	461c      	mov	r4, r3
 800156e:	bb5c      	cbnz	r4, 80015c8 <_malloc_r+0x90>
 8001570:	4629      	mov	r1, r5
 8001572:	4638      	mov	r0, r7
 8001574:	f7ff ffc0 	bl	80014f8 <sbrk_aligned>
 8001578:	1c43      	adds	r3, r0, #1
 800157a:	4604      	mov	r4, r0
 800157c:	d155      	bne.n	800162a <_malloc_r+0xf2>
 800157e:	f8d8 4000 	ldr.w	r4, [r8]
 8001582:	4626      	mov	r6, r4
 8001584:	2e00      	cmp	r6, #0
 8001586:	d145      	bne.n	8001614 <_malloc_r+0xdc>
 8001588:	2c00      	cmp	r4, #0
 800158a:	d048      	beq.n	800161e <_malloc_r+0xe6>
 800158c:	6823      	ldr	r3, [r4, #0]
 800158e:	4631      	mov	r1, r6
 8001590:	4638      	mov	r0, r7
 8001592:	eb04 0903 	add.w	r9, r4, r3
 8001596:	f000 fc73 	bl	8001e80 <_sbrk_r>
 800159a:	4581      	cmp	r9, r0
 800159c:	d13f      	bne.n	800161e <_malloc_r+0xe6>
 800159e:	6821      	ldr	r1, [r4, #0]
 80015a0:	1a6d      	subs	r5, r5, r1
 80015a2:	4629      	mov	r1, r5
 80015a4:	4638      	mov	r0, r7
 80015a6:	f7ff ffa7 	bl	80014f8 <sbrk_aligned>
 80015aa:	3001      	adds	r0, #1
 80015ac:	d037      	beq.n	800161e <_malloc_r+0xe6>
 80015ae:	6823      	ldr	r3, [r4, #0]
 80015b0:	442b      	add	r3, r5
 80015b2:	6023      	str	r3, [r4, #0]
 80015b4:	f8d8 3000 	ldr.w	r3, [r8]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d038      	beq.n	800162e <_malloc_r+0xf6>
 80015bc:	685a      	ldr	r2, [r3, #4]
 80015be:	42a2      	cmp	r2, r4
 80015c0:	d12b      	bne.n	800161a <_malloc_r+0xe2>
 80015c2:	2200      	movs	r2, #0
 80015c4:	605a      	str	r2, [r3, #4]
 80015c6:	e00f      	b.n	80015e8 <_malloc_r+0xb0>
 80015c8:	6822      	ldr	r2, [r4, #0]
 80015ca:	1b52      	subs	r2, r2, r5
 80015cc:	d41f      	bmi.n	800160e <_malloc_r+0xd6>
 80015ce:	2a0b      	cmp	r2, #11
 80015d0:	d917      	bls.n	8001602 <_malloc_r+0xca>
 80015d2:	1961      	adds	r1, r4, r5
 80015d4:	42a3      	cmp	r3, r4
 80015d6:	6025      	str	r5, [r4, #0]
 80015d8:	bf18      	it	ne
 80015da:	6059      	strne	r1, [r3, #4]
 80015dc:	6863      	ldr	r3, [r4, #4]
 80015de:	bf08      	it	eq
 80015e0:	f8c8 1000 	streq.w	r1, [r8]
 80015e4:	5162      	str	r2, [r4, r5]
 80015e6:	604b      	str	r3, [r1, #4]
 80015e8:	4638      	mov	r0, r7
 80015ea:	f104 060b 	add.w	r6, r4, #11
 80015ee:	f000 f829 	bl	8001644 <__malloc_unlock>
 80015f2:	f026 0607 	bic.w	r6, r6, #7
 80015f6:	1d23      	adds	r3, r4, #4
 80015f8:	1af2      	subs	r2, r6, r3
 80015fa:	d0ae      	beq.n	800155a <_malloc_r+0x22>
 80015fc:	1b9b      	subs	r3, r3, r6
 80015fe:	50a3      	str	r3, [r4, r2]
 8001600:	e7ab      	b.n	800155a <_malloc_r+0x22>
 8001602:	42a3      	cmp	r3, r4
 8001604:	6862      	ldr	r2, [r4, #4]
 8001606:	d1dd      	bne.n	80015c4 <_malloc_r+0x8c>
 8001608:	f8c8 2000 	str.w	r2, [r8]
 800160c:	e7ec      	b.n	80015e8 <_malloc_r+0xb0>
 800160e:	4623      	mov	r3, r4
 8001610:	6864      	ldr	r4, [r4, #4]
 8001612:	e7ac      	b.n	800156e <_malloc_r+0x36>
 8001614:	4634      	mov	r4, r6
 8001616:	6876      	ldr	r6, [r6, #4]
 8001618:	e7b4      	b.n	8001584 <_malloc_r+0x4c>
 800161a:	4613      	mov	r3, r2
 800161c:	e7cc      	b.n	80015b8 <_malloc_r+0x80>
 800161e:	230c      	movs	r3, #12
 8001620:	603b      	str	r3, [r7, #0]
 8001622:	4638      	mov	r0, r7
 8001624:	f000 f80e 	bl	8001644 <__malloc_unlock>
 8001628:	e797      	b.n	800155a <_malloc_r+0x22>
 800162a:	6025      	str	r5, [r4, #0]
 800162c:	e7dc      	b.n	80015e8 <_malloc_r+0xb0>
 800162e:	605b      	str	r3, [r3, #4]
 8001630:	deff      	udf	#255	; 0xff
 8001632:	bf00      	nop
 8001634:	200001d8 	.word	0x200001d8

08001638 <__malloc_lock>:
 8001638:	4801      	ldr	r0, [pc, #4]	; (8001640 <__malloc_lock+0x8>)
 800163a:	f7ff bf0e 	b.w	800145a <__retarget_lock_acquire_recursive>
 800163e:	bf00      	nop
 8001640:	200001d4 	.word	0x200001d4

08001644 <__malloc_unlock>:
 8001644:	4801      	ldr	r0, [pc, #4]	; (800164c <__malloc_unlock+0x8>)
 8001646:	f7ff bf09 	b.w	800145c <__retarget_lock_release_recursive>
 800164a:	bf00      	nop
 800164c:	200001d4 	.word	0x200001d4

08001650 <__sfputc_r>:
 8001650:	6893      	ldr	r3, [r2, #8]
 8001652:	3b01      	subs	r3, #1
 8001654:	2b00      	cmp	r3, #0
 8001656:	b410      	push	{r4}
 8001658:	6093      	str	r3, [r2, #8]
 800165a:	da08      	bge.n	800166e <__sfputc_r+0x1e>
 800165c:	6994      	ldr	r4, [r2, #24]
 800165e:	42a3      	cmp	r3, r4
 8001660:	db01      	blt.n	8001666 <__sfputc_r+0x16>
 8001662:	290a      	cmp	r1, #10
 8001664:	d103      	bne.n	800166e <__sfputc_r+0x1e>
 8001666:	f85d 4b04 	ldr.w	r4, [sp], #4
 800166a:	f000 bb73 	b.w	8001d54 <__swbuf_r>
 800166e:	6813      	ldr	r3, [r2, #0]
 8001670:	1c58      	adds	r0, r3, #1
 8001672:	6010      	str	r0, [r2, #0]
 8001674:	7019      	strb	r1, [r3, #0]
 8001676:	4608      	mov	r0, r1
 8001678:	f85d 4b04 	ldr.w	r4, [sp], #4
 800167c:	4770      	bx	lr

0800167e <__sfputs_r>:
 800167e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001680:	4606      	mov	r6, r0
 8001682:	460f      	mov	r7, r1
 8001684:	4614      	mov	r4, r2
 8001686:	18d5      	adds	r5, r2, r3
 8001688:	42ac      	cmp	r4, r5
 800168a:	d101      	bne.n	8001690 <__sfputs_r+0x12>
 800168c:	2000      	movs	r0, #0
 800168e:	e007      	b.n	80016a0 <__sfputs_r+0x22>
 8001690:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001694:	463a      	mov	r2, r7
 8001696:	4630      	mov	r0, r6
 8001698:	f7ff ffda 	bl	8001650 <__sfputc_r>
 800169c:	1c43      	adds	r3, r0, #1
 800169e:	d1f3      	bne.n	8001688 <__sfputs_r+0xa>
 80016a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080016a4 <_vfiprintf_r>:
 80016a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016a8:	460d      	mov	r5, r1
 80016aa:	b09d      	sub	sp, #116	; 0x74
 80016ac:	4614      	mov	r4, r2
 80016ae:	4698      	mov	r8, r3
 80016b0:	4606      	mov	r6, r0
 80016b2:	b118      	cbz	r0, 80016bc <_vfiprintf_r+0x18>
 80016b4:	6a03      	ldr	r3, [r0, #32]
 80016b6:	b90b      	cbnz	r3, 80016bc <_vfiprintf_r+0x18>
 80016b8:	f7ff fdca 	bl	8001250 <__sinit>
 80016bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80016be:	07d9      	lsls	r1, r3, #31
 80016c0:	d405      	bmi.n	80016ce <_vfiprintf_r+0x2a>
 80016c2:	89ab      	ldrh	r3, [r5, #12]
 80016c4:	059a      	lsls	r2, r3, #22
 80016c6:	d402      	bmi.n	80016ce <_vfiprintf_r+0x2a>
 80016c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80016ca:	f7ff fec6 	bl	800145a <__retarget_lock_acquire_recursive>
 80016ce:	89ab      	ldrh	r3, [r5, #12]
 80016d0:	071b      	lsls	r3, r3, #28
 80016d2:	d501      	bpl.n	80016d8 <_vfiprintf_r+0x34>
 80016d4:	692b      	ldr	r3, [r5, #16]
 80016d6:	b99b      	cbnz	r3, 8001700 <_vfiprintf_r+0x5c>
 80016d8:	4629      	mov	r1, r5
 80016da:	4630      	mov	r0, r6
 80016dc:	f000 fb78 	bl	8001dd0 <__swsetup_r>
 80016e0:	b170      	cbz	r0, 8001700 <_vfiprintf_r+0x5c>
 80016e2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80016e4:	07dc      	lsls	r4, r3, #31
 80016e6:	d504      	bpl.n	80016f2 <_vfiprintf_r+0x4e>
 80016e8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ec:	b01d      	add	sp, #116	; 0x74
 80016ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80016f2:	89ab      	ldrh	r3, [r5, #12]
 80016f4:	0598      	lsls	r0, r3, #22
 80016f6:	d4f7      	bmi.n	80016e8 <_vfiprintf_r+0x44>
 80016f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80016fa:	f7ff feaf 	bl	800145c <__retarget_lock_release_recursive>
 80016fe:	e7f3      	b.n	80016e8 <_vfiprintf_r+0x44>
 8001700:	2300      	movs	r3, #0
 8001702:	9309      	str	r3, [sp, #36]	; 0x24
 8001704:	2320      	movs	r3, #32
 8001706:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800170a:	f8cd 800c 	str.w	r8, [sp, #12]
 800170e:	2330      	movs	r3, #48	; 0x30
 8001710:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80018c4 <_vfiprintf_r+0x220>
 8001714:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001718:	f04f 0901 	mov.w	r9, #1
 800171c:	4623      	mov	r3, r4
 800171e:	469a      	mov	sl, r3
 8001720:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001724:	b10a      	cbz	r2, 800172a <_vfiprintf_r+0x86>
 8001726:	2a25      	cmp	r2, #37	; 0x25
 8001728:	d1f9      	bne.n	800171e <_vfiprintf_r+0x7a>
 800172a:	ebba 0b04 	subs.w	fp, sl, r4
 800172e:	d00b      	beq.n	8001748 <_vfiprintf_r+0xa4>
 8001730:	465b      	mov	r3, fp
 8001732:	4622      	mov	r2, r4
 8001734:	4629      	mov	r1, r5
 8001736:	4630      	mov	r0, r6
 8001738:	f7ff ffa1 	bl	800167e <__sfputs_r>
 800173c:	3001      	adds	r0, #1
 800173e:	f000 80a9 	beq.w	8001894 <_vfiprintf_r+0x1f0>
 8001742:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001744:	445a      	add	r2, fp
 8001746:	9209      	str	r2, [sp, #36]	; 0x24
 8001748:	f89a 3000 	ldrb.w	r3, [sl]
 800174c:	2b00      	cmp	r3, #0
 800174e:	f000 80a1 	beq.w	8001894 <_vfiprintf_r+0x1f0>
 8001752:	2300      	movs	r3, #0
 8001754:	f04f 32ff 	mov.w	r2, #4294967295
 8001758:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800175c:	f10a 0a01 	add.w	sl, sl, #1
 8001760:	9304      	str	r3, [sp, #16]
 8001762:	9307      	str	r3, [sp, #28]
 8001764:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001768:	931a      	str	r3, [sp, #104]	; 0x68
 800176a:	4654      	mov	r4, sl
 800176c:	2205      	movs	r2, #5
 800176e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001772:	4854      	ldr	r0, [pc, #336]	; (80018c4 <_vfiprintf_r+0x220>)
 8001774:	f7fe fd34 	bl	80001e0 <memchr>
 8001778:	9a04      	ldr	r2, [sp, #16]
 800177a:	b9d8      	cbnz	r0, 80017b4 <_vfiprintf_r+0x110>
 800177c:	06d1      	lsls	r1, r2, #27
 800177e:	bf44      	itt	mi
 8001780:	2320      	movmi	r3, #32
 8001782:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001786:	0713      	lsls	r3, r2, #28
 8001788:	bf44      	itt	mi
 800178a:	232b      	movmi	r3, #43	; 0x2b
 800178c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001790:	f89a 3000 	ldrb.w	r3, [sl]
 8001794:	2b2a      	cmp	r3, #42	; 0x2a
 8001796:	d015      	beq.n	80017c4 <_vfiprintf_r+0x120>
 8001798:	9a07      	ldr	r2, [sp, #28]
 800179a:	4654      	mov	r4, sl
 800179c:	2000      	movs	r0, #0
 800179e:	f04f 0c0a 	mov.w	ip, #10
 80017a2:	4621      	mov	r1, r4
 80017a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80017a8:	3b30      	subs	r3, #48	; 0x30
 80017aa:	2b09      	cmp	r3, #9
 80017ac:	d94d      	bls.n	800184a <_vfiprintf_r+0x1a6>
 80017ae:	b1b0      	cbz	r0, 80017de <_vfiprintf_r+0x13a>
 80017b0:	9207      	str	r2, [sp, #28]
 80017b2:	e014      	b.n	80017de <_vfiprintf_r+0x13a>
 80017b4:	eba0 0308 	sub.w	r3, r0, r8
 80017b8:	fa09 f303 	lsl.w	r3, r9, r3
 80017bc:	4313      	orrs	r3, r2
 80017be:	9304      	str	r3, [sp, #16]
 80017c0:	46a2      	mov	sl, r4
 80017c2:	e7d2      	b.n	800176a <_vfiprintf_r+0xc6>
 80017c4:	9b03      	ldr	r3, [sp, #12]
 80017c6:	1d19      	adds	r1, r3, #4
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	9103      	str	r1, [sp, #12]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	bfbb      	ittet	lt
 80017d0:	425b      	neglt	r3, r3
 80017d2:	f042 0202 	orrlt.w	r2, r2, #2
 80017d6:	9307      	strge	r3, [sp, #28]
 80017d8:	9307      	strlt	r3, [sp, #28]
 80017da:	bfb8      	it	lt
 80017dc:	9204      	strlt	r2, [sp, #16]
 80017de:	7823      	ldrb	r3, [r4, #0]
 80017e0:	2b2e      	cmp	r3, #46	; 0x2e
 80017e2:	d10c      	bne.n	80017fe <_vfiprintf_r+0x15a>
 80017e4:	7863      	ldrb	r3, [r4, #1]
 80017e6:	2b2a      	cmp	r3, #42	; 0x2a
 80017e8:	d134      	bne.n	8001854 <_vfiprintf_r+0x1b0>
 80017ea:	9b03      	ldr	r3, [sp, #12]
 80017ec:	1d1a      	adds	r2, r3, #4
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	9203      	str	r2, [sp, #12]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	bfb8      	it	lt
 80017f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80017fa:	3402      	adds	r4, #2
 80017fc:	9305      	str	r3, [sp, #20]
 80017fe:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80018d4 <_vfiprintf_r+0x230>
 8001802:	7821      	ldrb	r1, [r4, #0]
 8001804:	2203      	movs	r2, #3
 8001806:	4650      	mov	r0, sl
 8001808:	f7fe fcea 	bl	80001e0 <memchr>
 800180c:	b138      	cbz	r0, 800181e <_vfiprintf_r+0x17a>
 800180e:	9b04      	ldr	r3, [sp, #16]
 8001810:	eba0 000a 	sub.w	r0, r0, sl
 8001814:	2240      	movs	r2, #64	; 0x40
 8001816:	4082      	lsls	r2, r0
 8001818:	4313      	orrs	r3, r2
 800181a:	3401      	adds	r4, #1
 800181c:	9304      	str	r3, [sp, #16]
 800181e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001822:	4829      	ldr	r0, [pc, #164]	; (80018c8 <_vfiprintf_r+0x224>)
 8001824:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001828:	2206      	movs	r2, #6
 800182a:	f7fe fcd9 	bl	80001e0 <memchr>
 800182e:	2800      	cmp	r0, #0
 8001830:	d03f      	beq.n	80018b2 <_vfiprintf_r+0x20e>
 8001832:	4b26      	ldr	r3, [pc, #152]	; (80018cc <_vfiprintf_r+0x228>)
 8001834:	bb1b      	cbnz	r3, 800187e <_vfiprintf_r+0x1da>
 8001836:	9b03      	ldr	r3, [sp, #12]
 8001838:	3307      	adds	r3, #7
 800183a:	f023 0307 	bic.w	r3, r3, #7
 800183e:	3308      	adds	r3, #8
 8001840:	9303      	str	r3, [sp, #12]
 8001842:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001844:	443b      	add	r3, r7
 8001846:	9309      	str	r3, [sp, #36]	; 0x24
 8001848:	e768      	b.n	800171c <_vfiprintf_r+0x78>
 800184a:	fb0c 3202 	mla	r2, ip, r2, r3
 800184e:	460c      	mov	r4, r1
 8001850:	2001      	movs	r0, #1
 8001852:	e7a6      	b.n	80017a2 <_vfiprintf_r+0xfe>
 8001854:	2300      	movs	r3, #0
 8001856:	3401      	adds	r4, #1
 8001858:	9305      	str	r3, [sp, #20]
 800185a:	4619      	mov	r1, r3
 800185c:	f04f 0c0a 	mov.w	ip, #10
 8001860:	4620      	mov	r0, r4
 8001862:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001866:	3a30      	subs	r2, #48	; 0x30
 8001868:	2a09      	cmp	r2, #9
 800186a:	d903      	bls.n	8001874 <_vfiprintf_r+0x1d0>
 800186c:	2b00      	cmp	r3, #0
 800186e:	d0c6      	beq.n	80017fe <_vfiprintf_r+0x15a>
 8001870:	9105      	str	r1, [sp, #20]
 8001872:	e7c4      	b.n	80017fe <_vfiprintf_r+0x15a>
 8001874:	fb0c 2101 	mla	r1, ip, r1, r2
 8001878:	4604      	mov	r4, r0
 800187a:	2301      	movs	r3, #1
 800187c:	e7f0      	b.n	8001860 <_vfiprintf_r+0x1bc>
 800187e:	ab03      	add	r3, sp, #12
 8001880:	9300      	str	r3, [sp, #0]
 8001882:	462a      	mov	r2, r5
 8001884:	4b12      	ldr	r3, [pc, #72]	; (80018d0 <_vfiprintf_r+0x22c>)
 8001886:	a904      	add	r1, sp, #16
 8001888:	4630      	mov	r0, r6
 800188a:	f3af 8000 	nop.w
 800188e:	4607      	mov	r7, r0
 8001890:	1c78      	adds	r0, r7, #1
 8001892:	d1d6      	bne.n	8001842 <_vfiprintf_r+0x19e>
 8001894:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001896:	07d9      	lsls	r1, r3, #31
 8001898:	d405      	bmi.n	80018a6 <_vfiprintf_r+0x202>
 800189a:	89ab      	ldrh	r3, [r5, #12]
 800189c:	059a      	lsls	r2, r3, #22
 800189e:	d402      	bmi.n	80018a6 <_vfiprintf_r+0x202>
 80018a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80018a2:	f7ff fddb 	bl	800145c <__retarget_lock_release_recursive>
 80018a6:	89ab      	ldrh	r3, [r5, #12]
 80018a8:	065b      	lsls	r3, r3, #25
 80018aa:	f53f af1d 	bmi.w	80016e8 <_vfiprintf_r+0x44>
 80018ae:	9809      	ldr	r0, [sp, #36]	; 0x24
 80018b0:	e71c      	b.n	80016ec <_vfiprintf_r+0x48>
 80018b2:	ab03      	add	r3, sp, #12
 80018b4:	9300      	str	r3, [sp, #0]
 80018b6:	462a      	mov	r2, r5
 80018b8:	4b05      	ldr	r3, [pc, #20]	; (80018d0 <_vfiprintf_r+0x22c>)
 80018ba:	a904      	add	r1, sp, #16
 80018bc:	4630      	mov	r0, r6
 80018be:	f000 f879 	bl	80019b4 <_printf_i>
 80018c2:	e7e4      	b.n	800188e <_vfiprintf_r+0x1ea>
 80018c4:	08001fd3 	.word	0x08001fd3
 80018c8:	08001fdd 	.word	0x08001fdd
 80018cc:	00000000 	.word	0x00000000
 80018d0:	0800167f 	.word	0x0800167f
 80018d4:	08001fd9 	.word	0x08001fd9

080018d8 <_printf_common>:
 80018d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80018dc:	4616      	mov	r6, r2
 80018de:	4699      	mov	r9, r3
 80018e0:	688a      	ldr	r2, [r1, #8]
 80018e2:	690b      	ldr	r3, [r1, #16]
 80018e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80018e8:	4293      	cmp	r3, r2
 80018ea:	bfb8      	it	lt
 80018ec:	4613      	movlt	r3, r2
 80018ee:	6033      	str	r3, [r6, #0]
 80018f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80018f4:	4607      	mov	r7, r0
 80018f6:	460c      	mov	r4, r1
 80018f8:	b10a      	cbz	r2, 80018fe <_printf_common+0x26>
 80018fa:	3301      	adds	r3, #1
 80018fc:	6033      	str	r3, [r6, #0]
 80018fe:	6823      	ldr	r3, [r4, #0]
 8001900:	0699      	lsls	r1, r3, #26
 8001902:	bf42      	ittt	mi
 8001904:	6833      	ldrmi	r3, [r6, #0]
 8001906:	3302      	addmi	r3, #2
 8001908:	6033      	strmi	r3, [r6, #0]
 800190a:	6825      	ldr	r5, [r4, #0]
 800190c:	f015 0506 	ands.w	r5, r5, #6
 8001910:	d106      	bne.n	8001920 <_printf_common+0x48>
 8001912:	f104 0a19 	add.w	sl, r4, #25
 8001916:	68e3      	ldr	r3, [r4, #12]
 8001918:	6832      	ldr	r2, [r6, #0]
 800191a:	1a9b      	subs	r3, r3, r2
 800191c:	42ab      	cmp	r3, r5
 800191e:	dc26      	bgt.n	800196e <_printf_common+0x96>
 8001920:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8001924:	1e13      	subs	r3, r2, #0
 8001926:	6822      	ldr	r2, [r4, #0]
 8001928:	bf18      	it	ne
 800192a:	2301      	movne	r3, #1
 800192c:	0692      	lsls	r2, r2, #26
 800192e:	d42b      	bmi.n	8001988 <_printf_common+0xb0>
 8001930:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001934:	4649      	mov	r1, r9
 8001936:	4638      	mov	r0, r7
 8001938:	47c0      	blx	r8
 800193a:	3001      	adds	r0, #1
 800193c:	d01e      	beq.n	800197c <_printf_common+0xa4>
 800193e:	6823      	ldr	r3, [r4, #0]
 8001940:	6922      	ldr	r2, [r4, #16]
 8001942:	f003 0306 	and.w	r3, r3, #6
 8001946:	2b04      	cmp	r3, #4
 8001948:	bf02      	ittt	eq
 800194a:	68e5      	ldreq	r5, [r4, #12]
 800194c:	6833      	ldreq	r3, [r6, #0]
 800194e:	1aed      	subeq	r5, r5, r3
 8001950:	68a3      	ldr	r3, [r4, #8]
 8001952:	bf0c      	ite	eq
 8001954:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001958:	2500      	movne	r5, #0
 800195a:	4293      	cmp	r3, r2
 800195c:	bfc4      	itt	gt
 800195e:	1a9b      	subgt	r3, r3, r2
 8001960:	18ed      	addgt	r5, r5, r3
 8001962:	2600      	movs	r6, #0
 8001964:	341a      	adds	r4, #26
 8001966:	42b5      	cmp	r5, r6
 8001968:	d11a      	bne.n	80019a0 <_printf_common+0xc8>
 800196a:	2000      	movs	r0, #0
 800196c:	e008      	b.n	8001980 <_printf_common+0xa8>
 800196e:	2301      	movs	r3, #1
 8001970:	4652      	mov	r2, sl
 8001972:	4649      	mov	r1, r9
 8001974:	4638      	mov	r0, r7
 8001976:	47c0      	blx	r8
 8001978:	3001      	adds	r0, #1
 800197a:	d103      	bne.n	8001984 <_printf_common+0xac>
 800197c:	f04f 30ff 	mov.w	r0, #4294967295
 8001980:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001984:	3501      	adds	r5, #1
 8001986:	e7c6      	b.n	8001916 <_printf_common+0x3e>
 8001988:	18e1      	adds	r1, r4, r3
 800198a:	1c5a      	adds	r2, r3, #1
 800198c:	2030      	movs	r0, #48	; 0x30
 800198e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001992:	4422      	add	r2, r4
 8001994:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001998:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800199c:	3302      	adds	r3, #2
 800199e:	e7c7      	b.n	8001930 <_printf_common+0x58>
 80019a0:	2301      	movs	r3, #1
 80019a2:	4622      	mov	r2, r4
 80019a4:	4649      	mov	r1, r9
 80019a6:	4638      	mov	r0, r7
 80019a8:	47c0      	blx	r8
 80019aa:	3001      	adds	r0, #1
 80019ac:	d0e6      	beq.n	800197c <_printf_common+0xa4>
 80019ae:	3601      	adds	r6, #1
 80019b0:	e7d9      	b.n	8001966 <_printf_common+0x8e>
	...

080019b4 <_printf_i>:
 80019b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80019b8:	7e0f      	ldrb	r7, [r1, #24]
 80019ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80019bc:	2f78      	cmp	r7, #120	; 0x78
 80019be:	4691      	mov	r9, r2
 80019c0:	4680      	mov	r8, r0
 80019c2:	460c      	mov	r4, r1
 80019c4:	469a      	mov	sl, r3
 80019c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80019ca:	d807      	bhi.n	80019dc <_printf_i+0x28>
 80019cc:	2f62      	cmp	r7, #98	; 0x62
 80019ce:	d80a      	bhi.n	80019e6 <_printf_i+0x32>
 80019d0:	2f00      	cmp	r7, #0
 80019d2:	f000 80d4 	beq.w	8001b7e <_printf_i+0x1ca>
 80019d6:	2f58      	cmp	r7, #88	; 0x58
 80019d8:	f000 80c0 	beq.w	8001b5c <_printf_i+0x1a8>
 80019dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80019e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80019e4:	e03a      	b.n	8001a5c <_printf_i+0xa8>
 80019e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80019ea:	2b15      	cmp	r3, #21
 80019ec:	d8f6      	bhi.n	80019dc <_printf_i+0x28>
 80019ee:	a101      	add	r1, pc, #4	; (adr r1, 80019f4 <_printf_i+0x40>)
 80019f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80019f4:	08001a4d 	.word	0x08001a4d
 80019f8:	08001a61 	.word	0x08001a61
 80019fc:	080019dd 	.word	0x080019dd
 8001a00:	080019dd 	.word	0x080019dd
 8001a04:	080019dd 	.word	0x080019dd
 8001a08:	080019dd 	.word	0x080019dd
 8001a0c:	08001a61 	.word	0x08001a61
 8001a10:	080019dd 	.word	0x080019dd
 8001a14:	080019dd 	.word	0x080019dd
 8001a18:	080019dd 	.word	0x080019dd
 8001a1c:	080019dd 	.word	0x080019dd
 8001a20:	08001b65 	.word	0x08001b65
 8001a24:	08001a8d 	.word	0x08001a8d
 8001a28:	08001b1f 	.word	0x08001b1f
 8001a2c:	080019dd 	.word	0x080019dd
 8001a30:	080019dd 	.word	0x080019dd
 8001a34:	08001b87 	.word	0x08001b87
 8001a38:	080019dd 	.word	0x080019dd
 8001a3c:	08001a8d 	.word	0x08001a8d
 8001a40:	080019dd 	.word	0x080019dd
 8001a44:	080019dd 	.word	0x080019dd
 8001a48:	08001b27 	.word	0x08001b27
 8001a4c:	682b      	ldr	r3, [r5, #0]
 8001a4e:	1d1a      	adds	r2, r3, #4
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	602a      	str	r2, [r5, #0]
 8001a54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001a58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e09f      	b.n	8001ba0 <_printf_i+0x1ec>
 8001a60:	6820      	ldr	r0, [r4, #0]
 8001a62:	682b      	ldr	r3, [r5, #0]
 8001a64:	0607      	lsls	r7, r0, #24
 8001a66:	f103 0104 	add.w	r1, r3, #4
 8001a6a:	6029      	str	r1, [r5, #0]
 8001a6c:	d501      	bpl.n	8001a72 <_printf_i+0xbe>
 8001a6e:	681e      	ldr	r6, [r3, #0]
 8001a70:	e003      	b.n	8001a7a <_printf_i+0xc6>
 8001a72:	0646      	lsls	r6, r0, #25
 8001a74:	d5fb      	bpl.n	8001a6e <_printf_i+0xba>
 8001a76:	f9b3 6000 	ldrsh.w	r6, [r3]
 8001a7a:	2e00      	cmp	r6, #0
 8001a7c:	da03      	bge.n	8001a86 <_printf_i+0xd2>
 8001a7e:	232d      	movs	r3, #45	; 0x2d
 8001a80:	4276      	negs	r6, r6
 8001a82:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001a86:	485a      	ldr	r0, [pc, #360]	; (8001bf0 <_printf_i+0x23c>)
 8001a88:	230a      	movs	r3, #10
 8001a8a:	e012      	b.n	8001ab2 <_printf_i+0xfe>
 8001a8c:	682b      	ldr	r3, [r5, #0]
 8001a8e:	6820      	ldr	r0, [r4, #0]
 8001a90:	1d19      	adds	r1, r3, #4
 8001a92:	6029      	str	r1, [r5, #0]
 8001a94:	0605      	lsls	r5, r0, #24
 8001a96:	d501      	bpl.n	8001a9c <_printf_i+0xe8>
 8001a98:	681e      	ldr	r6, [r3, #0]
 8001a9a:	e002      	b.n	8001aa2 <_printf_i+0xee>
 8001a9c:	0641      	lsls	r1, r0, #25
 8001a9e:	d5fb      	bpl.n	8001a98 <_printf_i+0xe4>
 8001aa0:	881e      	ldrh	r6, [r3, #0]
 8001aa2:	4853      	ldr	r0, [pc, #332]	; (8001bf0 <_printf_i+0x23c>)
 8001aa4:	2f6f      	cmp	r7, #111	; 0x6f
 8001aa6:	bf0c      	ite	eq
 8001aa8:	2308      	moveq	r3, #8
 8001aaa:	230a      	movne	r3, #10
 8001aac:	2100      	movs	r1, #0
 8001aae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001ab2:	6865      	ldr	r5, [r4, #4]
 8001ab4:	60a5      	str	r5, [r4, #8]
 8001ab6:	2d00      	cmp	r5, #0
 8001ab8:	bfa2      	ittt	ge
 8001aba:	6821      	ldrge	r1, [r4, #0]
 8001abc:	f021 0104 	bicge.w	r1, r1, #4
 8001ac0:	6021      	strge	r1, [r4, #0]
 8001ac2:	b90e      	cbnz	r6, 8001ac8 <_printf_i+0x114>
 8001ac4:	2d00      	cmp	r5, #0
 8001ac6:	d04b      	beq.n	8001b60 <_printf_i+0x1ac>
 8001ac8:	4615      	mov	r5, r2
 8001aca:	fbb6 f1f3 	udiv	r1, r6, r3
 8001ace:	fb03 6711 	mls	r7, r3, r1, r6
 8001ad2:	5dc7      	ldrb	r7, [r0, r7]
 8001ad4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001ad8:	4637      	mov	r7, r6
 8001ada:	42bb      	cmp	r3, r7
 8001adc:	460e      	mov	r6, r1
 8001ade:	d9f4      	bls.n	8001aca <_printf_i+0x116>
 8001ae0:	2b08      	cmp	r3, #8
 8001ae2:	d10b      	bne.n	8001afc <_printf_i+0x148>
 8001ae4:	6823      	ldr	r3, [r4, #0]
 8001ae6:	07de      	lsls	r6, r3, #31
 8001ae8:	d508      	bpl.n	8001afc <_printf_i+0x148>
 8001aea:	6923      	ldr	r3, [r4, #16]
 8001aec:	6861      	ldr	r1, [r4, #4]
 8001aee:	4299      	cmp	r1, r3
 8001af0:	bfde      	ittt	le
 8001af2:	2330      	movle	r3, #48	; 0x30
 8001af4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001af8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001afc:	1b52      	subs	r2, r2, r5
 8001afe:	6122      	str	r2, [r4, #16]
 8001b00:	f8cd a000 	str.w	sl, [sp]
 8001b04:	464b      	mov	r3, r9
 8001b06:	aa03      	add	r2, sp, #12
 8001b08:	4621      	mov	r1, r4
 8001b0a:	4640      	mov	r0, r8
 8001b0c:	f7ff fee4 	bl	80018d8 <_printf_common>
 8001b10:	3001      	adds	r0, #1
 8001b12:	d14a      	bne.n	8001baa <_printf_i+0x1f6>
 8001b14:	f04f 30ff 	mov.w	r0, #4294967295
 8001b18:	b004      	add	sp, #16
 8001b1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001b1e:	6823      	ldr	r3, [r4, #0]
 8001b20:	f043 0320 	orr.w	r3, r3, #32
 8001b24:	6023      	str	r3, [r4, #0]
 8001b26:	4833      	ldr	r0, [pc, #204]	; (8001bf4 <_printf_i+0x240>)
 8001b28:	2778      	movs	r7, #120	; 0x78
 8001b2a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001b2e:	6823      	ldr	r3, [r4, #0]
 8001b30:	6829      	ldr	r1, [r5, #0]
 8001b32:	061f      	lsls	r7, r3, #24
 8001b34:	f851 6b04 	ldr.w	r6, [r1], #4
 8001b38:	d402      	bmi.n	8001b40 <_printf_i+0x18c>
 8001b3a:	065f      	lsls	r7, r3, #25
 8001b3c:	bf48      	it	mi
 8001b3e:	b2b6      	uxthmi	r6, r6
 8001b40:	07df      	lsls	r7, r3, #31
 8001b42:	bf48      	it	mi
 8001b44:	f043 0320 	orrmi.w	r3, r3, #32
 8001b48:	6029      	str	r1, [r5, #0]
 8001b4a:	bf48      	it	mi
 8001b4c:	6023      	strmi	r3, [r4, #0]
 8001b4e:	b91e      	cbnz	r6, 8001b58 <_printf_i+0x1a4>
 8001b50:	6823      	ldr	r3, [r4, #0]
 8001b52:	f023 0320 	bic.w	r3, r3, #32
 8001b56:	6023      	str	r3, [r4, #0]
 8001b58:	2310      	movs	r3, #16
 8001b5a:	e7a7      	b.n	8001aac <_printf_i+0xf8>
 8001b5c:	4824      	ldr	r0, [pc, #144]	; (8001bf0 <_printf_i+0x23c>)
 8001b5e:	e7e4      	b.n	8001b2a <_printf_i+0x176>
 8001b60:	4615      	mov	r5, r2
 8001b62:	e7bd      	b.n	8001ae0 <_printf_i+0x12c>
 8001b64:	682b      	ldr	r3, [r5, #0]
 8001b66:	6826      	ldr	r6, [r4, #0]
 8001b68:	6961      	ldr	r1, [r4, #20]
 8001b6a:	1d18      	adds	r0, r3, #4
 8001b6c:	6028      	str	r0, [r5, #0]
 8001b6e:	0635      	lsls	r5, r6, #24
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	d501      	bpl.n	8001b78 <_printf_i+0x1c4>
 8001b74:	6019      	str	r1, [r3, #0]
 8001b76:	e002      	b.n	8001b7e <_printf_i+0x1ca>
 8001b78:	0670      	lsls	r0, r6, #25
 8001b7a:	d5fb      	bpl.n	8001b74 <_printf_i+0x1c0>
 8001b7c:	8019      	strh	r1, [r3, #0]
 8001b7e:	2300      	movs	r3, #0
 8001b80:	6123      	str	r3, [r4, #16]
 8001b82:	4615      	mov	r5, r2
 8001b84:	e7bc      	b.n	8001b00 <_printf_i+0x14c>
 8001b86:	682b      	ldr	r3, [r5, #0]
 8001b88:	1d1a      	adds	r2, r3, #4
 8001b8a:	602a      	str	r2, [r5, #0]
 8001b8c:	681d      	ldr	r5, [r3, #0]
 8001b8e:	6862      	ldr	r2, [r4, #4]
 8001b90:	2100      	movs	r1, #0
 8001b92:	4628      	mov	r0, r5
 8001b94:	f7fe fb24 	bl	80001e0 <memchr>
 8001b98:	b108      	cbz	r0, 8001b9e <_printf_i+0x1ea>
 8001b9a:	1b40      	subs	r0, r0, r5
 8001b9c:	6060      	str	r0, [r4, #4]
 8001b9e:	6863      	ldr	r3, [r4, #4]
 8001ba0:	6123      	str	r3, [r4, #16]
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001ba8:	e7aa      	b.n	8001b00 <_printf_i+0x14c>
 8001baa:	6923      	ldr	r3, [r4, #16]
 8001bac:	462a      	mov	r2, r5
 8001bae:	4649      	mov	r1, r9
 8001bb0:	4640      	mov	r0, r8
 8001bb2:	47d0      	blx	sl
 8001bb4:	3001      	adds	r0, #1
 8001bb6:	d0ad      	beq.n	8001b14 <_printf_i+0x160>
 8001bb8:	6823      	ldr	r3, [r4, #0]
 8001bba:	079b      	lsls	r3, r3, #30
 8001bbc:	d413      	bmi.n	8001be6 <_printf_i+0x232>
 8001bbe:	68e0      	ldr	r0, [r4, #12]
 8001bc0:	9b03      	ldr	r3, [sp, #12]
 8001bc2:	4298      	cmp	r0, r3
 8001bc4:	bfb8      	it	lt
 8001bc6:	4618      	movlt	r0, r3
 8001bc8:	e7a6      	b.n	8001b18 <_printf_i+0x164>
 8001bca:	2301      	movs	r3, #1
 8001bcc:	4632      	mov	r2, r6
 8001bce:	4649      	mov	r1, r9
 8001bd0:	4640      	mov	r0, r8
 8001bd2:	47d0      	blx	sl
 8001bd4:	3001      	adds	r0, #1
 8001bd6:	d09d      	beq.n	8001b14 <_printf_i+0x160>
 8001bd8:	3501      	adds	r5, #1
 8001bda:	68e3      	ldr	r3, [r4, #12]
 8001bdc:	9903      	ldr	r1, [sp, #12]
 8001bde:	1a5b      	subs	r3, r3, r1
 8001be0:	42ab      	cmp	r3, r5
 8001be2:	dcf2      	bgt.n	8001bca <_printf_i+0x216>
 8001be4:	e7eb      	b.n	8001bbe <_printf_i+0x20a>
 8001be6:	2500      	movs	r5, #0
 8001be8:	f104 0619 	add.w	r6, r4, #25
 8001bec:	e7f5      	b.n	8001bda <_printf_i+0x226>
 8001bee:	bf00      	nop
 8001bf0:	08001fe4 	.word	0x08001fe4
 8001bf4:	08001ff5 	.word	0x08001ff5

08001bf8 <__sflush_r>:
 8001bf8:	898a      	ldrh	r2, [r1, #12]
 8001bfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bfe:	4605      	mov	r5, r0
 8001c00:	0710      	lsls	r0, r2, #28
 8001c02:	460c      	mov	r4, r1
 8001c04:	d458      	bmi.n	8001cb8 <__sflush_r+0xc0>
 8001c06:	684b      	ldr	r3, [r1, #4]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	dc05      	bgt.n	8001c18 <__sflush_r+0x20>
 8001c0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	dc02      	bgt.n	8001c18 <__sflush_r+0x20>
 8001c12:	2000      	movs	r0, #0
 8001c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001c1a:	2e00      	cmp	r6, #0
 8001c1c:	d0f9      	beq.n	8001c12 <__sflush_r+0x1a>
 8001c1e:	2300      	movs	r3, #0
 8001c20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001c24:	682f      	ldr	r7, [r5, #0]
 8001c26:	6a21      	ldr	r1, [r4, #32]
 8001c28:	602b      	str	r3, [r5, #0]
 8001c2a:	d032      	beq.n	8001c92 <__sflush_r+0x9a>
 8001c2c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001c2e:	89a3      	ldrh	r3, [r4, #12]
 8001c30:	075a      	lsls	r2, r3, #29
 8001c32:	d505      	bpl.n	8001c40 <__sflush_r+0x48>
 8001c34:	6863      	ldr	r3, [r4, #4]
 8001c36:	1ac0      	subs	r0, r0, r3
 8001c38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001c3a:	b10b      	cbz	r3, 8001c40 <__sflush_r+0x48>
 8001c3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c3e:	1ac0      	subs	r0, r0, r3
 8001c40:	2300      	movs	r3, #0
 8001c42:	4602      	mov	r2, r0
 8001c44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001c46:	6a21      	ldr	r1, [r4, #32]
 8001c48:	4628      	mov	r0, r5
 8001c4a:	47b0      	blx	r6
 8001c4c:	1c43      	adds	r3, r0, #1
 8001c4e:	89a3      	ldrh	r3, [r4, #12]
 8001c50:	d106      	bne.n	8001c60 <__sflush_r+0x68>
 8001c52:	6829      	ldr	r1, [r5, #0]
 8001c54:	291d      	cmp	r1, #29
 8001c56:	d82b      	bhi.n	8001cb0 <__sflush_r+0xb8>
 8001c58:	4a29      	ldr	r2, [pc, #164]	; (8001d00 <__sflush_r+0x108>)
 8001c5a:	410a      	asrs	r2, r1
 8001c5c:	07d6      	lsls	r6, r2, #31
 8001c5e:	d427      	bmi.n	8001cb0 <__sflush_r+0xb8>
 8001c60:	2200      	movs	r2, #0
 8001c62:	6062      	str	r2, [r4, #4]
 8001c64:	04d9      	lsls	r1, r3, #19
 8001c66:	6922      	ldr	r2, [r4, #16]
 8001c68:	6022      	str	r2, [r4, #0]
 8001c6a:	d504      	bpl.n	8001c76 <__sflush_r+0x7e>
 8001c6c:	1c42      	adds	r2, r0, #1
 8001c6e:	d101      	bne.n	8001c74 <__sflush_r+0x7c>
 8001c70:	682b      	ldr	r3, [r5, #0]
 8001c72:	b903      	cbnz	r3, 8001c76 <__sflush_r+0x7e>
 8001c74:	6560      	str	r0, [r4, #84]	; 0x54
 8001c76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001c78:	602f      	str	r7, [r5, #0]
 8001c7a:	2900      	cmp	r1, #0
 8001c7c:	d0c9      	beq.n	8001c12 <__sflush_r+0x1a>
 8001c7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001c82:	4299      	cmp	r1, r3
 8001c84:	d002      	beq.n	8001c8c <__sflush_r+0x94>
 8001c86:	4628      	mov	r0, r5
 8001c88:	f7ff fbea 	bl	8001460 <_free_r>
 8001c8c:	2000      	movs	r0, #0
 8001c8e:	6360      	str	r0, [r4, #52]	; 0x34
 8001c90:	e7c0      	b.n	8001c14 <__sflush_r+0x1c>
 8001c92:	2301      	movs	r3, #1
 8001c94:	4628      	mov	r0, r5
 8001c96:	47b0      	blx	r6
 8001c98:	1c41      	adds	r1, r0, #1
 8001c9a:	d1c8      	bne.n	8001c2e <__sflush_r+0x36>
 8001c9c:	682b      	ldr	r3, [r5, #0]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d0c5      	beq.n	8001c2e <__sflush_r+0x36>
 8001ca2:	2b1d      	cmp	r3, #29
 8001ca4:	d001      	beq.n	8001caa <__sflush_r+0xb2>
 8001ca6:	2b16      	cmp	r3, #22
 8001ca8:	d101      	bne.n	8001cae <__sflush_r+0xb6>
 8001caa:	602f      	str	r7, [r5, #0]
 8001cac:	e7b1      	b.n	8001c12 <__sflush_r+0x1a>
 8001cae:	89a3      	ldrh	r3, [r4, #12]
 8001cb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cb4:	81a3      	strh	r3, [r4, #12]
 8001cb6:	e7ad      	b.n	8001c14 <__sflush_r+0x1c>
 8001cb8:	690f      	ldr	r7, [r1, #16]
 8001cba:	2f00      	cmp	r7, #0
 8001cbc:	d0a9      	beq.n	8001c12 <__sflush_r+0x1a>
 8001cbe:	0793      	lsls	r3, r2, #30
 8001cc0:	680e      	ldr	r6, [r1, #0]
 8001cc2:	bf08      	it	eq
 8001cc4:	694b      	ldreq	r3, [r1, #20]
 8001cc6:	600f      	str	r7, [r1, #0]
 8001cc8:	bf18      	it	ne
 8001cca:	2300      	movne	r3, #0
 8001ccc:	eba6 0807 	sub.w	r8, r6, r7
 8001cd0:	608b      	str	r3, [r1, #8]
 8001cd2:	f1b8 0f00 	cmp.w	r8, #0
 8001cd6:	dd9c      	ble.n	8001c12 <__sflush_r+0x1a>
 8001cd8:	6a21      	ldr	r1, [r4, #32]
 8001cda:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001cdc:	4643      	mov	r3, r8
 8001cde:	463a      	mov	r2, r7
 8001ce0:	4628      	mov	r0, r5
 8001ce2:	47b0      	blx	r6
 8001ce4:	2800      	cmp	r0, #0
 8001ce6:	dc06      	bgt.n	8001cf6 <__sflush_r+0xfe>
 8001ce8:	89a3      	ldrh	r3, [r4, #12]
 8001cea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cee:	81a3      	strh	r3, [r4, #12]
 8001cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cf4:	e78e      	b.n	8001c14 <__sflush_r+0x1c>
 8001cf6:	4407      	add	r7, r0
 8001cf8:	eba8 0800 	sub.w	r8, r8, r0
 8001cfc:	e7e9      	b.n	8001cd2 <__sflush_r+0xda>
 8001cfe:	bf00      	nop
 8001d00:	dfbffffe 	.word	0xdfbffffe

08001d04 <_fflush_r>:
 8001d04:	b538      	push	{r3, r4, r5, lr}
 8001d06:	690b      	ldr	r3, [r1, #16]
 8001d08:	4605      	mov	r5, r0
 8001d0a:	460c      	mov	r4, r1
 8001d0c:	b913      	cbnz	r3, 8001d14 <_fflush_r+0x10>
 8001d0e:	2500      	movs	r5, #0
 8001d10:	4628      	mov	r0, r5
 8001d12:	bd38      	pop	{r3, r4, r5, pc}
 8001d14:	b118      	cbz	r0, 8001d1e <_fflush_r+0x1a>
 8001d16:	6a03      	ldr	r3, [r0, #32]
 8001d18:	b90b      	cbnz	r3, 8001d1e <_fflush_r+0x1a>
 8001d1a:	f7ff fa99 	bl	8001250 <__sinit>
 8001d1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d0f3      	beq.n	8001d0e <_fflush_r+0xa>
 8001d26:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001d28:	07d0      	lsls	r0, r2, #31
 8001d2a:	d404      	bmi.n	8001d36 <_fflush_r+0x32>
 8001d2c:	0599      	lsls	r1, r3, #22
 8001d2e:	d402      	bmi.n	8001d36 <_fflush_r+0x32>
 8001d30:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001d32:	f7ff fb92 	bl	800145a <__retarget_lock_acquire_recursive>
 8001d36:	4628      	mov	r0, r5
 8001d38:	4621      	mov	r1, r4
 8001d3a:	f7ff ff5d 	bl	8001bf8 <__sflush_r>
 8001d3e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001d40:	07da      	lsls	r2, r3, #31
 8001d42:	4605      	mov	r5, r0
 8001d44:	d4e4      	bmi.n	8001d10 <_fflush_r+0xc>
 8001d46:	89a3      	ldrh	r3, [r4, #12]
 8001d48:	059b      	lsls	r3, r3, #22
 8001d4a:	d4e1      	bmi.n	8001d10 <_fflush_r+0xc>
 8001d4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001d4e:	f7ff fb85 	bl	800145c <__retarget_lock_release_recursive>
 8001d52:	e7dd      	b.n	8001d10 <_fflush_r+0xc>

08001d54 <__swbuf_r>:
 8001d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001d56:	460e      	mov	r6, r1
 8001d58:	4614      	mov	r4, r2
 8001d5a:	4605      	mov	r5, r0
 8001d5c:	b118      	cbz	r0, 8001d66 <__swbuf_r+0x12>
 8001d5e:	6a03      	ldr	r3, [r0, #32]
 8001d60:	b90b      	cbnz	r3, 8001d66 <__swbuf_r+0x12>
 8001d62:	f7ff fa75 	bl	8001250 <__sinit>
 8001d66:	69a3      	ldr	r3, [r4, #24]
 8001d68:	60a3      	str	r3, [r4, #8]
 8001d6a:	89a3      	ldrh	r3, [r4, #12]
 8001d6c:	071a      	lsls	r2, r3, #28
 8001d6e:	d525      	bpl.n	8001dbc <__swbuf_r+0x68>
 8001d70:	6923      	ldr	r3, [r4, #16]
 8001d72:	b31b      	cbz	r3, 8001dbc <__swbuf_r+0x68>
 8001d74:	6823      	ldr	r3, [r4, #0]
 8001d76:	6922      	ldr	r2, [r4, #16]
 8001d78:	1a98      	subs	r0, r3, r2
 8001d7a:	6963      	ldr	r3, [r4, #20]
 8001d7c:	b2f6      	uxtb	r6, r6
 8001d7e:	4283      	cmp	r3, r0
 8001d80:	4637      	mov	r7, r6
 8001d82:	dc04      	bgt.n	8001d8e <__swbuf_r+0x3a>
 8001d84:	4621      	mov	r1, r4
 8001d86:	4628      	mov	r0, r5
 8001d88:	f7ff ffbc 	bl	8001d04 <_fflush_r>
 8001d8c:	b9e0      	cbnz	r0, 8001dc8 <__swbuf_r+0x74>
 8001d8e:	68a3      	ldr	r3, [r4, #8]
 8001d90:	3b01      	subs	r3, #1
 8001d92:	60a3      	str	r3, [r4, #8]
 8001d94:	6823      	ldr	r3, [r4, #0]
 8001d96:	1c5a      	adds	r2, r3, #1
 8001d98:	6022      	str	r2, [r4, #0]
 8001d9a:	701e      	strb	r6, [r3, #0]
 8001d9c:	6962      	ldr	r2, [r4, #20]
 8001d9e:	1c43      	adds	r3, r0, #1
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d004      	beq.n	8001dae <__swbuf_r+0x5a>
 8001da4:	89a3      	ldrh	r3, [r4, #12]
 8001da6:	07db      	lsls	r3, r3, #31
 8001da8:	d506      	bpl.n	8001db8 <__swbuf_r+0x64>
 8001daa:	2e0a      	cmp	r6, #10
 8001dac:	d104      	bne.n	8001db8 <__swbuf_r+0x64>
 8001dae:	4621      	mov	r1, r4
 8001db0:	4628      	mov	r0, r5
 8001db2:	f7ff ffa7 	bl	8001d04 <_fflush_r>
 8001db6:	b938      	cbnz	r0, 8001dc8 <__swbuf_r+0x74>
 8001db8:	4638      	mov	r0, r7
 8001dba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001dbc:	4621      	mov	r1, r4
 8001dbe:	4628      	mov	r0, r5
 8001dc0:	f000 f806 	bl	8001dd0 <__swsetup_r>
 8001dc4:	2800      	cmp	r0, #0
 8001dc6:	d0d5      	beq.n	8001d74 <__swbuf_r+0x20>
 8001dc8:	f04f 37ff 	mov.w	r7, #4294967295
 8001dcc:	e7f4      	b.n	8001db8 <__swbuf_r+0x64>
	...

08001dd0 <__swsetup_r>:
 8001dd0:	b538      	push	{r3, r4, r5, lr}
 8001dd2:	4b2a      	ldr	r3, [pc, #168]	; (8001e7c <__swsetup_r+0xac>)
 8001dd4:	4605      	mov	r5, r0
 8001dd6:	6818      	ldr	r0, [r3, #0]
 8001dd8:	460c      	mov	r4, r1
 8001dda:	b118      	cbz	r0, 8001de4 <__swsetup_r+0x14>
 8001ddc:	6a03      	ldr	r3, [r0, #32]
 8001dde:	b90b      	cbnz	r3, 8001de4 <__swsetup_r+0x14>
 8001de0:	f7ff fa36 	bl	8001250 <__sinit>
 8001de4:	89a3      	ldrh	r3, [r4, #12]
 8001de6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001dea:	0718      	lsls	r0, r3, #28
 8001dec:	d422      	bmi.n	8001e34 <__swsetup_r+0x64>
 8001dee:	06d9      	lsls	r1, r3, #27
 8001df0:	d407      	bmi.n	8001e02 <__swsetup_r+0x32>
 8001df2:	2309      	movs	r3, #9
 8001df4:	602b      	str	r3, [r5, #0]
 8001df6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001dfa:	81a3      	strh	r3, [r4, #12]
 8001dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001e00:	e034      	b.n	8001e6c <__swsetup_r+0x9c>
 8001e02:	0758      	lsls	r0, r3, #29
 8001e04:	d512      	bpl.n	8001e2c <__swsetup_r+0x5c>
 8001e06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001e08:	b141      	cbz	r1, 8001e1c <__swsetup_r+0x4c>
 8001e0a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001e0e:	4299      	cmp	r1, r3
 8001e10:	d002      	beq.n	8001e18 <__swsetup_r+0x48>
 8001e12:	4628      	mov	r0, r5
 8001e14:	f7ff fb24 	bl	8001460 <_free_r>
 8001e18:	2300      	movs	r3, #0
 8001e1a:	6363      	str	r3, [r4, #52]	; 0x34
 8001e1c:	89a3      	ldrh	r3, [r4, #12]
 8001e1e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001e22:	81a3      	strh	r3, [r4, #12]
 8001e24:	2300      	movs	r3, #0
 8001e26:	6063      	str	r3, [r4, #4]
 8001e28:	6923      	ldr	r3, [r4, #16]
 8001e2a:	6023      	str	r3, [r4, #0]
 8001e2c:	89a3      	ldrh	r3, [r4, #12]
 8001e2e:	f043 0308 	orr.w	r3, r3, #8
 8001e32:	81a3      	strh	r3, [r4, #12]
 8001e34:	6923      	ldr	r3, [r4, #16]
 8001e36:	b94b      	cbnz	r3, 8001e4c <__swsetup_r+0x7c>
 8001e38:	89a3      	ldrh	r3, [r4, #12]
 8001e3a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001e3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e42:	d003      	beq.n	8001e4c <__swsetup_r+0x7c>
 8001e44:	4621      	mov	r1, r4
 8001e46:	4628      	mov	r0, r5
 8001e48:	f000 f850 	bl	8001eec <__smakebuf_r>
 8001e4c:	89a0      	ldrh	r0, [r4, #12]
 8001e4e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001e52:	f010 0301 	ands.w	r3, r0, #1
 8001e56:	d00a      	beq.n	8001e6e <__swsetup_r+0x9e>
 8001e58:	2300      	movs	r3, #0
 8001e5a:	60a3      	str	r3, [r4, #8]
 8001e5c:	6963      	ldr	r3, [r4, #20]
 8001e5e:	425b      	negs	r3, r3
 8001e60:	61a3      	str	r3, [r4, #24]
 8001e62:	6923      	ldr	r3, [r4, #16]
 8001e64:	b943      	cbnz	r3, 8001e78 <__swsetup_r+0xa8>
 8001e66:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001e6a:	d1c4      	bne.n	8001df6 <__swsetup_r+0x26>
 8001e6c:	bd38      	pop	{r3, r4, r5, pc}
 8001e6e:	0781      	lsls	r1, r0, #30
 8001e70:	bf58      	it	pl
 8001e72:	6963      	ldrpl	r3, [r4, #20]
 8001e74:	60a3      	str	r3, [r4, #8]
 8001e76:	e7f4      	b.n	8001e62 <__swsetup_r+0x92>
 8001e78:	2000      	movs	r0, #0
 8001e7a:	e7f7      	b.n	8001e6c <__swsetup_r+0x9c>
 8001e7c:	20000058 	.word	0x20000058

08001e80 <_sbrk_r>:
 8001e80:	b538      	push	{r3, r4, r5, lr}
 8001e82:	4d06      	ldr	r5, [pc, #24]	; (8001e9c <_sbrk_r+0x1c>)
 8001e84:	2300      	movs	r3, #0
 8001e86:	4604      	mov	r4, r0
 8001e88:	4608      	mov	r0, r1
 8001e8a:	602b      	str	r3, [r5, #0]
 8001e8c:	f7ff f83a 	bl	8000f04 <_sbrk>
 8001e90:	1c43      	adds	r3, r0, #1
 8001e92:	d102      	bne.n	8001e9a <_sbrk_r+0x1a>
 8001e94:	682b      	ldr	r3, [r5, #0]
 8001e96:	b103      	cbz	r3, 8001e9a <_sbrk_r+0x1a>
 8001e98:	6023      	str	r3, [r4, #0]
 8001e9a:	bd38      	pop	{r3, r4, r5, pc}
 8001e9c:	200001d0 	.word	0x200001d0

08001ea0 <__swhatbuf_r>:
 8001ea0:	b570      	push	{r4, r5, r6, lr}
 8001ea2:	460c      	mov	r4, r1
 8001ea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001ea8:	2900      	cmp	r1, #0
 8001eaa:	b096      	sub	sp, #88	; 0x58
 8001eac:	4615      	mov	r5, r2
 8001eae:	461e      	mov	r6, r3
 8001eb0:	da0d      	bge.n	8001ece <__swhatbuf_r+0x2e>
 8001eb2:	89a3      	ldrh	r3, [r4, #12]
 8001eb4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001eb8:	f04f 0100 	mov.w	r1, #0
 8001ebc:	bf0c      	ite	eq
 8001ebe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8001ec2:	2340      	movne	r3, #64	; 0x40
 8001ec4:	2000      	movs	r0, #0
 8001ec6:	6031      	str	r1, [r6, #0]
 8001ec8:	602b      	str	r3, [r5, #0]
 8001eca:	b016      	add	sp, #88	; 0x58
 8001ecc:	bd70      	pop	{r4, r5, r6, pc}
 8001ece:	466a      	mov	r2, sp
 8001ed0:	f000 f848 	bl	8001f64 <_fstat_r>
 8001ed4:	2800      	cmp	r0, #0
 8001ed6:	dbec      	blt.n	8001eb2 <__swhatbuf_r+0x12>
 8001ed8:	9901      	ldr	r1, [sp, #4]
 8001eda:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8001ede:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8001ee2:	4259      	negs	r1, r3
 8001ee4:	4159      	adcs	r1, r3
 8001ee6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001eea:	e7eb      	b.n	8001ec4 <__swhatbuf_r+0x24>

08001eec <__smakebuf_r>:
 8001eec:	898b      	ldrh	r3, [r1, #12]
 8001eee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001ef0:	079d      	lsls	r5, r3, #30
 8001ef2:	4606      	mov	r6, r0
 8001ef4:	460c      	mov	r4, r1
 8001ef6:	d507      	bpl.n	8001f08 <__smakebuf_r+0x1c>
 8001ef8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001efc:	6023      	str	r3, [r4, #0]
 8001efe:	6123      	str	r3, [r4, #16]
 8001f00:	2301      	movs	r3, #1
 8001f02:	6163      	str	r3, [r4, #20]
 8001f04:	b002      	add	sp, #8
 8001f06:	bd70      	pop	{r4, r5, r6, pc}
 8001f08:	ab01      	add	r3, sp, #4
 8001f0a:	466a      	mov	r2, sp
 8001f0c:	f7ff ffc8 	bl	8001ea0 <__swhatbuf_r>
 8001f10:	9900      	ldr	r1, [sp, #0]
 8001f12:	4605      	mov	r5, r0
 8001f14:	4630      	mov	r0, r6
 8001f16:	f7ff fb0f 	bl	8001538 <_malloc_r>
 8001f1a:	b948      	cbnz	r0, 8001f30 <__smakebuf_r+0x44>
 8001f1c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001f20:	059a      	lsls	r2, r3, #22
 8001f22:	d4ef      	bmi.n	8001f04 <__smakebuf_r+0x18>
 8001f24:	f023 0303 	bic.w	r3, r3, #3
 8001f28:	f043 0302 	orr.w	r3, r3, #2
 8001f2c:	81a3      	strh	r3, [r4, #12]
 8001f2e:	e7e3      	b.n	8001ef8 <__smakebuf_r+0xc>
 8001f30:	89a3      	ldrh	r3, [r4, #12]
 8001f32:	6020      	str	r0, [r4, #0]
 8001f34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f38:	81a3      	strh	r3, [r4, #12]
 8001f3a:	9b00      	ldr	r3, [sp, #0]
 8001f3c:	6163      	str	r3, [r4, #20]
 8001f3e:	9b01      	ldr	r3, [sp, #4]
 8001f40:	6120      	str	r0, [r4, #16]
 8001f42:	b15b      	cbz	r3, 8001f5c <__smakebuf_r+0x70>
 8001f44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001f48:	4630      	mov	r0, r6
 8001f4a:	f000 f81d 	bl	8001f88 <_isatty_r>
 8001f4e:	b128      	cbz	r0, 8001f5c <__smakebuf_r+0x70>
 8001f50:	89a3      	ldrh	r3, [r4, #12]
 8001f52:	f023 0303 	bic.w	r3, r3, #3
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	81a3      	strh	r3, [r4, #12]
 8001f5c:	89a3      	ldrh	r3, [r4, #12]
 8001f5e:	431d      	orrs	r5, r3
 8001f60:	81a5      	strh	r5, [r4, #12]
 8001f62:	e7cf      	b.n	8001f04 <__smakebuf_r+0x18>

08001f64 <_fstat_r>:
 8001f64:	b538      	push	{r3, r4, r5, lr}
 8001f66:	4d07      	ldr	r5, [pc, #28]	; (8001f84 <_fstat_r+0x20>)
 8001f68:	2300      	movs	r3, #0
 8001f6a:	4604      	mov	r4, r0
 8001f6c:	4608      	mov	r0, r1
 8001f6e:	4611      	mov	r1, r2
 8001f70:	602b      	str	r3, [r5, #0]
 8001f72:	f7fe ff9e 	bl	8000eb2 <_fstat>
 8001f76:	1c43      	adds	r3, r0, #1
 8001f78:	d102      	bne.n	8001f80 <_fstat_r+0x1c>
 8001f7a:	682b      	ldr	r3, [r5, #0]
 8001f7c:	b103      	cbz	r3, 8001f80 <_fstat_r+0x1c>
 8001f7e:	6023      	str	r3, [r4, #0]
 8001f80:	bd38      	pop	{r3, r4, r5, pc}
 8001f82:	bf00      	nop
 8001f84:	200001d0 	.word	0x200001d0

08001f88 <_isatty_r>:
 8001f88:	b538      	push	{r3, r4, r5, lr}
 8001f8a:	4d06      	ldr	r5, [pc, #24]	; (8001fa4 <_isatty_r+0x1c>)
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	4604      	mov	r4, r0
 8001f90:	4608      	mov	r0, r1
 8001f92:	602b      	str	r3, [r5, #0]
 8001f94:	f7fe ff9d 	bl	8000ed2 <_isatty>
 8001f98:	1c43      	adds	r3, r0, #1
 8001f9a:	d102      	bne.n	8001fa2 <_isatty_r+0x1a>
 8001f9c:	682b      	ldr	r3, [r5, #0]
 8001f9e:	b103      	cbz	r3, 8001fa2 <_isatty_r+0x1a>
 8001fa0:	6023      	str	r3, [r4, #0]
 8001fa2:	bd38      	pop	{r3, r4, r5, pc}
 8001fa4:	200001d0 	.word	0x200001d0

08001fa8 <_init>:
 8001fa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001faa:	bf00      	nop
 8001fac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fae:	bc08      	pop	{r3}
 8001fb0:	469e      	mov	lr, r3
 8001fb2:	4770      	bx	lr

08001fb4 <_fini>:
 8001fb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fb6:	bf00      	nop
 8001fb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001fba:	bc08      	pop	{r3}
 8001fbc:	469e      	mov	lr, r3
 8001fbe:	4770      	bx	lr
