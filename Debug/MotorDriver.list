
MotorDriver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001748  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  080018e8  080018e8  000118e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800192c  0800192c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  0800192c  0800192c  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800192c  0800192c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800192c  0800192c  0001192c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001930  08001930  00011930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08001934  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000178  2000005c  08001990  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001d4  08001990  000201d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001ab9  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000079b  00000000  00000000  00021b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000228  00000000  00000000  00022328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000188  00000000  00000000  00022550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000fc07  00000000  00000000  000226d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000273a  00000000  00000000  000322df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00055584  00000000  00000000  00034a19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000ed0  00000000  00000000  00089fa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  0008ae70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080018d0 	.word	0x080018d0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	080018d0 	.word	0x080018d0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
#include "motor_driver.h"



int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0
	uart2_rxtx_init();
 8000286:	f000 fb13 	bl	80008b0 <uart2_rxtx_init>
	Tim2_Ch1_Init();
 800028a:	f000 f859 	bl	8000340 <Tim2_Ch1_Init>
//	Tim4_Ch1_Init();

	Encoder_A_Init();
 800028e:	f000 f97d 	bl	800058c <Encoder_A_Init>
	reset_Encoder_A_counts();
 8000292:	f000 fa51 	bl	8000738 <reset_Encoder_A_counts>
	Motor_A_Forward(50);
 8000296:	2032      	movs	r0, #50	; 0x32
 8000298:	f000 f95c 	bl	8000554 <Motor_A_Forward>
	while(1)
	{
		int pulses = get_Encoder_A_counts();
 800029c:	f000 fa40 	bl	8000720 <get_Encoder_A_counts>
 80002a0:	6078      	str	r0, [r7, #4]
		printf("Pulses: %d\n\n\r", pulses);
 80002a2:	6879      	ldr	r1, [r7, #4]
 80002a4:	4801      	ldr	r0, [pc, #4]	; (80002ac <main+0x2c>)
 80002a6:	f000 fc9d 	bl	8000be4 <iprintf>
	{
 80002aa:	e7f7      	b.n	800029c <main+0x1c>
 80002ac:	080018e8 	.word	0x080018e8

080002b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	4603      	mov	r3, r0
 80002b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	db0b      	blt.n	80002da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002c2:	79fb      	ldrb	r3, [r7, #7]
 80002c4:	f003 021f 	and.w	r2, r3, #31
 80002c8:	4907      	ldr	r1, [pc, #28]	; (80002e8 <__NVIC_EnableIRQ+0x38>)
 80002ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ce:	095b      	lsrs	r3, r3, #5
 80002d0:	2001      	movs	r0, #1
 80002d2:	fa00 f202 	lsl.w	r2, r0, r2
 80002d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002da:	bf00      	nop
 80002dc:	370c      	adds	r7, #12
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	e000e100 	.word	0xe000e100

080002ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002ec:	b480      	push	{r7}
 80002ee:	b083      	sub	sp, #12
 80002f0:	af00      	add	r7, sp, #0
 80002f2:	4603      	mov	r3, r0
 80002f4:	6039      	str	r1, [r7, #0]
 80002f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	db0a      	blt.n	8000316 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000300:	683b      	ldr	r3, [r7, #0]
 8000302:	b2da      	uxtb	r2, r3
 8000304:	490c      	ldr	r1, [pc, #48]	; (8000338 <__NVIC_SetPriority+0x4c>)
 8000306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800030a:	0112      	lsls	r2, r2, #4
 800030c:	b2d2      	uxtb	r2, r2
 800030e:	440b      	add	r3, r1
 8000310:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000314:	e00a      	b.n	800032c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000316:	683b      	ldr	r3, [r7, #0]
 8000318:	b2da      	uxtb	r2, r3
 800031a:	4908      	ldr	r1, [pc, #32]	; (800033c <__NVIC_SetPriority+0x50>)
 800031c:	79fb      	ldrb	r3, [r7, #7]
 800031e:	f003 030f 	and.w	r3, r3, #15
 8000322:	3b04      	subs	r3, #4
 8000324:	0112      	lsls	r2, r2, #4
 8000326:	b2d2      	uxtb	r2, r2
 8000328:	440b      	add	r3, r1
 800032a:	761a      	strb	r2, [r3, #24]
}
 800032c:	bf00      	nop
 800032e:	370c      	adds	r7, #12
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr
 8000338:	e000e100 	.word	0xe000e100
 800033c:	e000ed00 	.word	0xe000ed00

08000340 <Tim2_Ch1_Init>:
	/*Enable counter*/
	TIM2->CR1 |= CR1_CEN;
}

void Tim2_Ch1_Init(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8000344:	4b2a      	ldr	r3, [pc, #168]	; (80003f0 <Tim2_Ch1_Init+0xb0>)
 8000346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000348:	4a29      	ldr	r2, [pc, #164]	; (80003f0 <Tim2_Ch1_Init+0xb0>)
 800034a:	f043 0301 	orr.w	r3, r3, #1
 800034e:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA0 to alternate function mode*/
	GPIOA->MODER &= ~(1U<<0);
 8000350:	4b28      	ldr	r3, [pc, #160]	; (80003f4 <Tim2_Ch1_Init+0xb4>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	4a27      	ldr	r2, [pc, #156]	; (80003f4 <Tim2_Ch1_Init+0xb4>)
 8000356:	f023 0301 	bic.w	r3, r3, #1
 800035a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<1);
 800035c:	4b25      	ldr	r3, [pc, #148]	; (80003f4 <Tim2_Ch1_Init+0xb4>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a24      	ldr	r2, [pc, #144]	; (80003f4 <Tim2_Ch1_Init+0xb4>)
 8000362:	f043 0302 	orr.w	r3, r3, #2
 8000366:	6013      	str	r3, [r2, #0]

	/*Configure the alternate function type to TIM2_CH1*/
	GPIOA->AFR[0] |=  (1U<<0);
 8000368:	4b22      	ldr	r3, [pc, #136]	; (80003f4 <Tim2_Ch1_Init+0xb4>)
 800036a:	6a1b      	ldr	r3, [r3, #32]
 800036c:	4a21      	ldr	r2, [pc, #132]	; (80003f4 <Tim2_Ch1_Init+0xb4>)
 800036e:	f043 0301 	orr.w	r3, r3, #1
 8000372:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<1);
 8000374:	4b1f      	ldr	r3, [pc, #124]	; (80003f4 <Tim2_Ch1_Init+0xb4>)
 8000376:	6a1b      	ldr	r3, [r3, #32]
 8000378:	4a1e      	ldr	r2, [pc, #120]	; (80003f4 <Tim2_Ch1_Init+0xb4>)
 800037a:	f023 0302 	bic.w	r3, r3, #2
 800037e:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<2);
 8000380:	4b1c      	ldr	r3, [pc, #112]	; (80003f4 <Tim2_Ch1_Init+0xb4>)
 8000382:	6a1b      	ldr	r3, [r3, #32]
 8000384:	4a1b      	ldr	r2, [pc, #108]	; (80003f4 <Tim2_Ch1_Init+0xb4>)
 8000386:	f023 0304 	bic.w	r3, r3, #4
 800038a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &= ~(1U<<3);
 800038c:	4b19      	ldr	r3, [pc, #100]	; (80003f4 <Tim2_Ch1_Init+0xb4>)
 800038e:	6a1b      	ldr	r3, [r3, #32]
 8000390:	4a18      	ldr	r2, [pc, #96]	; (80003f4 <Tim2_Ch1_Init+0xb4>)
 8000392:	f023 0308 	bic.w	r3, r3, #8
 8000396:	6213      	str	r3, [r2, #32]

	/*Enable clock access to TIM2*/
	RCC->APB1ENR |= TIM2EN;
 8000398:	4b15      	ldr	r3, [pc, #84]	; (80003f0 <Tim2_Ch1_Init+0xb0>)
 800039a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800039c:	4a14      	ldr	r2, [pc, #80]	; (80003f0 <Tim2_Ch1_Init+0xb0>)
 800039e:	f043 0301 	orr.w	r3, r3, #1
 80003a2:	6413      	str	r3, [r2, #64]	; 0x40

	/*Set prescaler value*/
	TIM2->PSC = TIM_PRESCALER - 1; // 16 000 000 / 8 = 2 000 000Hz
 80003a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003a8:	2207      	movs	r2, #7
 80003aa:	629a      	str	r2, [r3, #40]	; 0x28

	/*Set auto-reload value
	 * By default, this sets the motor frequency to 20kHz, which is a frequency at the edge of the
	 * human hearing spectrum*/
	pwm_set_frequency(ARR_PRESACLER, TIMER2);
 80003ac:	2102      	movs	r1, #2
 80003ae:	2064      	movs	r0, #100	; 0x64
 80003b0:	f000 f822 	bl	80003f8 <pwm_set_frequency>

	/*Set output compare toggle mode*/
	TIM2->CCMR1 = OC1_PWM_MODE1; // Register unique to each channel
 80003b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003b8:	2260      	movs	r2, #96	; 0x60
 80003ba:	619a      	str	r2, [r3, #24]

	/*Set duty cycle of PWM	% of ARR value
	 * By default, the duty cycle is set to 40% of the ARR_PRESCALER*/
	pwm_set_dutycycle(DUTY_CYCLE, TIMER2); // Register unique to each channel
 80003bc:	2102      	movs	r1, #2
 80003be:	2028      	movs	r0, #40	; 0x28
 80003c0:	f000 f838 	bl	8000434 <pwm_set_dutycycle>

	/*Enable Timer 2 Channel 1 in compare mode*/
	TIM2->CCER |= CCER_CC1E; // Register unique to each channel
 80003c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003c8:	6a1b      	ldr	r3, [r3, #32]
 80003ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003ce:	f043 0301 	orr.w	r3, r3, #1
 80003d2:	6213      	str	r3, [r2, #32]

	/*Clear counter*/
	TIM2->CNT = 0;
 80003d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003d8:	2200      	movs	r2, #0
 80003da:	625a      	str	r2, [r3, #36]	; 0x24
	/*Enable counter*/
	TIM2->CR1 |= CR1_CEN;
 80003dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80003e6:	f043 0301 	orr.w	r3, r3, #1
 80003ea:	6013      	str	r3, [r2, #0]
}
 80003ec:	bf00      	nop
 80003ee:	bd80      	pop	{r7, pc}
 80003f0:	40023800 	.word	0x40023800
 80003f4:	40020000 	.word	0x40020000

080003f8 <pwm_set_frequency>:

/*Frequency prescaler dividing down 2Mhz to a usable frequency range
 * 2 000 000 / Freq = Desired Frequency
 */
void pwm_set_frequency(uint32_t Freq, uint32_t timer)
{
 80003f8:	b480      	push	{r7}
 80003fa:	b083      	sub	sp, #12
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
 8000400:	6039      	str	r1, [r7, #0]
	if (timer == 2)
 8000402:	683b      	ldr	r3, [r7, #0]
 8000404:	2b02      	cmp	r3, #2
 8000406:	d105      	bne.n	8000414 <pwm_set_frequency+0x1c>
	{
		TIM2->ARR = Freq - 1;
 8000408:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	3b01      	subs	r3, #1
 8000410:	62d3      	str	r3, [r2, #44]	; 0x2c
	else if (timer == 4)
	{
		TIM4->ARR = Freq - 1;
	}

}
 8000412:	e006      	b.n	8000422 <pwm_set_frequency+0x2a>
	else if (timer == 4)
 8000414:	683b      	ldr	r3, [r7, #0]
 8000416:	2b04      	cmp	r3, #4
 8000418:	d103      	bne.n	8000422 <pwm_set_frequency+0x2a>
		TIM4->ARR = Freq - 1;
 800041a:	4a05      	ldr	r2, [pc, #20]	; (8000430 <pwm_set_frequency+0x38>)
 800041c:	687b      	ldr	r3, [r7, #4]
 800041e:	3b01      	subs	r3, #1
 8000420:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8000422:	bf00      	nop
 8000424:	370c      	adds	r7, #12
 8000426:	46bd      	mov	sp, r7
 8000428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042c:	4770      	bx	lr
 800042e:	bf00      	nop
 8000430:	40000800 	.word	0x40000800

08000434 <pwm_set_dutycycle>:

/*Set the duty cycle of the PWM signal*/
void pwm_set_dutycycle(uint32_t DutyCycle, uint32_t timer)
{
 8000434:	b480      	push	{r7}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
 800043c:	6039      	str	r1, [r7, #0]
	if (timer == 2)
 800043e:	683b      	ldr	r3, [r7, #0]
 8000440:	2b02      	cmp	r3, #2
 8000442:	d105      	bne.n	8000450 <pwm_set_dutycycle+0x1c>
	{
		/*Set duty cycle of Timer 2 channel 1 PWM to % of ARR value*/
		TIM2->CCR1 = DutyCycle - 1;
 8000444:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	3b01      	subs	r3, #1
 800044c:	6353      	str	r3, [r2, #52]	; 0x34
	else if (timer == 4)
	{
		/*Set duty cycle of Timer 4 channel 1 PWM to % of ARR value*/
		TIM4->CCR1 = DutyCycle - 1;
	}
}
 800044e:	e006      	b.n	800045e <pwm_set_dutycycle+0x2a>
	else if (timer == 4)
 8000450:	683b      	ldr	r3, [r7, #0]
 8000452:	2b04      	cmp	r3, #4
 8000454:	d103      	bne.n	800045e <pwm_set_dutycycle+0x2a>
		TIM4->CCR1 = DutyCycle - 1;
 8000456:	4a05      	ldr	r2, [pc, #20]	; (800046c <pwm_set_dutycycle+0x38>)
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	3b01      	subs	r3, #1
 800045c:	6353      	str	r3, [r2, #52]	; 0x34
}
 800045e:	bf00      	nop
 8000460:	370c      	adds	r7, #12
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop
 800046c:	40000800 	.word	0x40000800

08000470 <MotorPin_Init>:

static void MotorPin_Init(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8000474:	4b35      	ldr	r3, [pc, #212]	; (800054c <MotorPin_Init+0xdc>)
 8000476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000478:	4a34      	ldr	r2, [pc, #208]	; (800054c <MotorPin_Init+0xdc>)
 800047a:	f043 0301 	orr.w	r3, r3, #1
 800047e:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA5 to output mode*/
	GPIOA->MODER |= (1U<<10);
 8000480:	4b33      	ldr	r3, [pc, #204]	; (8000550 <MotorPin_Init+0xe0>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	4a32      	ldr	r2, [pc, #200]	; (8000550 <MotorPin_Init+0xe0>)
 8000486:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800048a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U<<11);
 800048c:	4b30      	ldr	r3, [pc, #192]	; (8000550 <MotorPin_Init+0xe0>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	4a2f      	ldr	r2, [pc, #188]	; (8000550 <MotorPin_Init+0xe0>)
 8000492:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000496:	6013      	str	r3, [r2, #0]
	/*Set PA5 to pull down mode*/
	GPIOA->PUPDR &= ~(1U<<10);
 8000498:	4b2d      	ldr	r3, [pc, #180]	; (8000550 <MotorPin_Init+0xe0>)
 800049a:	68db      	ldr	r3, [r3, #12]
 800049c:	4a2c      	ldr	r2, [pc, #176]	; (8000550 <MotorPin_Init+0xe0>)
 800049e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80004a2:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (1U<<11);
 80004a4:	4b2a      	ldr	r3, [pc, #168]	; (8000550 <MotorPin_Init+0xe0>)
 80004a6:	68db      	ldr	r3, [r3, #12]
 80004a8:	4a29      	ldr	r2, [pc, #164]	; (8000550 <MotorPin_Init+0xe0>)
 80004aa:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80004ae:	60d3      	str	r3, [r2, #12]

	/*Set PA4 to output mode*/
	GPIOA->MODER |= (1U<<8);
 80004b0:	4b27      	ldr	r3, [pc, #156]	; (8000550 <MotorPin_Init+0xe0>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	4a26      	ldr	r2, [pc, #152]	; (8000550 <MotorPin_Init+0xe0>)
 80004b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004ba:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U<<9);
 80004bc:	4b24      	ldr	r3, [pc, #144]	; (8000550 <MotorPin_Init+0xe0>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a23      	ldr	r2, [pc, #140]	; (8000550 <MotorPin_Init+0xe0>)
 80004c2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80004c6:	6013      	str	r3, [r2, #0]
	/*Set PA4 to pull down mode*/
	GPIOA->PUPDR &= ~(1U<<8);
 80004c8:	4b21      	ldr	r3, [pc, #132]	; (8000550 <MotorPin_Init+0xe0>)
 80004ca:	68db      	ldr	r3, [r3, #12]
 80004cc:	4a20      	ldr	r2, [pc, #128]	; (8000550 <MotorPin_Init+0xe0>)
 80004ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80004d2:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (1U<<9);
 80004d4:	4b1e      	ldr	r3, [pc, #120]	; (8000550 <MotorPin_Init+0xe0>)
 80004d6:	68db      	ldr	r3, [r3, #12]
 80004d8:	4a1d      	ldr	r2, [pc, #116]	; (8000550 <MotorPin_Init+0xe0>)
 80004da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004de:	60d3      	str	r3, [r2, #12]

	/*Set PA6 to output mode*/
	GPIOA->MODER |= (1U<<12);
 80004e0:	4b1b      	ldr	r3, [pc, #108]	; (8000550 <MotorPin_Init+0xe0>)
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a1a      	ldr	r2, [pc, #104]	; (8000550 <MotorPin_Init+0xe0>)
 80004e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80004ea:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U<<13);
 80004ec:	4b18      	ldr	r3, [pc, #96]	; (8000550 <MotorPin_Init+0xe0>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a17      	ldr	r2, [pc, #92]	; (8000550 <MotorPin_Init+0xe0>)
 80004f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80004f6:	6013      	str	r3, [r2, #0]
	/*Set PA6 to pull down mode*/
	GPIOA->PUPDR &= ~(1U<<12);
 80004f8:	4b15      	ldr	r3, [pc, #84]	; (8000550 <MotorPin_Init+0xe0>)
 80004fa:	68db      	ldr	r3, [r3, #12]
 80004fc:	4a14      	ldr	r2, [pc, #80]	; (8000550 <MotorPin_Init+0xe0>)
 80004fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000502:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (1U<<13);
 8000504:	4b12      	ldr	r3, [pc, #72]	; (8000550 <MotorPin_Init+0xe0>)
 8000506:	68db      	ldr	r3, [r3, #12]
 8000508:	4a11      	ldr	r2, [pc, #68]	; (8000550 <MotorPin_Init+0xe0>)
 800050a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800050e:	60d3      	str	r3, [r2, #12]

	/*Set PA7 to output mode*/
	GPIOA->MODER |= (1U<<14);
 8000510:	4b0f      	ldr	r3, [pc, #60]	; (8000550 <MotorPin_Init+0xe0>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	4a0e      	ldr	r2, [pc, #56]	; (8000550 <MotorPin_Init+0xe0>)
 8000516:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800051a:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U<<15);
 800051c:	4b0c      	ldr	r3, [pc, #48]	; (8000550 <MotorPin_Init+0xe0>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a0b      	ldr	r2, [pc, #44]	; (8000550 <MotorPin_Init+0xe0>)
 8000522:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000526:	6013      	str	r3, [r2, #0]
	/*Set PA7 to pull down mode*/
	GPIOA->PUPDR &= ~(1U<<14);
 8000528:	4b09      	ldr	r3, [pc, #36]	; (8000550 <MotorPin_Init+0xe0>)
 800052a:	68db      	ldr	r3, [r3, #12]
 800052c:	4a08      	ldr	r2, [pc, #32]	; (8000550 <MotorPin_Init+0xe0>)
 800052e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000532:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR |= (1U<<15);
 8000534:	4b06      	ldr	r3, [pc, #24]	; (8000550 <MotorPin_Init+0xe0>)
 8000536:	68db      	ldr	r3, [r3, #12]
 8000538:	4a05      	ldr	r2, [pc, #20]	; (8000550 <MotorPin_Init+0xe0>)
 800053a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800053e:	60d3      	str	r3, [r2, #12]
}
 8000540:	bf00      	nop
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	40023800 	.word	0x40023800
 8000550:	40020000 	.word	0x40020000

08000554 <Motor_A_Forward>:


/* NOTE: Have to add deadtime delay to prevent shoothrough*/
void Motor_A_Forward(uint32_t speed)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	6078      	str	r0, [r7, #4]
	MotorPin_Init();
 800055c:	f7ff ff88 	bl	8000470 <MotorPin_Init>
	GPIOA->ODR |= IN1;
 8000560:	4b09      	ldr	r3, [pc, #36]	; (8000588 <Motor_A_Forward+0x34>)
 8000562:	695b      	ldr	r3, [r3, #20]
 8000564:	4a08      	ldr	r2, [pc, #32]	; (8000588 <Motor_A_Forward+0x34>)
 8000566:	f043 0320 	orr.w	r3, r3, #32
 800056a:	6153      	str	r3, [r2, #20]
	GPIOA->ODR &= ~IN2;
 800056c:	4b06      	ldr	r3, [pc, #24]	; (8000588 <Motor_A_Forward+0x34>)
 800056e:	695b      	ldr	r3, [r3, #20]
 8000570:	4a05      	ldr	r2, [pc, #20]	; (8000588 <Motor_A_Forward+0x34>)
 8000572:	f023 0310 	bic.w	r3, r3, #16
 8000576:	6153      	str	r3, [r2, #20]
	pwm_set_dutycycle(speed, TIMER2);
 8000578:	2102      	movs	r1, #2
 800057a:	6878      	ldr	r0, [r7, #4]
 800057c:	f7ff ff5a 	bl	8000434 <pwm_set_dutycycle>
//	Motor_A_Status();
}
 8000580:	bf00      	nop
 8000582:	3708      	adds	r7, #8
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	40020000 	.word	0x40020000

0800058c <Encoder_A_Init>:
		printf("IN4 ON...\n\r");
	}
}

void Encoder_A_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000590:	b672      	cpsid	i
}
 8000592:	bf00      	nop
	/*Disable global interrupts*/
	__disable_irq();

	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8000594:	4b2f      	ldr	r3, [pc, #188]	; (8000654 <Encoder_A_Init+0xc8>)
 8000596:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000598:	4a2e      	ldr	r2, [pc, #184]	; (8000654 <Encoder_A_Init+0xc8>)
 800059a:	f043 0301 	orr.w	r3, r3, #1
 800059e:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA8 to input mode*/
	GPIOA->MODER &= ~(1U<<16);
 80005a0:	4b2d      	ldr	r3, [pc, #180]	; (8000658 <Encoder_A_Init+0xcc>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a2c      	ldr	r2, [pc, #176]	; (8000658 <Encoder_A_Init+0xcc>)
 80005a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005aa:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &= ~(1U<<17);
 80005ac:	4b2a      	ldr	r3, [pc, #168]	; (8000658 <Encoder_A_Init+0xcc>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a29      	ldr	r2, [pc, #164]	; (8000658 <Encoder_A_Init+0xcc>)
 80005b2:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80005b6:	6013      	str	r3, [r2, #0]
	/*Set PA8 to no pull mode*/
	GPIOA->PUPDR &= ~(1U<<16);
 80005b8:	4b27      	ldr	r3, [pc, #156]	; (8000658 <Encoder_A_Init+0xcc>)
 80005ba:	68db      	ldr	r3, [r3, #12]
 80005bc:	4a26      	ldr	r2, [pc, #152]	; (8000658 <Encoder_A_Init+0xcc>)
 80005be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005c2:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR &= ~(1U<<17);
 80005c4:	4b24      	ldr	r3, [pc, #144]	; (8000658 <Encoder_A_Init+0xcc>)
 80005c6:	68db      	ldr	r3, [r3, #12]
 80005c8:	4a23      	ldr	r2, [pc, #140]	; (8000658 <Encoder_A_Init+0xcc>)
 80005ca:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80005ce:	60d3      	str	r3, [r2, #12]

	/*Set PA9 to input mode*/
	GPIOA->MODER &= ~(1U<<18);
 80005d0:	4b21      	ldr	r3, [pc, #132]	; (8000658 <Encoder_A_Init+0xcc>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a20      	ldr	r2, [pc, #128]	; (8000658 <Encoder_A_Init+0xcc>)
 80005d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005da:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=	~(1U<<19);
 80005dc:	4b1e      	ldr	r3, [pc, #120]	; (8000658 <Encoder_A_Init+0xcc>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a1d      	ldr	r2, [pc, #116]	; (8000658 <Encoder_A_Init+0xcc>)
 80005e2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80005e6:	6013      	str	r3, [r2, #0]
	/*Set PA9 to no pull mode*/
	GPIOA->PUPDR &= ~(1U<<18);
 80005e8:	4b1b      	ldr	r3, [pc, #108]	; (8000658 <Encoder_A_Init+0xcc>)
 80005ea:	68db      	ldr	r3, [r3, #12]
 80005ec:	4a1a      	ldr	r2, [pc, #104]	; (8000658 <Encoder_A_Init+0xcc>)
 80005ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005f2:	60d3      	str	r3, [r2, #12]
	GPIOA->PUPDR &= ~(1U<<19);
 80005f4:	4b18      	ldr	r3, [pc, #96]	; (8000658 <Encoder_A_Init+0xcc>)
 80005f6:	68db      	ldr	r3, [r3, #12]
 80005f8:	4a17      	ldr	r2, [pc, #92]	; (8000658 <Encoder_A_Init+0xcc>)
 80005fa:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80005fe:	60d3      	str	r3, [r2, #12]


	/*Enable clock access to SYSCFG*/
	RCC->APB2ENR |= SYSCFGEN;
 8000600:	4b14      	ldr	r3, [pc, #80]	; (8000654 <Encoder_A_Init+0xc8>)
 8000602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000604:	4a13      	ldr	r2, [pc, #76]	; (8000654 <Encoder_A_Init+0xc8>)
 8000606:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800060a:	6453      	str	r3, [r2, #68]	; 0x44

	/*Select PORTA on EXTI8*/
	SYSCFG->EXTICR[2] &= ~EXTI8; //EXTICR[3:0] chooses from the four configuration registers
 800060c:	4b13      	ldr	r3, [pc, #76]	; (800065c <Encoder_A_Init+0xd0>)
 800060e:	691b      	ldr	r3, [r3, #16]
 8000610:	4a12      	ldr	r2, [pc, #72]	; (800065c <Encoder_A_Init+0xd0>)
 8000612:	f023 030f 	bic.w	r3, r3, #15
 8000616:	6113      	str	r3, [r2, #16]

	/*Unmask EXTI8*/
	EXTI->IMR |= IMR_MR8;
 8000618:	4b11      	ldr	r3, [pc, #68]	; (8000660 <Encoder_A_Init+0xd4>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a10      	ldr	r2, [pc, #64]	; (8000660 <Encoder_A_Init+0xd4>)
 800061e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000622:	6013      	str	r3, [r2, #0]
	/*Select rising edge trigger*/
	EXTI->RTSR |= RTSR_TR8;
 8000624:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <Encoder_A_Init+0xd4>)
 8000626:	689b      	ldr	r3, [r3, #8]
 8000628:	4a0d      	ldr	r2, [pc, #52]	; (8000660 <Encoder_A_Init+0xd4>)
 800062a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800062e:	6093      	str	r3, [r2, #8]
	/*Select falling edge trigger*/
	EXTI->FTSR |= FTSR_TR8;
 8000630:	4b0b      	ldr	r3, [pc, #44]	; (8000660 <Encoder_A_Init+0xd4>)
 8000632:	68db      	ldr	r3, [r3, #12]
 8000634:	4a0a      	ldr	r2, [pc, #40]	; (8000660 <Encoder_A_Init+0xd4>)
 8000636:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800063a:	60d3      	str	r3, [r2, #12]

	/*Set priority of EXTI8 in NVIC*/
	NVIC_SetPriority(EXTI9_5_IRQn, 0);
 800063c:	2100      	movs	r1, #0
 800063e:	2017      	movs	r0, #23
 8000640:	f7ff fe54 	bl	80002ec <__NVIC_SetPriority>
	/*Enable EXTI8 line in NVIC*/
	NVIC_EnableIRQ(EXTI9_5_IRQn); //EXTI9_5_IRQn selects external Line[9:5] interrupts
 8000644:	2017      	movs	r0, #23
 8000646:	f7ff fe33 	bl	80002b0 <__NVIC_EnableIRQ>
  __ASM volatile ("cpsie i" : : : "memory");
 800064a:	b662      	cpsie	i
}
 800064c:	bf00      	nop

	/*Enable global interrupts*/
	__enable_irq();

}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40023800 	.word	0x40023800
 8000658:	40020000 	.word	0x40020000
 800065c:	40013800 	.word	0x40013800
 8000660:	40013c00 	.word	0x40013c00

08000664 <exti8_callback>:

static void exti8_callback(void)
{
 8000664:	b480      	push	{r7}
 8000666:	b083      	sub	sp, #12
 8000668:	af00      	add	r7, sp, #0
	long int last_state = GPIOA->IDR & Encoder_A_Pin8;
 800066a:	4b1f      	ldr	r3, [pc, #124]	; (80006e8 <exti8_callback+0x84>)
 800066c:	691b      	ldr	r3, [r3, #16]
 800066e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000672:	607b      	str	r3, [r7, #4]
	if ((Encoder_A_Pin8_Last == GPIO_PIN_RESET) && (last_state == GPIO_PIN_SET))
 8000674:	4b1d      	ldr	r3, [pc, #116]	; (80006ec <exti8_callback+0x88>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d11c      	bne.n	80006b6 <exti8_callback+0x52>
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	2b20      	cmp	r3, #32
 8000680:	d119      	bne.n	80006b6 <exti8_callback+0x52>
	{
		long int val = GPIOA->IDR & Encoder_A_Pin9;
 8000682:	4b19      	ldr	r3, [pc, #100]	; (80006e8 <exti8_callback+0x84>)
 8000684:	691b      	ldr	r3, [r3, #16]
 8000686:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800068a:	603b      	str	r3, [r7, #0]
		if ((val == GPIO_PIN_RESET) && direction)
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	2b00      	cmp	r3, #0
 8000690:	d107      	bne.n	80006a2 <exti8_callback+0x3e>
 8000692:	4b17      	ldr	r3, [pc, #92]	; (80006f0 <exti8_callback+0x8c>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d003      	beq.n	80006a2 <exti8_callback+0x3e>
		{
			direction = 0; // Reverse
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <exti8_callback+0x8c>)
 800069c:	2200      	movs	r2, #0
 800069e:	701a      	strb	r2, [r3, #0]
 80006a0:	e009      	b.n	80006b6 <exti8_callback+0x52>
		}
		else if ((val == GPIO_PIN_SET) && (direction == 0))
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	2b20      	cmp	r3, #32
 80006a6:	d106      	bne.n	80006b6 <exti8_callback+0x52>
 80006a8:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <exti8_callback+0x8c>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d102      	bne.n	80006b6 <exti8_callback+0x52>
		{
			direction = 1; // Forward
 80006b0:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <exti8_callback+0x8c>)
 80006b2:	2201      	movs	r2, #1
 80006b4:	701a      	strb	r2, [r3, #0]
		}
	}
	Encoder_A_Pin8_Last = last_state;
 80006b6:	4a0d      	ldr	r2, [pc, #52]	; (80006ec <exti8_callback+0x88>)
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	6013      	str	r3, [r2, #0]

	if (!direction)
 80006bc:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <exti8_callback+0x8c>)
 80006be:	781b      	ldrb	r3, [r3, #0]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d105      	bne.n	80006d0 <exti8_callback+0x6c>
		counts++;
 80006c4:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <exti8_callback+0x90>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	3301      	adds	r3, #1
 80006ca:	4a0a      	ldr	r2, [pc, #40]	; (80006f4 <exti8_callback+0x90>)
 80006cc:	6013      	str	r3, [r2, #0]
	else
		counts--;
}
 80006ce:	e004      	b.n	80006da <exti8_callback+0x76>
		counts--;
 80006d0:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <exti8_callback+0x90>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	3b01      	subs	r3, #1
 80006d6:	4a07      	ldr	r2, [pc, #28]	; (80006f4 <exti8_callback+0x90>)
 80006d8:	6013      	str	r3, [r2, #0]
}
 80006da:	bf00      	nop
 80006dc:	370c      	adds	r7, #12
 80006de:	46bd      	mov	sp, r7
 80006e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e4:	4770      	bx	lr
 80006e6:	bf00      	nop
 80006e8:	40020000 	.word	0x40020000
 80006ec:	20000078 	.word	0x20000078
 80006f0:	20000080 	.word	0x20000080
 80006f4:	2000007c 	.word	0x2000007c

080006f8 <EXTI9_5_IRQHandler>:

void EXTI9_5_IRQHandler(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
	if((EXTI->PR & Encoder_A_Pin8)!=0) //If Pending register on Line 8 is triggered
 80006fc:	4b07      	ldr	r3, [pc, #28]	; (800071c <EXTI9_5_IRQHandler+0x24>)
 80006fe:	695b      	ldr	r3, [r3, #20]
 8000700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000704:	2b00      	cmp	r3, #0
 8000706:	d007      	beq.n	8000718 <EXTI9_5_IRQHandler+0x20>
	{
		/*Clear PR flag*/
		EXTI->PR |= Encoder_A_Pin8;
 8000708:	4b04      	ldr	r3, [pc, #16]	; (800071c <EXTI9_5_IRQHandler+0x24>)
 800070a:	695b      	ldr	r3, [r3, #20]
 800070c:	4a03      	ldr	r2, [pc, #12]	; (800071c <EXTI9_5_IRQHandler+0x24>)
 800070e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000712:	6153      	str	r3, [r2, #20]

		exti8_callback();
 8000714:	f7ff ffa6 	bl	8000664 <exti8_callback>
	}

}
 8000718:	bf00      	nop
 800071a:	bd80      	pop	{r7, pc}
 800071c:	40013c00 	.word	0x40013c00

08000720 <get_Encoder_A_counts>:

int get_Encoder_A_counts(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
	return counts;
 8000724:	4b03      	ldr	r3, [pc, #12]	; (8000734 <get_Encoder_A_counts+0x14>)
 8000726:	681b      	ldr	r3, [r3, #0]
}
 8000728:	4618      	mov	r0, r3
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	2000007c 	.word	0x2000007c

08000738 <reset_Encoder_A_counts>:

void reset_Encoder_A_counts(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
	counts = 0;
 800073c:	4b03      	ldr	r3, [pc, #12]	; (800074c <reset_Encoder_A_counts+0x14>)
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
}
 8000742:	bf00      	nop
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr
 800074c:	2000007c 	.word	0x2000007c

08000750 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af00      	add	r7, sp, #0
 8000756:	60f8      	str	r0, [r7, #12]
 8000758:	60b9      	str	r1, [r7, #8]
 800075a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800075c:	2300      	movs	r3, #0
 800075e:	617b      	str	r3, [r7, #20]
 8000760:	e00a      	b.n	8000778 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000762:	f3af 8000 	nop.w
 8000766:	4601      	mov	r1, r0
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	1c5a      	adds	r2, r3, #1
 800076c:	60ba      	str	r2, [r7, #8]
 800076e:	b2ca      	uxtb	r2, r1
 8000770:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000772:	697b      	ldr	r3, [r7, #20]
 8000774:	3301      	adds	r3, #1
 8000776:	617b      	str	r3, [r7, #20]
 8000778:	697a      	ldr	r2, [r7, #20]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	429a      	cmp	r2, r3
 800077e:	dbf0      	blt.n	8000762 <_read+0x12>
  }

  return len;
 8000780:	687b      	ldr	r3, [r7, #4]
}
 8000782:	4618      	mov	r0, r3
 8000784:	3718      	adds	r7, #24
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}

0800078a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800078a:	b580      	push	{r7, lr}
 800078c:	b086      	sub	sp, #24
 800078e:	af00      	add	r7, sp, #0
 8000790:	60f8      	str	r0, [r7, #12]
 8000792:	60b9      	str	r1, [r7, #8]
 8000794:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000796:	2300      	movs	r3, #0
 8000798:	617b      	str	r3, [r7, #20]
 800079a:	e009      	b.n	80007b0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	1c5a      	adds	r2, r3, #1
 80007a0:	60ba      	str	r2, [r7, #8]
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	4618      	mov	r0, r3
 80007a6:	f000 f877 	bl	8000898 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007aa:	697b      	ldr	r3, [r7, #20]
 80007ac:	3301      	adds	r3, #1
 80007ae:	617b      	str	r3, [r7, #20]
 80007b0:	697a      	ldr	r2, [r7, #20]
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	429a      	cmp	r2, r3
 80007b6:	dbf1      	blt.n	800079c <_write+0x12>
  }
  return len;
 80007b8:	687b      	ldr	r3, [r7, #4]
}
 80007ba:	4618      	mov	r0, r3
 80007bc:	3718      	adds	r7, #24
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <_close>:

int _close(int file)
{
 80007c2:	b480      	push	{r7}
 80007c4:	b083      	sub	sp, #12
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80007ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr

080007da <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007da:	b480      	push	{r7}
 80007dc:	b083      	sub	sp, #12
 80007de:	af00      	add	r7, sp, #0
 80007e0:	6078      	str	r0, [r7, #4]
 80007e2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007ea:	605a      	str	r2, [r3, #4]
  return 0;
 80007ec:	2300      	movs	r3, #0
}
 80007ee:	4618      	mov	r0, r3
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr

080007fa <_isatty>:

int _isatty(int file)
{
 80007fa:	b480      	push	{r7}
 80007fc:	b083      	sub	sp, #12
 80007fe:	af00      	add	r7, sp, #0
 8000800:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000802:	2301      	movs	r3, #1
}
 8000804:	4618      	mov	r0, r3
 8000806:	370c      	adds	r7, #12
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr

08000810 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000810:	b480      	push	{r7}
 8000812:	b085      	sub	sp, #20
 8000814:	af00      	add	r7, sp, #0
 8000816:	60f8      	str	r0, [r7, #12]
 8000818:	60b9      	str	r1, [r7, #8]
 800081a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800081c:	2300      	movs	r3, #0
}
 800081e:	4618      	mov	r0, r3
 8000820:	3714      	adds	r7, #20
 8000822:	46bd      	mov	sp, r7
 8000824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000828:	4770      	bx	lr
	...

0800082c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b086      	sub	sp, #24
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000834:	4a14      	ldr	r2, [pc, #80]	; (8000888 <_sbrk+0x5c>)
 8000836:	4b15      	ldr	r3, [pc, #84]	; (800088c <_sbrk+0x60>)
 8000838:	1ad3      	subs	r3, r2, r3
 800083a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800083c:	697b      	ldr	r3, [r7, #20]
 800083e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000840:	4b13      	ldr	r3, [pc, #76]	; (8000890 <_sbrk+0x64>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d102      	bne.n	800084e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000848:	4b11      	ldr	r3, [pc, #68]	; (8000890 <_sbrk+0x64>)
 800084a:	4a12      	ldr	r2, [pc, #72]	; (8000894 <_sbrk+0x68>)
 800084c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800084e:	4b10      	ldr	r3, [pc, #64]	; (8000890 <_sbrk+0x64>)
 8000850:	681a      	ldr	r2, [r3, #0]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	4413      	add	r3, r2
 8000856:	693a      	ldr	r2, [r7, #16]
 8000858:	429a      	cmp	r2, r3
 800085a:	d207      	bcs.n	800086c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800085c:	f000 fa66 	bl	8000d2c <__errno>
 8000860:	4603      	mov	r3, r0
 8000862:	220c      	movs	r2, #12
 8000864:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000866:	f04f 33ff 	mov.w	r3, #4294967295
 800086a:	e009      	b.n	8000880 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800086c:	4b08      	ldr	r3, [pc, #32]	; (8000890 <_sbrk+0x64>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000872:	4b07      	ldr	r3, [pc, #28]	; (8000890 <_sbrk+0x64>)
 8000874:	681a      	ldr	r2, [r3, #0]
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	4413      	add	r3, r2
 800087a:	4a05      	ldr	r2, [pc, #20]	; (8000890 <_sbrk+0x64>)
 800087c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800087e:	68fb      	ldr	r3, [r7, #12]
}
 8000880:	4618      	mov	r0, r3
 8000882:	3718      	adds	r7, #24
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20018000 	.word	0x20018000
 800088c:	00000400 	.word	0x00000400
 8000890:	20000084 	.word	0x20000084
 8000894:	200001d8 	.word	0x200001d8

08000898 <__io_putchar>:
static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate);
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);
void uart2_write(int ch);

int __io_putchar(int ch)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 80008a0:	6878      	ldr	r0, [r7, #4]
 80008a2:	f000 f875 	bl	8000990 <uart2_write>
	return ch;
 80008a6:	687b      	ldr	r3, [r7, #4]
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	3708      	adds	r7, #8
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}

080008b0 <uart2_rxtx_init>:

void uart2_rxtx_init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
	/****************Configure uart  pin using gpio pin***************/
	/*Enable clock access to gpioa */
	RCC->AHB1ENR |= GPIOAEN;
 80008b4:	4b32      	ldr	r3, [pc, #200]	; (8000980 <uart2_rxtx_init+0xd0>)
 80008b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b8:	4a31      	ldr	r2, [pc, #196]	; (8000980 <uart2_rxtx_init+0xd0>)
 80008ba:	f043 0301 	orr.w	r3, r3, #1
 80008be:	6313      	str	r3, [r2, #48]	; 0x30


	/*Set PA2 mode to alternate function mode*/
	GPIOA->MODER &=~ (1U<<4);
 80008c0:	4b30      	ldr	r3, [pc, #192]	; (8000984 <uart2_rxtx_init+0xd4>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a2f      	ldr	r2, [pc, #188]	; (8000984 <uart2_rxtx_init+0xd4>)
 80008c6:	f023 0310 	bic.w	r3, r3, #16
 80008ca:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);
 80008cc:	4b2d      	ldr	r3, [pc, #180]	; (8000984 <uart2_rxtx_init+0xd4>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a2c      	ldr	r2, [pc, #176]	; (8000984 <uart2_rxtx_init+0xd4>)
 80008d2:	f043 0320 	orr.w	r3, r3, #32
 80008d6:	6013      	str	r3, [r2, #0]

	/*Set PA2 alternate function type to UART_TX (AF07)*/
	GPIOA->AFR[0]|= (1U<<8);
 80008d8:	4b2a      	ldr	r3, [pc, #168]	; (8000984 <uart2_rxtx_init+0xd4>)
 80008da:	6a1b      	ldr	r3, [r3, #32]
 80008dc:	4a29      	ldr	r2, [pc, #164]	; (8000984 <uart2_rxtx_init+0xd4>)
 80008de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008e2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<9);
 80008e4:	4b27      	ldr	r3, [pc, #156]	; (8000984 <uart2_rxtx_init+0xd4>)
 80008e6:	6a1b      	ldr	r3, [r3, #32]
 80008e8:	4a26      	ldr	r2, [pc, #152]	; (8000984 <uart2_rxtx_init+0xd4>)
 80008ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008ee:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<10);
 80008f0:	4b24      	ldr	r3, [pc, #144]	; (8000984 <uart2_rxtx_init+0xd4>)
 80008f2:	6a1b      	ldr	r3, [r3, #32]
 80008f4:	4a23      	ldr	r2, [pc, #140]	; (8000984 <uart2_rxtx_init+0xd4>)
 80008f6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008fa:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]&=~ (1U<<11);
 80008fc:	4b21      	ldr	r3, [pc, #132]	; (8000984 <uart2_rxtx_init+0xd4>)
 80008fe:	6a1b      	ldr	r3, [r3, #32]
 8000900:	4a20      	ldr	r2, [pc, #128]	; (8000984 <uart2_rxtx_init+0xd4>)
 8000902:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000906:	6213      	str	r3, [r2, #32]

	/*Set PA3 mode to alternate function mode*/
	GPIOA->MODER &=~ (1U<<6);
 8000908:	4b1e      	ldr	r3, [pc, #120]	; (8000984 <uart2_rxtx_init+0xd4>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a1d      	ldr	r2, [pc, #116]	; (8000984 <uart2_rxtx_init+0xd4>)
 800090e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000912:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<7);
 8000914:	4b1b      	ldr	r3, [pc, #108]	; (8000984 <uart2_rxtx_init+0xd4>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a1a      	ldr	r2, [pc, #104]	; (8000984 <uart2_rxtx_init+0xd4>)
 800091a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800091e:	6013      	str	r3, [r2, #0]

	/*Set PA3 alternate function type to UART_RX (AF07)*/
	GPIOA->AFR[0]|= (1U<<12);
 8000920:	4b18      	ldr	r3, [pc, #96]	; (8000984 <uart2_rxtx_init+0xd4>)
 8000922:	6a1b      	ldr	r3, [r3, #32]
 8000924:	4a17      	ldr	r2, [pc, #92]	; (8000984 <uart2_rxtx_init+0xd4>)
 8000926:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800092a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<13);
 800092c:	4b15      	ldr	r3, [pc, #84]	; (8000984 <uart2_rxtx_init+0xd4>)
 800092e:	6a1b      	ldr	r3, [r3, #32]
 8000930:	4a14      	ldr	r2, [pc, #80]	; (8000984 <uart2_rxtx_init+0xd4>)
 8000932:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000936:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]|= (1U<<14);
 8000938:	4b12      	ldr	r3, [pc, #72]	; (8000984 <uart2_rxtx_init+0xd4>)
 800093a:	6a1b      	ldr	r3, [r3, #32]
 800093c:	4a11      	ldr	r2, [pc, #68]	; (8000984 <uart2_rxtx_init+0xd4>)
 800093e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000942:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0]&=~ (1U<<15);
 8000944:	4b0f      	ldr	r3, [pc, #60]	; (8000984 <uart2_rxtx_init+0xd4>)
 8000946:	6a1b      	ldr	r3, [r3, #32]
 8000948:	4a0e      	ldr	r2, [pc, #56]	; (8000984 <uart2_rxtx_init+0xd4>)
 800094a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800094e:	6213      	str	r3, [r2, #32]



	/****************Configure uart module ***************/
	/*Enable clock access to uart2 */
	RCC->APB1ENR |= USART2EN;
 8000950:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <uart2_rxtx_init+0xd0>)
 8000952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000954:	4a0a      	ldr	r2, [pc, #40]	; (8000980 <uart2_rxtx_init+0xd0>)
 8000956:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800095a:	6413      	str	r3, [r2, #64]	; 0x40

	/*Configure baudrate*/
	uart_set_baudrate(USART2,APB1_CLK,UART_BAUDRATE);
 800095c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000960:	4909      	ldr	r1, [pc, #36]	; (8000988 <uart2_rxtx_init+0xd8>)
 8000962:	480a      	ldr	r0, [pc, #40]	; (800098c <uart2_rxtx_init+0xdc>)
 8000964:	f000 f82c 	bl	80009c0 <uart_set_baudrate>

	/*Configure the transfer direction*/
	USART2->CR1 = (CR1_TE | CR1_RE);
 8000968:	4b08      	ldr	r3, [pc, #32]	; (800098c <uart2_rxtx_init+0xdc>)
 800096a:	220c      	movs	r2, #12
 800096c:	60da      	str	r2, [r3, #12]

	/*Enable uart module*/
	USART2->CR1 |= CR1_UE;
 800096e:	4b07      	ldr	r3, [pc, #28]	; (800098c <uart2_rxtx_init+0xdc>)
 8000970:	68db      	ldr	r3, [r3, #12]
 8000972:	4a06      	ldr	r2, [pc, #24]	; (800098c <uart2_rxtx_init+0xdc>)
 8000974:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000978:	60d3      	str	r3, [r2, #12]

}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	40023800 	.word	0x40023800
 8000984:	40020000 	.word	0x40020000
 8000988:	00f42400 	.word	0x00f42400
 800098c:	40004400 	.word	0x40004400

08000990 <uart2_write>:
	return USART2->DR;

}

void uart2_write(int ch)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
	/*Make sure the transmit data register is empty*/
	while(!(USART2->SR & SR_TXE)){} // Program stays here until condition in while loop no longer holds
 8000998:	bf00      	nop
 800099a:	4b08      	ldr	r3, [pc, #32]	; (80009bc <uart2_write+0x2c>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d0f9      	beq.n	800099a <uart2_write+0xa>

	/*Write to transmit data register*/
	USART2->DR = (ch & 0xFF);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4a04      	ldr	r2, [pc, #16]	; (80009bc <uart2_write+0x2c>)
 80009aa:	b2db      	uxtb	r3, r3
 80009ac:	6053      	str	r3, [r2, #4]
}
 80009ae:	bf00      	nop
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	40004400 	.word	0x40004400

080009c0 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk,  uint32_t BaudRate)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	60f8      	str	r0, [r7, #12]
 80009c8:	60b9      	str	r1, [r7, #8]
 80009ca:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk,BaudRate);
 80009cc:	6879      	ldr	r1, [r7, #4]
 80009ce:	68b8      	ldr	r0, [r7, #8]
 80009d0:	f000 f808 	bl	80009e4 <compute_uart_bd>
 80009d4:	4603      	mov	r3, r0
 80009d6:	461a      	mov	r2, r3
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	609a      	str	r2, [r3, #8]
}
 80009dc:	bf00      	nop
 80009de:	3710      	adds	r7, #16
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <compute_uart_bd>:
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	085a      	lsrs	r2, r3, #1
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	441a      	add	r2, r3
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80009fc:	b29b      	uxth	r3, r3
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	370c      	adds	r7, #12
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr
	...

08000a0c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a0c:	480d      	ldr	r0, [pc, #52]	; (8000a44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a0e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a10:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a14:	480c      	ldr	r0, [pc, #48]	; (8000a48 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a16:	490d      	ldr	r1, [pc, #52]	; (8000a4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a18:	4a0d      	ldr	r2, [pc, #52]	; (8000a50 <LoopForever+0xe>)
  movs r3, #0
 8000a1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a1c:	e002      	b.n	8000a24 <LoopCopyDataInit>

08000a1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a22:	3304      	adds	r3, #4

08000a24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a28:	d3f9      	bcc.n	8000a1e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a2a:	4a0a      	ldr	r2, [pc, #40]	; (8000a54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a2c:	4c0a      	ldr	r4, [pc, #40]	; (8000a58 <LoopForever+0x16>)
  movs r3, #0
 8000a2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a30:	e001      	b.n	8000a36 <LoopFillZerobss>

08000a32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a34:	3204      	adds	r2, #4

08000a36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a38:	d3fb      	bcc.n	8000a32 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a3a:	f000 f97d 	bl	8000d38 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a3e:	f7ff fc1f 	bl	8000280 <main>

08000a42 <LoopForever>:

LoopForever:
  b LoopForever
 8000a42:	e7fe      	b.n	8000a42 <LoopForever>
  ldr   r0, =_estack
 8000a44:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a4c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000a50:	08001934 	.word	0x08001934
  ldr r2, =_sbss
 8000a54:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000a58:	200001d4 	.word	0x200001d4

08000a5c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a5c:	e7fe      	b.n	8000a5c <ADC_IRQHandler>
	...

08000a60 <std>:
 8000a60:	2300      	movs	r3, #0
 8000a62:	b510      	push	{r4, lr}
 8000a64:	4604      	mov	r4, r0
 8000a66:	e9c0 3300 	strd	r3, r3, [r0]
 8000a6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000a6e:	6083      	str	r3, [r0, #8]
 8000a70:	8181      	strh	r1, [r0, #12]
 8000a72:	6643      	str	r3, [r0, #100]	; 0x64
 8000a74:	81c2      	strh	r2, [r0, #14]
 8000a76:	6183      	str	r3, [r0, #24]
 8000a78:	4619      	mov	r1, r3
 8000a7a:	2208      	movs	r2, #8
 8000a7c:	305c      	adds	r0, #92	; 0x5c
 8000a7e:	f000 f906 	bl	8000c8e <memset>
 8000a82:	4b0d      	ldr	r3, [pc, #52]	; (8000ab8 <std+0x58>)
 8000a84:	6263      	str	r3, [r4, #36]	; 0x24
 8000a86:	4b0d      	ldr	r3, [pc, #52]	; (8000abc <std+0x5c>)
 8000a88:	62a3      	str	r3, [r4, #40]	; 0x28
 8000a8a:	4b0d      	ldr	r3, [pc, #52]	; (8000ac0 <std+0x60>)
 8000a8c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000a8e:	4b0d      	ldr	r3, [pc, #52]	; (8000ac4 <std+0x64>)
 8000a90:	6323      	str	r3, [r4, #48]	; 0x30
 8000a92:	4b0d      	ldr	r3, [pc, #52]	; (8000ac8 <std+0x68>)
 8000a94:	6224      	str	r4, [r4, #32]
 8000a96:	429c      	cmp	r4, r3
 8000a98:	d006      	beq.n	8000aa8 <std+0x48>
 8000a9a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8000a9e:	4294      	cmp	r4, r2
 8000aa0:	d002      	beq.n	8000aa8 <std+0x48>
 8000aa2:	33d0      	adds	r3, #208	; 0xd0
 8000aa4:	429c      	cmp	r4, r3
 8000aa6:	d105      	bne.n	8000ab4 <std+0x54>
 8000aa8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000aac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ab0:	f000 b966 	b.w	8000d80 <__retarget_lock_init_recursive>
 8000ab4:	bd10      	pop	{r4, pc}
 8000ab6:	bf00      	nop
 8000ab8:	08000c09 	.word	0x08000c09
 8000abc:	08000c2b 	.word	0x08000c2b
 8000ac0:	08000c63 	.word	0x08000c63
 8000ac4:	08000c87 	.word	0x08000c87
 8000ac8:	20000088 	.word	0x20000088

08000acc <stdio_exit_handler>:
 8000acc:	4a02      	ldr	r2, [pc, #8]	; (8000ad8 <stdio_exit_handler+0xc>)
 8000ace:	4903      	ldr	r1, [pc, #12]	; (8000adc <stdio_exit_handler+0x10>)
 8000ad0:	4803      	ldr	r0, [pc, #12]	; (8000ae0 <stdio_exit_handler+0x14>)
 8000ad2:	f000 b869 	b.w	8000ba8 <_fwalk_sglue>
 8000ad6:	bf00      	nop
 8000ad8:	20000000 	.word	0x20000000
 8000adc:	0800162d 	.word	0x0800162d
 8000ae0:	2000000c 	.word	0x2000000c

08000ae4 <cleanup_stdio>:
 8000ae4:	6841      	ldr	r1, [r0, #4]
 8000ae6:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <cleanup_stdio+0x34>)
 8000ae8:	4299      	cmp	r1, r3
 8000aea:	b510      	push	{r4, lr}
 8000aec:	4604      	mov	r4, r0
 8000aee:	d001      	beq.n	8000af4 <cleanup_stdio+0x10>
 8000af0:	f000 fd9c 	bl	800162c <_fflush_r>
 8000af4:	68a1      	ldr	r1, [r4, #8]
 8000af6:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <cleanup_stdio+0x38>)
 8000af8:	4299      	cmp	r1, r3
 8000afa:	d002      	beq.n	8000b02 <cleanup_stdio+0x1e>
 8000afc:	4620      	mov	r0, r4
 8000afe:	f000 fd95 	bl	800162c <_fflush_r>
 8000b02:	68e1      	ldr	r1, [r4, #12]
 8000b04:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <cleanup_stdio+0x3c>)
 8000b06:	4299      	cmp	r1, r3
 8000b08:	d004      	beq.n	8000b14 <cleanup_stdio+0x30>
 8000b0a:	4620      	mov	r0, r4
 8000b0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b10:	f000 bd8c 	b.w	800162c <_fflush_r>
 8000b14:	bd10      	pop	{r4, pc}
 8000b16:	bf00      	nop
 8000b18:	20000088 	.word	0x20000088
 8000b1c:	200000f0 	.word	0x200000f0
 8000b20:	20000158 	.word	0x20000158

08000b24 <global_stdio_init.part.0>:
 8000b24:	b510      	push	{r4, lr}
 8000b26:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <global_stdio_init.part.0+0x30>)
 8000b28:	4c0b      	ldr	r4, [pc, #44]	; (8000b58 <global_stdio_init.part.0+0x34>)
 8000b2a:	4a0c      	ldr	r2, [pc, #48]	; (8000b5c <global_stdio_init.part.0+0x38>)
 8000b2c:	601a      	str	r2, [r3, #0]
 8000b2e:	4620      	mov	r0, r4
 8000b30:	2200      	movs	r2, #0
 8000b32:	2104      	movs	r1, #4
 8000b34:	f7ff ff94 	bl	8000a60 <std>
 8000b38:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	2109      	movs	r1, #9
 8000b40:	f7ff ff8e 	bl	8000a60 <std>
 8000b44:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8000b48:	2202      	movs	r2, #2
 8000b4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b4e:	2112      	movs	r1, #18
 8000b50:	f7ff bf86 	b.w	8000a60 <std>
 8000b54:	200001c0 	.word	0x200001c0
 8000b58:	20000088 	.word	0x20000088
 8000b5c:	08000acd 	.word	0x08000acd

08000b60 <__sfp_lock_acquire>:
 8000b60:	4801      	ldr	r0, [pc, #4]	; (8000b68 <__sfp_lock_acquire+0x8>)
 8000b62:	f000 b90e 	b.w	8000d82 <__retarget_lock_acquire_recursive>
 8000b66:	bf00      	nop
 8000b68:	200001c9 	.word	0x200001c9

08000b6c <__sfp_lock_release>:
 8000b6c:	4801      	ldr	r0, [pc, #4]	; (8000b74 <__sfp_lock_release+0x8>)
 8000b6e:	f000 b909 	b.w	8000d84 <__retarget_lock_release_recursive>
 8000b72:	bf00      	nop
 8000b74:	200001c9 	.word	0x200001c9

08000b78 <__sinit>:
 8000b78:	b510      	push	{r4, lr}
 8000b7a:	4604      	mov	r4, r0
 8000b7c:	f7ff fff0 	bl	8000b60 <__sfp_lock_acquire>
 8000b80:	6a23      	ldr	r3, [r4, #32]
 8000b82:	b11b      	cbz	r3, 8000b8c <__sinit+0x14>
 8000b84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b88:	f7ff bff0 	b.w	8000b6c <__sfp_lock_release>
 8000b8c:	4b04      	ldr	r3, [pc, #16]	; (8000ba0 <__sinit+0x28>)
 8000b8e:	6223      	str	r3, [r4, #32]
 8000b90:	4b04      	ldr	r3, [pc, #16]	; (8000ba4 <__sinit+0x2c>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d1f5      	bne.n	8000b84 <__sinit+0xc>
 8000b98:	f7ff ffc4 	bl	8000b24 <global_stdio_init.part.0>
 8000b9c:	e7f2      	b.n	8000b84 <__sinit+0xc>
 8000b9e:	bf00      	nop
 8000ba0:	08000ae5 	.word	0x08000ae5
 8000ba4:	200001c0 	.word	0x200001c0

08000ba8 <_fwalk_sglue>:
 8000ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000bac:	4607      	mov	r7, r0
 8000bae:	4688      	mov	r8, r1
 8000bb0:	4614      	mov	r4, r2
 8000bb2:	2600      	movs	r6, #0
 8000bb4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000bb8:	f1b9 0901 	subs.w	r9, r9, #1
 8000bbc:	d505      	bpl.n	8000bca <_fwalk_sglue+0x22>
 8000bbe:	6824      	ldr	r4, [r4, #0]
 8000bc0:	2c00      	cmp	r4, #0
 8000bc2:	d1f7      	bne.n	8000bb4 <_fwalk_sglue+0xc>
 8000bc4:	4630      	mov	r0, r6
 8000bc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000bca:	89ab      	ldrh	r3, [r5, #12]
 8000bcc:	2b01      	cmp	r3, #1
 8000bce:	d907      	bls.n	8000be0 <_fwalk_sglue+0x38>
 8000bd0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	d003      	beq.n	8000be0 <_fwalk_sglue+0x38>
 8000bd8:	4629      	mov	r1, r5
 8000bda:	4638      	mov	r0, r7
 8000bdc:	47c0      	blx	r8
 8000bde:	4306      	orrs	r6, r0
 8000be0:	3568      	adds	r5, #104	; 0x68
 8000be2:	e7e9      	b.n	8000bb8 <_fwalk_sglue+0x10>

08000be4 <iprintf>:
 8000be4:	b40f      	push	{r0, r1, r2, r3}
 8000be6:	b507      	push	{r0, r1, r2, lr}
 8000be8:	4906      	ldr	r1, [pc, #24]	; (8000c04 <iprintf+0x20>)
 8000bea:	ab04      	add	r3, sp, #16
 8000bec:	6808      	ldr	r0, [r1, #0]
 8000bee:	f853 2b04 	ldr.w	r2, [r3], #4
 8000bf2:	6881      	ldr	r1, [r0, #8]
 8000bf4:	9301      	str	r3, [sp, #4]
 8000bf6:	f000 f9e9 	bl	8000fcc <_vfiprintf_r>
 8000bfa:	b003      	add	sp, #12
 8000bfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8000c00:	b004      	add	sp, #16
 8000c02:	4770      	bx	lr
 8000c04:	20000058 	.word	0x20000058

08000c08 <__sread>:
 8000c08:	b510      	push	{r4, lr}
 8000c0a:	460c      	mov	r4, r1
 8000c0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c10:	f000 f868 	bl	8000ce4 <_read_r>
 8000c14:	2800      	cmp	r0, #0
 8000c16:	bfab      	itete	ge
 8000c18:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000c1a:	89a3      	ldrhlt	r3, [r4, #12]
 8000c1c:	181b      	addge	r3, r3, r0
 8000c1e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000c22:	bfac      	ite	ge
 8000c24:	6563      	strge	r3, [r4, #84]	; 0x54
 8000c26:	81a3      	strhlt	r3, [r4, #12]
 8000c28:	bd10      	pop	{r4, pc}

08000c2a <__swrite>:
 8000c2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000c2e:	461f      	mov	r7, r3
 8000c30:	898b      	ldrh	r3, [r1, #12]
 8000c32:	05db      	lsls	r3, r3, #23
 8000c34:	4605      	mov	r5, r0
 8000c36:	460c      	mov	r4, r1
 8000c38:	4616      	mov	r6, r2
 8000c3a:	d505      	bpl.n	8000c48 <__swrite+0x1e>
 8000c3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c40:	2302      	movs	r3, #2
 8000c42:	2200      	movs	r2, #0
 8000c44:	f000 f83c 	bl	8000cc0 <_lseek_r>
 8000c48:	89a3      	ldrh	r3, [r4, #12]
 8000c4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000c4e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000c52:	81a3      	strh	r3, [r4, #12]
 8000c54:	4632      	mov	r2, r6
 8000c56:	463b      	mov	r3, r7
 8000c58:	4628      	mov	r0, r5
 8000c5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000c5e:	f000 b853 	b.w	8000d08 <_write_r>

08000c62 <__sseek>:
 8000c62:	b510      	push	{r4, lr}
 8000c64:	460c      	mov	r4, r1
 8000c66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c6a:	f000 f829 	bl	8000cc0 <_lseek_r>
 8000c6e:	1c43      	adds	r3, r0, #1
 8000c70:	89a3      	ldrh	r3, [r4, #12]
 8000c72:	bf15      	itete	ne
 8000c74:	6560      	strne	r0, [r4, #84]	; 0x54
 8000c76:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000c7a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000c7e:	81a3      	strheq	r3, [r4, #12]
 8000c80:	bf18      	it	ne
 8000c82:	81a3      	strhne	r3, [r4, #12]
 8000c84:	bd10      	pop	{r4, pc}

08000c86 <__sclose>:
 8000c86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000c8a:	f000 b809 	b.w	8000ca0 <_close_r>

08000c8e <memset>:
 8000c8e:	4402      	add	r2, r0
 8000c90:	4603      	mov	r3, r0
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d100      	bne.n	8000c98 <memset+0xa>
 8000c96:	4770      	bx	lr
 8000c98:	f803 1b01 	strb.w	r1, [r3], #1
 8000c9c:	e7f9      	b.n	8000c92 <memset+0x4>
	...

08000ca0 <_close_r>:
 8000ca0:	b538      	push	{r3, r4, r5, lr}
 8000ca2:	4d06      	ldr	r5, [pc, #24]	; (8000cbc <_close_r+0x1c>)
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	4604      	mov	r4, r0
 8000ca8:	4608      	mov	r0, r1
 8000caa:	602b      	str	r3, [r5, #0]
 8000cac:	f7ff fd89 	bl	80007c2 <_close>
 8000cb0:	1c43      	adds	r3, r0, #1
 8000cb2:	d102      	bne.n	8000cba <_close_r+0x1a>
 8000cb4:	682b      	ldr	r3, [r5, #0]
 8000cb6:	b103      	cbz	r3, 8000cba <_close_r+0x1a>
 8000cb8:	6023      	str	r3, [r4, #0]
 8000cba:	bd38      	pop	{r3, r4, r5, pc}
 8000cbc:	200001c4 	.word	0x200001c4

08000cc0 <_lseek_r>:
 8000cc0:	b538      	push	{r3, r4, r5, lr}
 8000cc2:	4d07      	ldr	r5, [pc, #28]	; (8000ce0 <_lseek_r+0x20>)
 8000cc4:	4604      	mov	r4, r0
 8000cc6:	4608      	mov	r0, r1
 8000cc8:	4611      	mov	r1, r2
 8000cca:	2200      	movs	r2, #0
 8000ccc:	602a      	str	r2, [r5, #0]
 8000cce:	461a      	mov	r2, r3
 8000cd0:	f7ff fd9e 	bl	8000810 <_lseek>
 8000cd4:	1c43      	adds	r3, r0, #1
 8000cd6:	d102      	bne.n	8000cde <_lseek_r+0x1e>
 8000cd8:	682b      	ldr	r3, [r5, #0]
 8000cda:	b103      	cbz	r3, 8000cde <_lseek_r+0x1e>
 8000cdc:	6023      	str	r3, [r4, #0]
 8000cde:	bd38      	pop	{r3, r4, r5, pc}
 8000ce0:	200001c4 	.word	0x200001c4

08000ce4 <_read_r>:
 8000ce4:	b538      	push	{r3, r4, r5, lr}
 8000ce6:	4d07      	ldr	r5, [pc, #28]	; (8000d04 <_read_r+0x20>)
 8000ce8:	4604      	mov	r4, r0
 8000cea:	4608      	mov	r0, r1
 8000cec:	4611      	mov	r1, r2
 8000cee:	2200      	movs	r2, #0
 8000cf0:	602a      	str	r2, [r5, #0]
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	f7ff fd2c 	bl	8000750 <_read>
 8000cf8:	1c43      	adds	r3, r0, #1
 8000cfa:	d102      	bne.n	8000d02 <_read_r+0x1e>
 8000cfc:	682b      	ldr	r3, [r5, #0]
 8000cfe:	b103      	cbz	r3, 8000d02 <_read_r+0x1e>
 8000d00:	6023      	str	r3, [r4, #0]
 8000d02:	bd38      	pop	{r3, r4, r5, pc}
 8000d04:	200001c4 	.word	0x200001c4

08000d08 <_write_r>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	4d07      	ldr	r5, [pc, #28]	; (8000d28 <_write_r+0x20>)
 8000d0c:	4604      	mov	r4, r0
 8000d0e:	4608      	mov	r0, r1
 8000d10:	4611      	mov	r1, r2
 8000d12:	2200      	movs	r2, #0
 8000d14:	602a      	str	r2, [r5, #0]
 8000d16:	461a      	mov	r2, r3
 8000d18:	f7ff fd37 	bl	800078a <_write>
 8000d1c:	1c43      	adds	r3, r0, #1
 8000d1e:	d102      	bne.n	8000d26 <_write_r+0x1e>
 8000d20:	682b      	ldr	r3, [r5, #0]
 8000d22:	b103      	cbz	r3, 8000d26 <_write_r+0x1e>
 8000d24:	6023      	str	r3, [r4, #0]
 8000d26:	bd38      	pop	{r3, r4, r5, pc}
 8000d28:	200001c4 	.word	0x200001c4

08000d2c <__errno>:
 8000d2c:	4b01      	ldr	r3, [pc, #4]	; (8000d34 <__errno+0x8>)
 8000d2e:	6818      	ldr	r0, [r3, #0]
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	20000058 	.word	0x20000058

08000d38 <__libc_init_array>:
 8000d38:	b570      	push	{r4, r5, r6, lr}
 8000d3a:	4d0d      	ldr	r5, [pc, #52]	; (8000d70 <__libc_init_array+0x38>)
 8000d3c:	4c0d      	ldr	r4, [pc, #52]	; (8000d74 <__libc_init_array+0x3c>)
 8000d3e:	1b64      	subs	r4, r4, r5
 8000d40:	10a4      	asrs	r4, r4, #2
 8000d42:	2600      	movs	r6, #0
 8000d44:	42a6      	cmp	r6, r4
 8000d46:	d109      	bne.n	8000d5c <__libc_init_array+0x24>
 8000d48:	4d0b      	ldr	r5, [pc, #44]	; (8000d78 <__libc_init_array+0x40>)
 8000d4a:	4c0c      	ldr	r4, [pc, #48]	; (8000d7c <__libc_init_array+0x44>)
 8000d4c:	f000 fdc0 	bl	80018d0 <_init>
 8000d50:	1b64      	subs	r4, r4, r5
 8000d52:	10a4      	asrs	r4, r4, #2
 8000d54:	2600      	movs	r6, #0
 8000d56:	42a6      	cmp	r6, r4
 8000d58:	d105      	bne.n	8000d66 <__libc_init_array+0x2e>
 8000d5a:	bd70      	pop	{r4, r5, r6, pc}
 8000d5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d60:	4798      	blx	r3
 8000d62:	3601      	adds	r6, #1
 8000d64:	e7ee      	b.n	8000d44 <__libc_init_array+0xc>
 8000d66:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d6a:	4798      	blx	r3
 8000d6c:	3601      	adds	r6, #1
 8000d6e:	e7f2      	b.n	8000d56 <__libc_init_array+0x1e>
 8000d70:	0800192c 	.word	0x0800192c
 8000d74:	0800192c 	.word	0x0800192c
 8000d78:	0800192c 	.word	0x0800192c
 8000d7c:	08001930 	.word	0x08001930

08000d80 <__retarget_lock_init_recursive>:
 8000d80:	4770      	bx	lr

08000d82 <__retarget_lock_acquire_recursive>:
 8000d82:	4770      	bx	lr

08000d84 <__retarget_lock_release_recursive>:
 8000d84:	4770      	bx	lr
	...

08000d88 <_free_r>:
 8000d88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000d8a:	2900      	cmp	r1, #0
 8000d8c:	d044      	beq.n	8000e18 <_free_r+0x90>
 8000d8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000d92:	9001      	str	r0, [sp, #4]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	f1a1 0404 	sub.w	r4, r1, #4
 8000d9a:	bfb8      	it	lt
 8000d9c:	18e4      	addlt	r4, r4, r3
 8000d9e:	f000 f8df 	bl	8000f60 <__malloc_lock>
 8000da2:	4a1e      	ldr	r2, [pc, #120]	; (8000e1c <_free_r+0x94>)
 8000da4:	9801      	ldr	r0, [sp, #4]
 8000da6:	6813      	ldr	r3, [r2, #0]
 8000da8:	b933      	cbnz	r3, 8000db8 <_free_r+0x30>
 8000daa:	6063      	str	r3, [r4, #4]
 8000dac:	6014      	str	r4, [r2, #0]
 8000dae:	b003      	add	sp, #12
 8000db0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000db4:	f000 b8da 	b.w	8000f6c <__malloc_unlock>
 8000db8:	42a3      	cmp	r3, r4
 8000dba:	d908      	bls.n	8000dce <_free_r+0x46>
 8000dbc:	6825      	ldr	r5, [r4, #0]
 8000dbe:	1961      	adds	r1, r4, r5
 8000dc0:	428b      	cmp	r3, r1
 8000dc2:	bf01      	itttt	eq
 8000dc4:	6819      	ldreq	r1, [r3, #0]
 8000dc6:	685b      	ldreq	r3, [r3, #4]
 8000dc8:	1949      	addeq	r1, r1, r5
 8000dca:	6021      	streq	r1, [r4, #0]
 8000dcc:	e7ed      	b.n	8000daa <_free_r+0x22>
 8000dce:	461a      	mov	r2, r3
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	b10b      	cbz	r3, 8000dd8 <_free_r+0x50>
 8000dd4:	42a3      	cmp	r3, r4
 8000dd6:	d9fa      	bls.n	8000dce <_free_r+0x46>
 8000dd8:	6811      	ldr	r1, [r2, #0]
 8000dda:	1855      	adds	r5, r2, r1
 8000ddc:	42a5      	cmp	r5, r4
 8000dde:	d10b      	bne.n	8000df8 <_free_r+0x70>
 8000de0:	6824      	ldr	r4, [r4, #0]
 8000de2:	4421      	add	r1, r4
 8000de4:	1854      	adds	r4, r2, r1
 8000de6:	42a3      	cmp	r3, r4
 8000de8:	6011      	str	r1, [r2, #0]
 8000dea:	d1e0      	bne.n	8000dae <_free_r+0x26>
 8000dec:	681c      	ldr	r4, [r3, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	6053      	str	r3, [r2, #4]
 8000df2:	440c      	add	r4, r1
 8000df4:	6014      	str	r4, [r2, #0]
 8000df6:	e7da      	b.n	8000dae <_free_r+0x26>
 8000df8:	d902      	bls.n	8000e00 <_free_r+0x78>
 8000dfa:	230c      	movs	r3, #12
 8000dfc:	6003      	str	r3, [r0, #0]
 8000dfe:	e7d6      	b.n	8000dae <_free_r+0x26>
 8000e00:	6825      	ldr	r5, [r4, #0]
 8000e02:	1961      	adds	r1, r4, r5
 8000e04:	428b      	cmp	r3, r1
 8000e06:	bf04      	itt	eq
 8000e08:	6819      	ldreq	r1, [r3, #0]
 8000e0a:	685b      	ldreq	r3, [r3, #4]
 8000e0c:	6063      	str	r3, [r4, #4]
 8000e0e:	bf04      	itt	eq
 8000e10:	1949      	addeq	r1, r1, r5
 8000e12:	6021      	streq	r1, [r4, #0]
 8000e14:	6054      	str	r4, [r2, #4]
 8000e16:	e7ca      	b.n	8000dae <_free_r+0x26>
 8000e18:	b003      	add	sp, #12
 8000e1a:	bd30      	pop	{r4, r5, pc}
 8000e1c:	200001cc 	.word	0x200001cc

08000e20 <sbrk_aligned>:
 8000e20:	b570      	push	{r4, r5, r6, lr}
 8000e22:	4e0e      	ldr	r6, [pc, #56]	; (8000e5c <sbrk_aligned+0x3c>)
 8000e24:	460c      	mov	r4, r1
 8000e26:	6831      	ldr	r1, [r6, #0]
 8000e28:	4605      	mov	r5, r0
 8000e2a:	b911      	cbnz	r1, 8000e32 <sbrk_aligned+0x12>
 8000e2c:	f000 fcbc 	bl	80017a8 <_sbrk_r>
 8000e30:	6030      	str	r0, [r6, #0]
 8000e32:	4621      	mov	r1, r4
 8000e34:	4628      	mov	r0, r5
 8000e36:	f000 fcb7 	bl	80017a8 <_sbrk_r>
 8000e3a:	1c43      	adds	r3, r0, #1
 8000e3c:	d00a      	beq.n	8000e54 <sbrk_aligned+0x34>
 8000e3e:	1cc4      	adds	r4, r0, #3
 8000e40:	f024 0403 	bic.w	r4, r4, #3
 8000e44:	42a0      	cmp	r0, r4
 8000e46:	d007      	beq.n	8000e58 <sbrk_aligned+0x38>
 8000e48:	1a21      	subs	r1, r4, r0
 8000e4a:	4628      	mov	r0, r5
 8000e4c:	f000 fcac 	bl	80017a8 <_sbrk_r>
 8000e50:	3001      	adds	r0, #1
 8000e52:	d101      	bne.n	8000e58 <sbrk_aligned+0x38>
 8000e54:	f04f 34ff 	mov.w	r4, #4294967295
 8000e58:	4620      	mov	r0, r4
 8000e5a:	bd70      	pop	{r4, r5, r6, pc}
 8000e5c:	200001d0 	.word	0x200001d0

08000e60 <_malloc_r>:
 8000e60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000e64:	1ccd      	adds	r5, r1, #3
 8000e66:	f025 0503 	bic.w	r5, r5, #3
 8000e6a:	3508      	adds	r5, #8
 8000e6c:	2d0c      	cmp	r5, #12
 8000e6e:	bf38      	it	cc
 8000e70:	250c      	movcc	r5, #12
 8000e72:	2d00      	cmp	r5, #0
 8000e74:	4607      	mov	r7, r0
 8000e76:	db01      	blt.n	8000e7c <_malloc_r+0x1c>
 8000e78:	42a9      	cmp	r1, r5
 8000e7a:	d905      	bls.n	8000e88 <_malloc_r+0x28>
 8000e7c:	230c      	movs	r3, #12
 8000e7e:	603b      	str	r3, [r7, #0]
 8000e80:	2600      	movs	r6, #0
 8000e82:	4630      	mov	r0, r6
 8000e84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000e88:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000f5c <_malloc_r+0xfc>
 8000e8c:	f000 f868 	bl	8000f60 <__malloc_lock>
 8000e90:	f8d8 3000 	ldr.w	r3, [r8]
 8000e94:	461c      	mov	r4, r3
 8000e96:	bb5c      	cbnz	r4, 8000ef0 <_malloc_r+0x90>
 8000e98:	4629      	mov	r1, r5
 8000e9a:	4638      	mov	r0, r7
 8000e9c:	f7ff ffc0 	bl	8000e20 <sbrk_aligned>
 8000ea0:	1c43      	adds	r3, r0, #1
 8000ea2:	4604      	mov	r4, r0
 8000ea4:	d155      	bne.n	8000f52 <_malloc_r+0xf2>
 8000ea6:	f8d8 4000 	ldr.w	r4, [r8]
 8000eaa:	4626      	mov	r6, r4
 8000eac:	2e00      	cmp	r6, #0
 8000eae:	d145      	bne.n	8000f3c <_malloc_r+0xdc>
 8000eb0:	2c00      	cmp	r4, #0
 8000eb2:	d048      	beq.n	8000f46 <_malloc_r+0xe6>
 8000eb4:	6823      	ldr	r3, [r4, #0]
 8000eb6:	4631      	mov	r1, r6
 8000eb8:	4638      	mov	r0, r7
 8000eba:	eb04 0903 	add.w	r9, r4, r3
 8000ebe:	f000 fc73 	bl	80017a8 <_sbrk_r>
 8000ec2:	4581      	cmp	r9, r0
 8000ec4:	d13f      	bne.n	8000f46 <_malloc_r+0xe6>
 8000ec6:	6821      	ldr	r1, [r4, #0]
 8000ec8:	1a6d      	subs	r5, r5, r1
 8000eca:	4629      	mov	r1, r5
 8000ecc:	4638      	mov	r0, r7
 8000ece:	f7ff ffa7 	bl	8000e20 <sbrk_aligned>
 8000ed2:	3001      	adds	r0, #1
 8000ed4:	d037      	beq.n	8000f46 <_malloc_r+0xe6>
 8000ed6:	6823      	ldr	r3, [r4, #0]
 8000ed8:	442b      	add	r3, r5
 8000eda:	6023      	str	r3, [r4, #0]
 8000edc:	f8d8 3000 	ldr.w	r3, [r8]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d038      	beq.n	8000f56 <_malloc_r+0xf6>
 8000ee4:	685a      	ldr	r2, [r3, #4]
 8000ee6:	42a2      	cmp	r2, r4
 8000ee8:	d12b      	bne.n	8000f42 <_malloc_r+0xe2>
 8000eea:	2200      	movs	r2, #0
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	e00f      	b.n	8000f10 <_malloc_r+0xb0>
 8000ef0:	6822      	ldr	r2, [r4, #0]
 8000ef2:	1b52      	subs	r2, r2, r5
 8000ef4:	d41f      	bmi.n	8000f36 <_malloc_r+0xd6>
 8000ef6:	2a0b      	cmp	r2, #11
 8000ef8:	d917      	bls.n	8000f2a <_malloc_r+0xca>
 8000efa:	1961      	adds	r1, r4, r5
 8000efc:	42a3      	cmp	r3, r4
 8000efe:	6025      	str	r5, [r4, #0]
 8000f00:	bf18      	it	ne
 8000f02:	6059      	strne	r1, [r3, #4]
 8000f04:	6863      	ldr	r3, [r4, #4]
 8000f06:	bf08      	it	eq
 8000f08:	f8c8 1000 	streq.w	r1, [r8]
 8000f0c:	5162      	str	r2, [r4, r5]
 8000f0e:	604b      	str	r3, [r1, #4]
 8000f10:	4638      	mov	r0, r7
 8000f12:	f104 060b 	add.w	r6, r4, #11
 8000f16:	f000 f829 	bl	8000f6c <__malloc_unlock>
 8000f1a:	f026 0607 	bic.w	r6, r6, #7
 8000f1e:	1d23      	adds	r3, r4, #4
 8000f20:	1af2      	subs	r2, r6, r3
 8000f22:	d0ae      	beq.n	8000e82 <_malloc_r+0x22>
 8000f24:	1b9b      	subs	r3, r3, r6
 8000f26:	50a3      	str	r3, [r4, r2]
 8000f28:	e7ab      	b.n	8000e82 <_malloc_r+0x22>
 8000f2a:	42a3      	cmp	r3, r4
 8000f2c:	6862      	ldr	r2, [r4, #4]
 8000f2e:	d1dd      	bne.n	8000eec <_malloc_r+0x8c>
 8000f30:	f8c8 2000 	str.w	r2, [r8]
 8000f34:	e7ec      	b.n	8000f10 <_malloc_r+0xb0>
 8000f36:	4623      	mov	r3, r4
 8000f38:	6864      	ldr	r4, [r4, #4]
 8000f3a:	e7ac      	b.n	8000e96 <_malloc_r+0x36>
 8000f3c:	4634      	mov	r4, r6
 8000f3e:	6876      	ldr	r6, [r6, #4]
 8000f40:	e7b4      	b.n	8000eac <_malloc_r+0x4c>
 8000f42:	4613      	mov	r3, r2
 8000f44:	e7cc      	b.n	8000ee0 <_malloc_r+0x80>
 8000f46:	230c      	movs	r3, #12
 8000f48:	603b      	str	r3, [r7, #0]
 8000f4a:	4638      	mov	r0, r7
 8000f4c:	f000 f80e 	bl	8000f6c <__malloc_unlock>
 8000f50:	e797      	b.n	8000e82 <_malloc_r+0x22>
 8000f52:	6025      	str	r5, [r4, #0]
 8000f54:	e7dc      	b.n	8000f10 <_malloc_r+0xb0>
 8000f56:	605b      	str	r3, [r3, #4]
 8000f58:	deff      	udf	#255	; 0xff
 8000f5a:	bf00      	nop
 8000f5c:	200001cc 	.word	0x200001cc

08000f60 <__malloc_lock>:
 8000f60:	4801      	ldr	r0, [pc, #4]	; (8000f68 <__malloc_lock+0x8>)
 8000f62:	f7ff bf0e 	b.w	8000d82 <__retarget_lock_acquire_recursive>
 8000f66:	bf00      	nop
 8000f68:	200001c8 	.word	0x200001c8

08000f6c <__malloc_unlock>:
 8000f6c:	4801      	ldr	r0, [pc, #4]	; (8000f74 <__malloc_unlock+0x8>)
 8000f6e:	f7ff bf09 	b.w	8000d84 <__retarget_lock_release_recursive>
 8000f72:	bf00      	nop
 8000f74:	200001c8 	.word	0x200001c8

08000f78 <__sfputc_r>:
 8000f78:	6893      	ldr	r3, [r2, #8]
 8000f7a:	3b01      	subs	r3, #1
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	b410      	push	{r4}
 8000f80:	6093      	str	r3, [r2, #8]
 8000f82:	da08      	bge.n	8000f96 <__sfputc_r+0x1e>
 8000f84:	6994      	ldr	r4, [r2, #24]
 8000f86:	42a3      	cmp	r3, r4
 8000f88:	db01      	blt.n	8000f8e <__sfputc_r+0x16>
 8000f8a:	290a      	cmp	r1, #10
 8000f8c:	d103      	bne.n	8000f96 <__sfputc_r+0x1e>
 8000f8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000f92:	f000 bb73 	b.w	800167c <__swbuf_r>
 8000f96:	6813      	ldr	r3, [r2, #0]
 8000f98:	1c58      	adds	r0, r3, #1
 8000f9a:	6010      	str	r0, [r2, #0]
 8000f9c:	7019      	strb	r1, [r3, #0]
 8000f9e:	4608      	mov	r0, r1
 8000fa0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <__sfputs_r>:
 8000fa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fa8:	4606      	mov	r6, r0
 8000faa:	460f      	mov	r7, r1
 8000fac:	4614      	mov	r4, r2
 8000fae:	18d5      	adds	r5, r2, r3
 8000fb0:	42ac      	cmp	r4, r5
 8000fb2:	d101      	bne.n	8000fb8 <__sfputs_r+0x12>
 8000fb4:	2000      	movs	r0, #0
 8000fb6:	e007      	b.n	8000fc8 <__sfputs_r+0x22>
 8000fb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000fbc:	463a      	mov	r2, r7
 8000fbe:	4630      	mov	r0, r6
 8000fc0:	f7ff ffda 	bl	8000f78 <__sfputc_r>
 8000fc4:	1c43      	adds	r3, r0, #1
 8000fc6:	d1f3      	bne.n	8000fb0 <__sfputs_r+0xa>
 8000fc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000fcc <_vfiprintf_r>:
 8000fcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000fd0:	460d      	mov	r5, r1
 8000fd2:	b09d      	sub	sp, #116	; 0x74
 8000fd4:	4614      	mov	r4, r2
 8000fd6:	4698      	mov	r8, r3
 8000fd8:	4606      	mov	r6, r0
 8000fda:	b118      	cbz	r0, 8000fe4 <_vfiprintf_r+0x18>
 8000fdc:	6a03      	ldr	r3, [r0, #32]
 8000fde:	b90b      	cbnz	r3, 8000fe4 <_vfiprintf_r+0x18>
 8000fe0:	f7ff fdca 	bl	8000b78 <__sinit>
 8000fe4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000fe6:	07d9      	lsls	r1, r3, #31
 8000fe8:	d405      	bmi.n	8000ff6 <_vfiprintf_r+0x2a>
 8000fea:	89ab      	ldrh	r3, [r5, #12]
 8000fec:	059a      	lsls	r2, r3, #22
 8000fee:	d402      	bmi.n	8000ff6 <_vfiprintf_r+0x2a>
 8000ff0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000ff2:	f7ff fec6 	bl	8000d82 <__retarget_lock_acquire_recursive>
 8000ff6:	89ab      	ldrh	r3, [r5, #12]
 8000ff8:	071b      	lsls	r3, r3, #28
 8000ffa:	d501      	bpl.n	8001000 <_vfiprintf_r+0x34>
 8000ffc:	692b      	ldr	r3, [r5, #16]
 8000ffe:	b99b      	cbnz	r3, 8001028 <_vfiprintf_r+0x5c>
 8001000:	4629      	mov	r1, r5
 8001002:	4630      	mov	r0, r6
 8001004:	f000 fb78 	bl	80016f8 <__swsetup_r>
 8001008:	b170      	cbz	r0, 8001028 <_vfiprintf_r+0x5c>
 800100a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800100c:	07dc      	lsls	r4, r3, #31
 800100e:	d504      	bpl.n	800101a <_vfiprintf_r+0x4e>
 8001010:	f04f 30ff 	mov.w	r0, #4294967295
 8001014:	b01d      	add	sp, #116	; 0x74
 8001016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800101a:	89ab      	ldrh	r3, [r5, #12]
 800101c:	0598      	lsls	r0, r3, #22
 800101e:	d4f7      	bmi.n	8001010 <_vfiprintf_r+0x44>
 8001020:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001022:	f7ff feaf 	bl	8000d84 <__retarget_lock_release_recursive>
 8001026:	e7f3      	b.n	8001010 <_vfiprintf_r+0x44>
 8001028:	2300      	movs	r3, #0
 800102a:	9309      	str	r3, [sp, #36]	; 0x24
 800102c:	2320      	movs	r3, #32
 800102e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001032:	f8cd 800c 	str.w	r8, [sp, #12]
 8001036:	2330      	movs	r3, #48	; 0x30
 8001038:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80011ec <_vfiprintf_r+0x220>
 800103c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001040:	f04f 0901 	mov.w	r9, #1
 8001044:	4623      	mov	r3, r4
 8001046:	469a      	mov	sl, r3
 8001048:	f813 2b01 	ldrb.w	r2, [r3], #1
 800104c:	b10a      	cbz	r2, 8001052 <_vfiprintf_r+0x86>
 800104e:	2a25      	cmp	r2, #37	; 0x25
 8001050:	d1f9      	bne.n	8001046 <_vfiprintf_r+0x7a>
 8001052:	ebba 0b04 	subs.w	fp, sl, r4
 8001056:	d00b      	beq.n	8001070 <_vfiprintf_r+0xa4>
 8001058:	465b      	mov	r3, fp
 800105a:	4622      	mov	r2, r4
 800105c:	4629      	mov	r1, r5
 800105e:	4630      	mov	r0, r6
 8001060:	f7ff ffa1 	bl	8000fa6 <__sfputs_r>
 8001064:	3001      	adds	r0, #1
 8001066:	f000 80a9 	beq.w	80011bc <_vfiprintf_r+0x1f0>
 800106a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800106c:	445a      	add	r2, fp
 800106e:	9209      	str	r2, [sp, #36]	; 0x24
 8001070:	f89a 3000 	ldrb.w	r3, [sl]
 8001074:	2b00      	cmp	r3, #0
 8001076:	f000 80a1 	beq.w	80011bc <_vfiprintf_r+0x1f0>
 800107a:	2300      	movs	r3, #0
 800107c:	f04f 32ff 	mov.w	r2, #4294967295
 8001080:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001084:	f10a 0a01 	add.w	sl, sl, #1
 8001088:	9304      	str	r3, [sp, #16]
 800108a:	9307      	str	r3, [sp, #28]
 800108c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001090:	931a      	str	r3, [sp, #104]	; 0x68
 8001092:	4654      	mov	r4, sl
 8001094:	2205      	movs	r2, #5
 8001096:	f814 1b01 	ldrb.w	r1, [r4], #1
 800109a:	4854      	ldr	r0, [pc, #336]	; (80011ec <_vfiprintf_r+0x220>)
 800109c:	f7ff f8a0 	bl	80001e0 <memchr>
 80010a0:	9a04      	ldr	r2, [sp, #16]
 80010a2:	b9d8      	cbnz	r0, 80010dc <_vfiprintf_r+0x110>
 80010a4:	06d1      	lsls	r1, r2, #27
 80010a6:	bf44      	itt	mi
 80010a8:	2320      	movmi	r3, #32
 80010aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80010ae:	0713      	lsls	r3, r2, #28
 80010b0:	bf44      	itt	mi
 80010b2:	232b      	movmi	r3, #43	; 0x2b
 80010b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80010b8:	f89a 3000 	ldrb.w	r3, [sl]
 80010bc:	2b2a      	cmp	r3, #42	; 0x2a
 80010be:	d015      	beq.n	80010ec <_vfiprintf_r+0x120>
 80010c0:	9a07      	ldr	r2, [sp, #28]
 80010c2:	4654      	mov	r4, sl
 80010c4:	2000      	movs	r0, #0
 80010c6:	f04f 0c0a 	mov.w	ip, #10
 80010ca:	4621      	mov	r1, r4
 80010cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80010d0:	3b30      	subs	r3, #48	; 0x30
 80010d2:	2b09      	cmp	r3, #9
 80010d4:	d94d      	bls.n	8001172 <_vfiprintf_r+0x1a6>
 80010d6:	b1b0      	cbz	r0, 8001106 <_vfiprintf_r+0x13a>
 80010d8:	9207      	str	r2, [sp, #28]
 80010da:	e014      	b.n	8001106 <_vfiprintf_r+0x13a>
 80010dc:	eba0 0308 	sub.w	r3, r0, r8
 80010e0:	fa09 f303 	lsl.w	r3, r9, r3
 80010e4:	4313      	orrs	r3, r2
 80010e6:	9304      	str	r3, [sp, #16]
 80010e8:	46a2      	mov	sl, r4
 80010ea:	e7d2      	b.n	8001092 <_vfiprintf_r+0xc6>
 80010ec:	9b03      	ldr	r3, [sp, #12]
 80010ee:	1d19      	adds	r1, r3, #4
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	9103      	str	r1, [sp, #12]
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	bfbb      	ittet	lt
 80010f8:	425b      	neglt	r3, r3
 80010fa:	f042 0202 	orrlt.w	r2, r2, #2
 80010fe:	9307      	strge	r3, [sp, #28]
 8001100:	9307      	strlt	r3, [sp, #28]
 8001102:	bfb8      	it	lt
 8001104:	9204      	strlt	r2, [sp, #16]
 8001106:	7823      	ldrb	r3, [r4, #0]
 8001108:	2b2e      	cmp	r3, #46	; 0x2e
 800110a:	d10c      	bne.n	8001126 <_vfiprintf_r+0x15a>
 800110c:	7863      	ldrb	r3, [r4, #1]
 800110e:	2b2a      	cmp	r3, #42	; 0x2a
 8001110:	d134      	bne.n	800117c <_vfiprintf_r+0x1b0>
 8001112:	9b03      	ldr	r3, [sp, #12]
 8001114:	1d1a      	adds	r2, r3, #4
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	9203      	str	r2, [sp, #12]
 800111a:	2b00      	cmp	r3, #0
 800111c:	bfb8      	it	lt
 800111e:	f04f 33ff 	movlt.w	r3, #4294967295
 8001122:	3402      	adds	r4, #2
 8001124:	9305      	str	r3, [sp, #20]
 8001126:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80011fc <_vfiprintf_r+0x230>
 800112a:	7821      	ldrb	r1, [r4, #0]
 800112c:	2203      	movs	r2, #3
 800112e:	4650      	mov	r0, sl
 8001130:	f7ff f856 	bl	80001e0 <memchr>
 8001134:	b138      	cbz	r0, 8001146 <_vfiprintf_r+0x17a>
 8001136:	9b04      	ldr	r3, [sp, #16]
 8001138:	eba0 000a 	sub.w	r0, r0, sl
 800113c:	2240      	movs	r2, #64	; 0x40
 800113e:	4082      	lsls	r2, r0
 8001140:	4313      	orrs	r3, r2
 8001142:	3401      	adds	r4, #1
 8001144:	9304      	str	r3, [sp, #16]
 8001146:	f814 1b01 	ldrb.w	r1, [r4], #1
 800114a:	4829      	ldr	r0, [pc, #164]	; (80011f0 <_vfiprintf_r+0x224>)
 800114c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001150:	2206      	movs	r2, #6
 8001152:	f7ff f845 	bl	80001e0 <memchr>
 8001156:	2800      	cmp	r0, #0
 8001158:	d03f      	beq.n	80011da <_vfiprintf_r+0x20e>
 800115a:	4b26      	ldr	r3, [pc, #152]	; (80011f4 <_vfiprintf_r+0x228>)
 800115c:	bb1b      	cbnz	r3, 80011a6 <_vfiprintf_r+0x1da>
 800115e:	9b03      	ldr	r3, [sp, #12]
 8001160:	3307      	adds	r3, #7
 8001162:	f023 0307 	bic.w	r3, r3, #7
 8001166:	3308      	adds	r3, #8
 8001168:	9303      	str	r3, [sp, #12]
 800116a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800116c:	443b      	add	r3, r7
 800116e:	9309      	str	r3, [sp, #36]	; 0x24
 8001170:	e768      	b.n	8001044 <_vfiprintf_r+0x78>
 8001172:	fb0c 3202 	mla	r2, ip, r2, r3
 8001176:	460c      	mov	r4, r1
 8001178:	2001      	movs	r0, #1
 800117a:	e7a6      	b.n	80010ca <_vfiprintf_r+0xfe>
 800117c:	2300      	movs	r3, #0
 800117e:	3401      	adds	r4, #1
 8001180:	9305      	str	r3, [sp, #20]
 8001182:	4619      	mov	r1, r3
 8001184:	f04f 0c0a 	mov.w	ip, #10
 8001188:	4620      	mov	r0, r4
 800118a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800118e:	3a30      	subs	r2, #48	; 0x30
 8001190:	2a09      	cmp	r2, #9
 8001192:	d903      	bls.n	800119c <_vfiprintf_r+0x1d0>
 8001194:	2b00      	cmp	r3, #0
 8001196:	d0c6      	beq.n	8001126 <_vfiprintf_r+0x15a>
 8001198:	9105      	str	r1, [sp, #20]
 800119a:	e7c4      	b.n	8001126 <_vfiprintf_r+0x15a>
 800119c:	fb0c 2101 	mla	r1, ip, r1, r2
 80011a0:	4604      	mov	r4, r0
 80011a2:	2301      	movs	r3, #1
 80011a4:	e7f0      	b.n	8001188 <_vfiprintf_r+0x1bc>
 80011a6:	ab03      	add	r3, sp, #12
 80011a8:	9300      	str	r3, [sp, #0]
 80011aa:	462a      	mov	r2, r5
 80011ac:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <_vfiprintf_r+0x22c>)
 80011ae:	a904      	add	r1, sp, #16
 80011b0:	4630      	mov	r0, r6
 80011b2:	f3af 8000 	nop.w
 80011b6:	4607      	mov	r7, r0
 80011b8:	1c78      	adds	r0, r7, #1
 80011ba:	d1d6      	bne.n	800116a <_vfiprintf_r+0x19e>
 80011bc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80011be:	07d9      	lsls	r1, r3, #31
 80011c0:	d405      	bmi.n	80011ce <_vfiprintf_r+0x202>
 80011c2:	89ab      	ldrh	r3, [r5, #12]
 80011c4:	059a      	lsls	r2, r3, #22
 80011c6:	d402      	bmi.n	80011ce <_vfiprintf_r+0x202>
 80011c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80011ca:	f7ff fddb 	bl	8000d84 <__retarget_lock_release_recursive>
 80011ce:	89ab      	ldrh	r3, [r5, #12]
 80011d0:	065b      	lsls	r3, r3, #25
 80011d2:	f53f af1d 	bmi.w	8001010 <_vfiprintf_r+0x44>
 80011d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80011d8:	e71c      	b.n	8001014 <_vfiprintf_r+0x48>
 80011da:	ab03      	add	r3, sp, #12
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	462a      	mov	r2, r5
 80011e0:	4b05      	ldr	r3, [pc, #20]	; (80011f8 <_vfiprintf_r+0x22c>)
 80011e2:	a904      	add	r1, sp, #16
 80011e4:	4630      	mov	r0, r6
 80011e6:	f000 f879 	bl	80012dc <_printf_i>
 80011ea:	e7e4      	b.n	80011b6 <_vfiprintf_r+0x1ea>
 80011ec:	080018f6 	.word	0x080018f6
 80011f0:	08001900 	.word	0x08001900
 80011f4:	00000000 	.word	0x00000000
 80011f8:	08000fa7 	.word	0x08000fa7
 80011fc:	080018fc 	.word	0x080018fc

08001200 <_printf_common>:
 8001200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001204:	4616      	mov	r6, r2
 8001206:	4699      	mov	r9, r3
 8001208:	688a      	ldr	r2, [r1, #8]
 800120a:	690b      	ldr	r3, [r1, #16]
 800120c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001210:	4293      	cmp	r3, r2
 8001212:	bfb8      	it	lt
 8001214:	4613      	movlt	r3, r2
 8001216:	6033      	str	r3, [r6, #0]
 8001218:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800121c:	4607      	mov	r7, r0
 800121e:	460c      	mov	r4, r1
 8001220:	b10a      	cbz	r2, 8001226 <_printf_common+0x26>
 8001222:	3301      	adds	r3, #1
 8001224:	6033      	str	r3, [r6, #0]
 8001226:	6823      	ldr	r3, [r4, #0]
 8001228:	0699      	lsls	r1, r3, #26
 800122a:	bf42      	ittt	mi
 800122c:	6833      	ldrmi	r3, [r6, #0]
 800122e:	3302      	addmi	r3, #2
 8001230:	6033      	strmi	r3, [r6, #0]
 8001232:	6825      	ldr	r5, [r4, #0]
 8001234:	f015 0506 	ands.w	r5, r5, #6
 8001238:	d106      	bne.n	8001248 <_printf_common+0x48>
 800123a:	f104 0a19 	add.w	sl, r4, #25
 800123e:	68e3      	ldr	r3, [r4, #12]
 8001240:	6832      	ldr	r2, [r6, #0]
 8001242:	1a9b      	subs	r3, r3, r2
 8001244:	42ab      	cmp	r3, r5
 8001246:	dc26      	bgt.n	8001296 <_printf_common+0x96>
 8001248:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800124c:	1e13      	subs	r3, r2, #0
 800124e:	6822      	ldr	r2, [r4, #0]
 8001250:	bf18      	it	ne
 8001252:	2301      	movne	r3, #1
 8001254:	0692      	lsls	r2, r2, #26
 8001256:	d42b      	bmi.n	80012b0 <_printf_common+0xb0>
 8001258:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800125c:	4649      	mov	r1, r9
 800125e:	4638      	mov	r0, r7
 8001260:	47c0      	blx	r8
 8001262:	3001      	adds	r0, #1
 8001264:	d01e      	beq.n	80012a4 <_printf_common+0xa4>
 8001266:	6823      	ldr	r3, [r4, #0]
 8001268:	6922      	ldr	r2, [r4, #16]
 800126a:	f003 0306 	and.w	r3, r3, #6
 800126e:	2b04      	cmp	r3, #4
 8001270:	bf02      	ittt	eq
 8001272:	68e5      	ldreq	r5, [r4, #12]
 8001274:	6833      	ldreq	r3, [r6, #0]
 8001276:	1aed      	subeq	r5, r5, r3
 8001278:	68a3      	ldr	r3, [r4, #8]
 800127a:	bf0c      	ite	eq
 800127c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001280:	2500      	movne	r5, #0
 8001282:	4293      	cmp	r3, r2
 8001284:	bfc4      	itt	gt
 8001286:	1a9b      	subgt	r3, r3, r2
 8001288:	18ed      	addgt	r5, r5, r3
 800128a:	2600      	movs	r6, #0
 800128c:	341a      	adds	r4, #26
 800128e:	42b5      	cmp	r5, r6
 8001290:	d11a      	bne.n	80012c8 <_printf_common+0xc8>
 8001292:	2000      	movs	r0, #0
 8001294:	e008      	b.n	80012a8 <_printf_common+0xa8>
 8001296:	2301      	movs	r3, #1
 8001298:	4652      	mov	r2, sl
 800129a:	4649      	mov	r1, r9
 800129c:	4638      	mov	r0, r7
 800129e:	47c0      	blx	r8
 80012a0:	3001      	adds	r0, #1
 80012a2:	d103      	bne.n	80012ac <_printf_common+0xac>
 80012a4:	f04f 30ff 	mov.w	r0, #4294967295
 80012a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012ac:	3501      	adds	r5, #1
 80012ae:	e7c6      	b.n	800123e <_printf_common+0x3e>
 80012b0:	18e1      	adds	r1, r4, r3
 80012b2:	1c5a      	adds	r2, r3, #1
 80012b4:	2030      	movs	r0, #48	; 0x30
 80012b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80012ba:	4422      	add	r2, r4
 80012bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80012c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80012c4:	3302      	adds	r3, #2
 80012c6:	e7c7      	b.n	8001258 <_printf_common+0x58>
 80012c8:	2301      	movs	r3, #1
 80012ca:	4622      	mov	r2, r4
 80012cc:	4649      	mov	r1, r9
 80012ce:	4638      	mov	r0, r7
 80012d0:	47c0      	blx	r8
 80012d2:	3001      	adds	r0, #1
 80012d4:	d0e6      	beq.n	80012a4 <_printf_common+0xa4>
 80012d6:	3601      	adds	r6, #1
 80012d8:	e7d9      	b.n	800128e <_printf_common+0x8e>
	...

080012dc <_printf_i>:
 80012dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80012e0:	7e0f      	ldrb	r7, [r1, #24]
 80012e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80012e4:	2f78      	cmp	r7, #120	; 0x78
 80012e6:	4691      	mov	r9, r2
 80012e8:	4680      	mov	r8, r0
 80012ea:	460c      	mov	r4, r1
 80012ec:	469a      	mov	sl, r3
 80012ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80012f2:	d807      	bhi.n	8001304 <_printf_i+0x28>
 80012f4:	2f62      	cmp	r7, #98	; 0x62
 80012f6:	d80a      	bhi.n	800130e <_printf_i+0x32>
 80012f8:	2f00      	cmp	r7, #0
 80012fa:	f000 80d4 	beq.w	80014a6 <_printf_i+0x1ca>
 80012fe:	2f58      	cmp	r7, #88	; 0x58
 8001300:	f000 80c0 	beq.w	8001484 <_printf_i+0x1a8>
 8001304:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001308:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800130c:	e03a      	b.n	8001384 <_printf_i+0xa8>
 800130e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001312:	2b15      	cmp	r3, #21
 8001314:	d8f6      	bhi.n	8001304 <_printf_i+0x28>
 8001316:	a101      	add	r1, pc, #4	; (adr r1, 800131c <_printf_i+0x40>)
 8001318:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800131c:	08001375 	.word	0x08001375
 8001320:	08001389 	.word	0x08001389
 8001324:	08001305 	.word	0x08001305
 8001328:	08001305 	.word	0x08001305
 800132c:	08001305 	.word	0x08001305
 8001330:	08001305 	.word	0x08001305
 8001334:	08001389 	.word	0x08001389
 8001338:	08001305 	.word	0x08001305
 800133c:	08001305 	.word	0x08001305
 8001340:	08001305 	.word	0x08001305
 8001344:	08001305 	.word	0x08001305
 8001348:	0800148d 	.word	0x0800148d
 800134c:	080013b5 	.word	0x080013b5
 8001350:	08001447 	.word	0x08001447
 8001354:	08001305 	.word	0x08001305
 8001358:	08001305 	.word	0x08001305
 800135c:	080014af 	.word	0x080014af
 8001360:	08001305 	.word	0x08001305
 8001364:	080013b5 	.word	0x080013b5
 8001368:	08001305 	.word	0x08001305
 800136c:	08001305 	.word	0x08001305
 8001370:	0800144f 	.word	0x0800144f
 8001374:	682b      	ldr	r3, [r5, #0]
 8001376:	1d1a      	adds	r2, r3, #4
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	602a      	str	r2, [r5, #0]
 800137c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001380:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001384:	2301      	movs	r3, #1
 8001386:	e09f      	b.n	80014c8 <_printf_i+0x1ec>
 8001388:	6820      	ldr	r0, [r4, #0]
 800138a:	682b      	ldr	r3, [r5, #0]
 800138c:	0607      	lsls	r7, r0, #24
 800138e:	f103 0104 	add.w	r1, r3, #4
 8001392:	6029      	str	r1, [r5, #0]
 8001394:	d501      	bpl.n	800139a <_printf_i+0xbe>
 8001396:	681e      	ldr	r6, [r3, #0]
 8001398:	e003      	b.n	80013a2 <_printf_i+0xc6>
 800139a:	0646      	lsls	r6, r0, #25
 800139c:	d5fb      	bpl.n	8001396 <_printf_i+0xba>
 800139e:	f9b3 6000 	ldrsh.w	r6, [r3]
 80013a2:	2e00      	cmp	r6, #0
 80013a4:	da03      	bge.n	80013ae <_printf_i+0xd2>
 80013a6:	232d      	movs	r3, #45	; 0x2d
 80013a8:	4276      	negs	r6, r6
 80013aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80013ae:	485a      	ldr	r0, [pc, #360]	; (8001518 <_printf_i+0x23c>)
 80013b0:	230a      	movs	r3, #10
 80013b2:	e012      	b.n	80013da <_printf_i+0xfe>
 80013b4:	682b      	ldr	r3, [r5, #0]
 80013b6:	6820      	ldr	r0, [r4, #0]
 80013b8:	1d19      	adds	r1, r3, #4
 80013ba:	6029      	str	r1, [r5, #0]
 80013bc:	0605      	lsls	r5, r0, #24
 80013be:	d501      	bpl.n	80013c4 <_printf_i+0xe8>
 80013c0:	681e      	ldr	r6, [r3, #0]
 80013c2:	e002      	b.n	80013ca <_printf_i+0xee>
 80013c4:	0641      	lsls	r1, r0, #25
 80013c6:	d5fb      	bpl.n	80013c0 <_printf_i+0xe4>
 80013c8:	881e      	ldrh	r6, [r3, #0]
 80013ca:	4853      	ldr	r0, [pc, #332]	; (8001518 <_printf_i+0x23c>)
 80013cc:	2f6f      	cmp	r7, #111	; 0x6f
 80013ce:	bf0c      	ite	eq
 80013d0:	2308      	moveq	r3, #8
 80013d2:	230a      	movne	r3, #10
 80013d4:	2100      	movs	r1, #0
 80013d6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80013da:	6865      	ldr	r5, [r4, #4]
 80013dc:	60a5      	str	r5, [r4, #8]
 80013de:	2d00      	cmp	r5, #0
 80013e0:	bfa2      	ittt	ge
 80013e2:	6821      	ldrge	r1, [r4, #0]
 80013e4:	f021 0104 	bicge.w	r1, r1, #4
 80013e8:	6021      	strge	r1, [r4, #0]
 80013ea:	b90e      	cbnz	r6, 80013f0 <_printf_i+0x114>
 80013ec:	2d00      	cmp	r5, #0
 80013ee:	d04b      	beq.n	8001488 <_printf_i+0x1ac>
 80013f0:	4615      	mov	r5, r2
 80013f2:	fbb6 f1f3 	udiv	r1, r6, r3
 80013f6:	fb03 6711 	mls	r7, r3, r1, r6
 80013fa:	5dc7      	ldrb	r7, [r0, r7]
 80013fc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001400:	4637      	mov	r7, r6
 8001402:	42bb      	cmp	r3, r7
 8001404:	460e      	mov	r6, r1
 8001406:	d9f4      	bls.n	80013f2 <_printf_i+0x116>
 8001408:	2b08      	cmp	r3, #8
 800140a:	d10b      	bne.n	8001424 <_printf_i+0x148>
 800140c:	6823      	ldr	r3, [r4, #0]
 800140e:	07de      	lsls	r6, r3, #31
 8001410:	d508      	bpl.n	8001424 <_printf_i+0x148>
 8001412:	6923      	ldr	r3, [r4, #16]
 8001414:	6861      	ldr	r1, [r4, #4]
 8001416:	4299      	cmp	r1, r3
 8001418:	bfde      	ittt	le
 800141a:	2330      	movle	r3, #48	; 0x30
 800141c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001420:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001424:	1b52      	subs	r2, r2, r5
 8001426:	6122      	str	r2, [r4, #16]
 8001428:	f8cd a000 	str.w	sl, [sp]
 800142c:	464b      	mov	r3, r9
 800142e:	aa03      	add	r2, sp, #12
 8001430:	4621      	mov	r1, r4
 8001432:	4640      	mov	r0, r8
 8001434:	f7ff fee4 	bl	8001200 <_printf_common>
 8001438:	3001      	adds	r0, #1
 800143a:	d14a      	bne.n	80014d2 <_printf_i+0x1f6>
 800143c:	f04f 30ff 	mov.w	r0, #4294967295
 8001440:	b004      	add	sp, #16
 8001442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001446:	6823      	ldr	r3, [r4, #0]
 8001448:	f043 0320 	orr.w	r3, r3, #32
 800144c:	6023      	str	r3, [r4, #0]
 800144e:	4833      	ldr	r0, [pc, #204]	; (800151c <_printf_i+0x240>)
 8001450:	2778      	movs	r7, #120	; 0x78
 8001452:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8001456:	6823      	ldr	r3, [r4, #0]
 8001458:	6829      	ldr	r1, [r5, #0]
 800145a:	061f      	lsls	r7, r3, #24
 800145c:	f851 6b04 	ldr.w	r6, [r1], #4
 8001460:	d402      	bmi.n	8001468 <_printf_i+0x18c>
 8001462:	065f      	lsls	r7, r3, #25
 8001464:	bf48      	it	mi
 8001466:	b2b6      	uxthmi	r6, r6
 8001468:	07df      	lsls	r7, r3, #31
 800146a:	bf48      	it	mi
 800146c:	f043 0320 	orrmi.w	r3, r3, #32
 8001470:	6029      	str	r1, [r5, #0]
 8001472:	bf48      	it	mi
 8001474:	6023      	strmi	r3, [r4, #0]
 8001476:	b91e      	cbnz	r6, 8001480 <_printf_i+0x1a4>
 8001478:	6823      	ldr	r3, [r4, #0]
 800147a:	f023 0320 	bic.w	r3, r3, #32
 800147e:	6023      	str	r3, [r4, #0]
 8001480:	2310      	movs	r3, #16
 8001482:	e7a7      	b.n	80013d4 <_printf_i+0xf8>
 8001484:	4824      	ldr	r0, [pc, #144]	; (8001518 <_printf_i+0x23c>)
 8001486:	e7e4      	b.n	8001452 <_printf_i+0x176>
 8001488:	4615      	mov	r5, r2
 800148a:	e7bd      	b.n	8001408 <_printf_i+0x12c>
 800148c:	682b      	ldr	r3, [r5, #0]
 800148e:	6826      	ldr	r6, [r4, #0]
 8001490:	6961      	ldr	r1, [r4, #20]
 8001492:	1d18      	adds	r0, r3, #4
 8001494:	6028      	str	r0, [r5, #0]
 8001496:	0635      	lsls	r5, r6, #24
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	d501      	bpl.n	80014a0 <_printf_i+0x1c4>
 800149c:	6019      	str	r1, [r3, #0]
 800149e:	e002      	b.n	80014a6 <_printf_i+0x1ca>
 80014a0:	0670      	lsls	r0, r6, #25
 80014a2:	d5fb      	bpl.n	800149c <_printf_i+0x1c0>
 80014a4:	8019      	strh	r1, [r3, #0]
 80014a6:	2300      	movs	r3, #0
 80014a8:	6123      	str	r3, [r4, #16]
 80014aa:	4615      	mov	r5, r2
 80014ac:	e7bc      	b.n	8001428 <_printf_i+0x14c>
 80014ae:	682b      	ldr	r3, [r5, #0]
 80014b0:	1d1a      	adds	r2, r3, #4
 80014b2:	602a      	str	r2, [r5, #0]
 80014b4:	681d      	ldr	r5, [r3, #0]
 80014b6:	6862      	ldr	r2, [r4, #4]
 80014b8:	2100      	movs	r1, #0
 80014ba:	4628      	mov	r0, r5
 80014bc:	f7fe fe90 	bl	80001e0 <memchr>
 80014c0:	b108      	cbz	r0, 80014c6 <_printf_i+0x1ea>
 80014c2:	1b40      	subs	r0, r0, r5
 80014c4:	6060      	str	r0, [r4, #4]
 80014c6:	6863      	ldr	r3, [r4, #4]
 80014c8:	6123      	str	r3, [r4, #16]
 80014ca:	2300      	movs	r3, #0
 80014cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80014d0:	e7aa      	b.n	8001428 <_printf_i+0x14c>
 80014d2:	6923      	ldr	r3, [r4, #16]
 80014d4:	462a      	mov	r2, r5
 80014d6:	4649      	mov	r1, r9
 80014d8:	4640      	mov	r0, r8
 80014da:	47d0      	blx	sl
 80014dc:	3001      	adds	r0, #1
 80014de:	d0ad      	beq.n	800143c <_printf_i+0x160>
 80014e0:	6823      	ldr	r3, [r4, #0]
 80014e2:	079b      	lsls	r3, r3, #30
 80014e4:	d413      	bmi.n	800150e <_printf_i+0x232>
 80014e6:	68e0      	ldr	r0, [r4, #12]
 80014e8:	9b03      	ldr	r3, [sp, #12]
 80014ea:	4298      	cmp	r0, r3
 80014ec:	bfb8      	it	lt
 80014ee:	4618      	movlt	r0, r3
 80014f0:	e7a6      	b.n	8001440 <_printf_i+0x164>
 80014f2:	2301      	movs	r3, #1
 80014f4:	4632      	mov	r2, r6
 80014f6:	4649      	mov	r1, r9
 80014f8:	4640      	mov	r0, r8
 80014fa:	47d0      	blx	sl
 80014fc:	3001      	adds	r0, #1
 80014fe:	d09d      	beq.n	800143c <_printf_i+0x160>
 8001500:	3501      	adds	r5, #1
 8001502:	68e3      	ldr	r3, [r4, #12]
 8001504:	9903      	ldr	r1, [sp, #12]
 8001506:	1a5b      	subs	r3, r3, r1
 8001508:	42ab      	cmp	r3, r5
 800150a:	dcf2      	bgt.n	80014f2 <_printf_i+0x216>
 800150c:	e7eb      	b.n	80014e6 <_printf_i+0x20a>
 800150e:	2500      	movs	r5, #0
 8001510:	f104 0619 	add.w	r6, r4, #25
 8001514:	e7f5      	b.n	8001502 <_printf_i+0x226>
 8001516:	bf00      	nop
 8001518:	08001907 	.word	0x08001907
 800151c:	08001918 	.word	0x08001918

08001520 <__sflush_r>:
 8001520:	898a      	ldrh	r2, [r1, #12]
 8001522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001526:	4605      	mov	r5, r0
 8001528:	0710      	lsls	r0, r2, #28
 800152a:	460c      	mov	r4, r1
 800152c:	d458      	bmi.n	80015e0 <__sflush_r+0xc0>
 800152e:	684b      	ldr	r3, [r1, #4]
 8001530:	2b00      	cmp	r3, #0
 8001532:	dc05      	bgt.n	8001540 <__sflush_r+0x20>
 8001534:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001536:	2b00      	cmp	r3, #0
 8001538:	dc02      	bgt.n	8001540 <__sflush_r+0x20>
 800153a:	2000      	movs	r0, #0
 800153c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001540:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001542:	2e00      	cmp	r6, #0
 8001544:	d0f9      	beq.n	800153a <__sflush_r+0x1a>
 8001546:	2300      	movs	r3, #0
 8001548:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800154c:	682f      	ldr	r7, [r5, #0]
 800154e:	6a21      	ldr	r1, [r4, #32]
 8001550:	602b      	str	r3, [r5, #0]
 8001552:	d032      	beq.n	80015ba <__sflush_r+0x9a>
 8001554:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001556:	89a3      	ldrh	r3, [r4, #12]
 8001558:	075a      	lsls	r2, r3, #29
 800155a:	d505      	bpl.n	8001568 <__sflush_r+0x48>
 800155c:	6863      	ldr	r3, [r4, #4]
 800155e:	1ac0      	subs	r0, r0, r3
 8001560:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001562:	b10b      	cbz	r3, 8001568 <__sflush_r+0x48>
 8001564:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001566:	1ac0      	subs	r0, r0, r3
 8001568:	2300      	movs	r3, #0
 800156a:	4602      	mov	r2, r0
 800156c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800156e:	6a21      	ldr	r1, [r4, #32]
 8001570:	4628      	mov	r0, r5
 8001572:	47b0      	blx	r6
 8001574:	1c43      	adds	r3, r0, #1
 8001576:	89a3      	ldrh	r3, [r4, #12]
 8001578:	d106      	bne.n	8001588 <__sflush_r+0x68>
 800157a:	6829      	ldr	r1, [r5, #0]
 800157c:	291d      	cmp	r1, #29
 800157e:	d82b      	bhi.n	80015d8 <__sflush_r+0xb8>
 8001580:	4a29      	ldr	r2, [pc, #164]	; (8001628 <__sflush_r+0x108>)
 8001582:	410a      	asrs	r2, r1
 8001584:	07d6      	lsls	r6, r2, #31
 8001586:	d427      	bmi.n	80015d8 <__sflush_r+0xb8>
 8001588:	2200      	movs	r2, #0
 800158a:	6062      	str	r2, [r4, #4]
 800158c:	04d9      	lsls	r1, r3, #19
 800158e:	6922      	ldr	r2, [r4, #16]
 8001590:	6022      	str	r2, [r4, #0]
 8001592:	d504      	bpl.n	800159e <__sflush_r+0x7e>
 8001594:	1c42      	adds	r2, r0, #1
 8001596:	d101      	bne.n	800159c <__sflush_r+0x7c>
 8001598:	682b      	ldr	r3, [r5, #0]
 800159a:	b903      	cbnz	r3, 800159e <__sflush_r+0x7e>
 800159c:	6560      	str	r0, [r4, #84]	; 0x54
 800159e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80015a0:	602f      	str	r7, [r5, #0]
 80015a2:	2900      	cmp	r1, #0
 80015a4:	d0c9      	beq.n	800153a <__sflush_r+0x1a>
 80015a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80015aa:	4299      	cmp	r1, r3
 80015ac:	d002      	beq.n	80015b4 <__sflush_r+0x94>
 80015ae:	4628      	mov	r0, r5
 80015b0:	f7ff fbea 	bl	8000d88 <_free_r>
 80015b4:	2000      	movs	r0, #0
 80015b6:	6360      	str	r0, [r4, #52]	; 0x34
 80015b8:	e7c0      	b.n	800153c <__sflush_r+0x1c>
 80015ba:	2301      	movs	r3, #1
 80015bc:	4628      	mov	r0, r5
 80015be:	47b0      	blx	r6
 80015c0:	1c41      	adds	r1, r0, #1
 80015c2:	d1c8      	bne.n	8001556 <__sflush_r+0x36>
 80015c4:	682b      	ldr	r3, [r5, #0]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d0c5      	beq.n	8001556 <__sflush_r+0x36>
 80015ca:	2b1d      	cmp	r3, #29
 80015cc:	d001      	beq.n	80015d2 <__sflush_r+0xb2>
 80015ce:	2b16      	cmp	r3, #22
 80015d0:	d101      	bne.n	80015d6 <__sflush_r+0xb6>
 80015d2:	602f      	str	r7, [r5, #0]
 80015d4:	e7b1      	b.n	800153a <__sflush_r+0x1a>
 80015d6:	89a3      	ldrh	r3, [r4, #12]
 80015d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80015dc:	81a3      	strh	r3, [r4, #12]
 80015de:	e7ad      	b.n	800153c <__sflush_r+0x1c>
 80015e0:	690f      	ldr	r7, [r1, #16]
 80015e2:	2f00      	cmp	r7, #0
 80015e4:	d0a9      	beq.n	800153a <__sflush_r+0x1a>
 80015e6:	0793      	lsls	r3, r2, #30
 80015e8:	680e      	ldr	r6, [r1, #0]
 80015ea:	bf08      	it	eq
 80015ec:	694b      	ldreq	r3, [r1, #20]
 80015ee:	600f      	str	r7, [r1, #0]
 80015f0:	bf18      	it	ne
 80015f2:	2300      	movne	r3, #0
 80015f4:	eba6 0807 	sub.w	r8, r6, r7
 80015f8:	608b      	str	r3, [r1, #8]
 80015fa:	f1b8 0f00 	cmp.w	r8, #0
 80015fe:	dd9c      	ble.n	800153a <__sflush_r+0x1a>
 8001600:	6a21      	ldr	r1, [r4, #32]
 8001602:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001604:	4643      	mov	r3, r8
 8001606:	463a      	mov	r2, r7
 8001608:	4628      	mov	r0, r5
 800160a:	47b0      	blx	r6
 800160c:	2800      	cmp	r0, #0
 800160e:	dc06      	bgt.n	800161e <__sflush_r+0xfe>
 8001610:	89a3      	ldrh	r3, [r4, #12]
 8001612:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001616:	81a3      	strh	r3, [r4, #12]
 8001618:	f04f 30ff 	mov.w	r0, #4294967295
 800161c:	e78e      	b.n	800153c <__sflush_r+0x1c>
 800161e:	4407      	add	r7, r0
 8001620:	eba8 0800 	sub.w	r8, r8, r0
 8001624:	e7e9      	b.n	80015fa <__sflush_r+0xda>
 8001626:	bf00      	nop
 8001628:	dfbffffe 	.word	0xdfbffffe

0800162c <_fflush_r>:
 800162c:	b538      	push	{r3, r4, r5, lr}
 800162e:	690b      	ldr	r3, [r1, #16]
 8001630:	4605      	mov	r5, r0
 8001632:	460c      	mov	r4, r1
 8001634:	b913      	cbnz	r3, 800163c <_fflush_r+0x10>
 8001636:	2500      	movs	r5, #0
 8001638:	4628      	mov	r0, r5
 800163a:	bd38      	pop	{r3, r4, r5, pc}
 800163c:	b118      	cbz	r0, 8001646 <_fflush_r+0x1a>
 800163e:	6a03      	ldr	r3, [r0, #32]
 8001640:	b90b      	cbnz	r3, 8001646 <_fflush_r+0x1a>
 8001642:	f7ff fa99 	bl	8000b78 <__sinit>
 8001646:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d0f3      	beq.n	8001636 <_fflush_r+0xa>
 800164e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001650:	07d0      	lsls	r0, r2, #31
 8001652:	d404      	bmi.n	800165e <_fflush_r+0x32>
 8001654:	0599      	lsls	r1, r3, #22
 8001656:	d402      	bmi.n	800165e <_fflush_r+0x32>
 8001658:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800165a:	f7ff fb92 	bl	8000d82 <__retarget_lock_acquire_recursive>
 800165e:	4628      	mov	r0, r5
 8001660:	4621      	mov	r1, r4
 8001662:	f7ff ff5d 	bl	8001520 <__sflush_r>
 8001666:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001668:	07da      	lsls	r2, r3, #31
 800166a:	4605      	mov	r5, r0
 800166c:	d4e4      	bmi.n	8001638 <_fflush_r+0xc>
 800166e:	89a3      	ldrh	r3, [r4, #12]
 8001670:	059b      	lsls	r3, r3, #22
 8001672:	d4e1      	bmi.n	8001638 <_fflush_r+0xc>
 8001674:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001676:	f7ff fb85 	bl	8000d84 <__retarget_lock_release_recursive>
 800167a:	e7dd      	b.n	8001638 <_fflush_r+0xc>

0800167c <__swbuf_r>:
 800167c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800167e:	460e      	mov	r6, r1
 8001680:	4614      	mov	r4, r2
 8001682:	4605      	mov	r5, r0
 8001684:	b118      	cbz	r0, 800168e <__swbuf_r+0x12>
 8001686:	6a03      	ldr	r3, [r0, #32]
 8001688:	b90b      	cbnz	r3, 800168e <__swbuf_r+0x12>
 800168a:	f7ff fa75 	bl	8000b78 <__sinit>
 800168e:	69a3      	ldr	r3, [r4, #24]
 8001690:	60a3      	str	r3, [r4, #8]
 8001692:	89a3      	ldrh	r3, [r4, #12]
 8001694:	071a      	lsls	r2, r3, #28
 8001696:	d525      	bpl.n	80016e4 <__swbuf_r+0x68>
 8001698:	6923      	ldr	r3, [r4, #16]
 800169a:	b31b      	cbz	r3, 80016e4 <__swbuf_r+0x68>
 800169c:	6823      	ldr	r3, [r4, #0]
 800169e:	6922      	ldr	r2, [r4, #16]
 80016a0:	1a98      	subs	r0, r3, r2
 80016a2:	6963      	ldr	r3, [r4, #20]
 80016a4:	b2f6      	uxtb	r6, r6
 80016a6:	4283      	cmp	r3, r0
 80016a8:	4637      	mov	r7, r6
 80016aa:	dc04      	bgt.n	80016b6 <__swbuf_r+0x3a>
 80016ac:	4621      	mov	r1, r4
 80016ae:	4628      	mov	r0, r5
 80016b0:	f7ff ffbc 	bl	800162c <_fflush_r>
 80016b4:	b9e0      	cbnz	r0, 80016f0 <__swbuf_r+0x74>
 80016b6:	68a3      	ldr	r3, [r4, #8]
 80016b8:	3b01      	subs	r3, #1
 80016ba:	60a3      	str	r3, [r4, #8]
 80016bc:	6823      	ldr	r3, [r4, #0]
 80016be:	1c5a      	adds	r2, r3, #1
 80016c0:	6022      	str	r2, [r4, #0]
 80016c2:	701e      	strb	r6, [r3, #0]
 80016c4:	6962      	ldr	r2, [r4, #20]
 80016c6:	1c43      	adds	r3, r0, #1
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d004      	beq.n	80016d6 <__swbuf_r+0x5a>
 80016cc:	89a3      	ldrh	r3, [r4, #12]
 80016ce:	07db      	lsls	r3, r3, #31
 80016d0:	d506      	bpl.n	80016e0 <__swbuf_r+0x64>
 80016d2:	2e0a      	cmp	r6, #10
 80016d4:	d104      	bne.n	80016e0 <__swbuf_r+0x64>
 80016d6:	4621      	mov	r1, r4
 80016d8:	4628      	mov	r0, r5
 80016da:	f7ff ffa7 	bl	800162c <_fflush_r>
 80016de:	b938      	cbnz	r0, 80016f0 <__swbuf_r+0x74>
 80016e0:	4638      	mov	r0, r7
 80016e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80016e4:	4621      	mov	r1, r4
 80016e6:	4628      	mov	r0, r5
 80016e8:	f000 f806 	bl	80016f8 <__swsetup_r>
 80016ec:	2800      	cmp	r0, #0
 80016ee:	d0d5      	beq.n	800169c <__swbuf_r+0x20>
 80016f0:	f04f 37ff 	mov.w	r7, #4294967295
 80016f4:	e7f4      	b.n	80016e0 <__swbuf_r+0x64>
	...

080016f8 <__swsetup_r>:
 80016f8:	b538      	push	{r3, r4, r5, lr}
 80016fa:	4b2a      	ldr	r3, [pc, #168]	; (80017a4 <__swsetup_r+0xac>)
 80016fc:	4605      	mov	r5, r0
 80016fe:	6818      	ldr	r0, [r3, #0]
 8001700:	460c      	mov	r4, r1
 8001702:	b118      	cbz	r0, 800170c <__swsetup_r+0x14>
 8001704:	6a03      	ldr	r3, [r0, #32]
 8001706:	b90b      	cbnz	r3, 800170c <__swsetup_r+0x14>
 8001708:	f7ff fa36 	bl	8000b78 <__sinit>
 800170c:	89a3      	ldrh	r3, [r4, #12]
 800170e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001712:	0718      	lsls	r0, r3, #28
 8001714:	d422      	bmi.n	800175c <__swsetup_r+0x64>
 8001716:	06d9      	lsls	r1, r3, #27
 8001718:	d407      	bmi.n	800172a <__swsetup_r+0x32>
 800171a:	2309      	movs	r3, #9
 800171c:	602b      	str	r3, [r5, #0]
 800171e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001722:	81a3      	strh	r3, [r4, #12]
 8001724:	f04f 30ff 	mov.w	r0, #4294967295
 8001728:	e034      	b.n	8001794 <__swsetup_r+0x9c>
 800172a:	0758      	lsls	r0, r3, #29
 800172c:	d512      	bpl.n	8001754 <__swsetup_r+0x5c>
 800172e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001730:	b141      	cbz	r1, 8001744 <__swsetup_r+0x4c>
 8001732:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001736:	4299      	cmp	r1, r3
 8001738:	d002      	beq.n	8001740 <__swsetup_r+0x48>
 800173a:	4628      	mov	r0, r5
 800173c:	f7ff fb24 	bl	8000d88 <_free_r>
 8001740:	2300      	movs	r3, #0
 8001742:	6363      	str	r3, [r4, #52]	; 0x34
 8001744:	89a3      	ldrh	r3, [r4, #12]
 8001746:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800174a:	81a3      	strh	r3, [r4, #12]
 800174c:	2300      	movs	r3, #0
 800174e:	6063      	str	r3, [r4, #4]
 8001750:	6923      	ldr	r3, [r4, #16]
 8001752:	6023      	str	r3, [r4, #0]
 8001754:	89a3      	ldrh	r3, [r4, #12]
 8001756:	f043 0308 	orr.w	r3, r3, #8
 800175a:	81a3      	strh	r3, [r4, #12]
 800175c:	6923      	ldr	r3, [r4, #16]
 800175e:	b94b      	cbnz	r3, 8001774 <__swsetup_r+0x7c>
 8001760:	89a3      	ldrh	r3, [r4, #12]
 8001762:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001766:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800176a:	d003      	beq.n	8001774 <__swsetup_r+0x7c>
 800176c:	4621      	mov	r1, r4
 800176e:	4628      	mov	r0, r5
 8001770:	f000 f850 	bl	8001814 <__smakebuf_r>
 8001774:	89a0      	ldrh	r0, [r4, #12]
 8001776:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800177a:	f010 0301 	ands.w	r3, r0, #1
 800177e:	d00a      	beq.n	8001796 <__swsetup_r+0x9e>
 8001780:	2300      	movs	r3, #0
 8001782:	60a3      	str	r3, [r4, #8]
 8001784:	6963      	ldr	r3, [r4, #20]
 8001786:	425b      	negs	r3, r3
 8001788:	61a3      	str	r3, [r4, #24]
 800178a:	6923      	ldr	r3, [r4, #16]
 800178c:	b943      	cbnz	r3, 80017a0 <__swsetup_r+0xa8>
 800178e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001792:	d1c4      	bne.n	800171e <__swsetup_r+0x26>
 8001794:	bd38      	pop	{r3, r4, r5, pc}
 8001796:	0781      	lsls	r1, r0, #30
 8001798:	bf58      	it	pl
 800179a:	6963      	ldrpl	r3, [r4, #20]
 800179c:	60a3      	str	r3, [r4, #8]
 800179e:	e7f4      	b.n	800178a <__swsetup_r+0x92>
 80017a0:	2000      	movs	r0, #0
 80017a2:	e7f7      	b.n	8001794 <__swsetup_r+0x9c>
 80017a4:	20000058 	.word	0x20000058

080017a8 <_sbrk_r>:
 80017a8:	b538      	push	{r3, r4, r5, lr}
 80017aa:	4d06      	ldr	r5, [pc, #24]	; (80017c4 <_sbrk_r+0x1c>)
 80017ac:	2300      	movs	r3, #0
 80017ae:	4604      	mov	r4, r0
 80017b0:	4608      	mov	r0, r1
 80017b2:	602b      	str	r3, [r5, #0]
 80017b4:	f7ff f83a 	bl	800082c <_sbrk>
 80017b8:	1c43      	adds	r3, r0, #1
 80017ba:	d102      	bne.n	80017c2 <_sbrk_r+0x1a>
 80017bc:	682b      	ldr	r3, [r5, #0]
 80017be:	b103      	cbz	r3, 80017c2 <_sbrk_r+0x1a>
 80017c0:	6023      	str	r3, [r4, #0]
 80017c2:	bd38      	pop	{r3, r4, r5, pc}
 80017c4:	200001c4 	.word	0x200001c4

080017c8 <__swhatbuf_r>:
 80017c8:	b570      	push	{r4, r5, r6, lr}
 80017ca:	460c      	mov	r4, r1
 80017cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80017d0:	2900      	cmp	r1, #0
 80017d2:	b096      	sub	sp, #88	; 0x58
 80017d4:	4615      	mov	r5, r2
 80017d6:	461e      	mov	r6, r3
 80017d8:	da0d      	bge.n	80017f6 <__swhatbuf_r+0x2e>
 80017da:	89a3      	ldrh	r3, [r4, #12]
 80017dc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80017e0:	f04f 0100 	mov.w	r1, #0
 80017e4:	bf0c      	ite	eq
 80017e6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80017ea:	2340      	movne	r3, #64	; 0x40
 80017ec:	2000      	movs	r0, #0
 80017ee:	6031      	str	r1, [r6, #0]
 80017f0:	602b      	str	r3, [r5, #0]
 80017f2:	b016      	add	sp, #88	; 0x58
 80017f4:	bd70      	pop	{r4, r5, r6, pc}
 80017f6:	466a      	mov	r2, sp
 80017f8:	f000 f848 	bl	800188c <_fstat_r>
 80017fc:	2800      	cmp	r0, #0
 80017fe:	dbec      	blt.n	80017da <__swhatbuf_r+0x12>
 8001800:	9901      	ldr	r1, [sp, #4]
 8001802:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8001806:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800180a:	4259      	negs	r1, r3
 800180c:	4159      	adcs	r1, r3
 800180e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001812:	e7eb      	b.n	80017ec <__swhatbuf_r+0x24>

08001814 <__smakebuf_r>:
 8001814:	898b      	ldrh	r3, [r1, #12]
 8001816:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001818:	079d      	lsls	r5, r3, #30
 800181a:	4606      	mov	r6, r0
 800181c:	460c      	mov	r4, r1
 800181e:	d507      	bpl.n	8001830 <__smakebuf_r+0x1c>
 8001820:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001824:	6023      	str	r3, [r4, #0]
 8001826:	6123      	str	r3, [r4, #16]
 8001828:	2301      	movs	r3, #1
 800182a:	6163      	str	r3, [r4, #20]
 800182c:	b002      	add	sp, #8
 800182e:	bd70      	pop	{r4, r5, r6, pc}
 8001830:	ab01      	add	r3, sp, #4
 8001832:	466a      	mov	r2, sp
 8001834:	f7ff ffc8 	bl	80017c8 <__swhatbuf_r>
 8001838:	9900      	ldr	r1, [sp, #0]
 800183a:	4605      	mov	r5, r0
 800183c:	4630      	mov	r0, r6
 800183e:	f7ff fb0f 	bl	8000e60 <_malloc_r>
 8001842:	b948      	cbnz	r0, 8001858 <__smakebuf_r+0x44>
 8001844:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001848:	059a      	lsls	r2, r3, #22
 800184a:	d4ef      	bmi.n	800182c <__smakebuf_r+0x18>
 800184c:	f023 0303 	bic.w	r3, r3, #3
 8001850:	f043 0302 	orr.w	r3, r3, #2
 8001854:	81a3      	strh	r3, [r4, #12]
 8001856:	e7e3      	b.n	8001820 <__smakebuf_r+0xc>
 8001858:	89a3      	ldrh	r3, [r4, #12]
 800185a:	6020      	str	r0, [r4, #0]
 800185c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001860:	81a3      	strh	r3, [r4, #12]
 8001862:	9b00      	ldr	r3, [sp, #0]
 8001864:	6163      	str	r3, [r4, #20]
 8001866:	9b01      	ldr	r3, [sp, #4]
 8001868:	6120      	str	r0, [r4, #16]
 800186a:	b15b      	cbz	r3, 8001884 <__smakebuf_r+0x70>
 800186c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001870:	4630      	mov	r0, r6
 8001872:	f000 f81d 	bl	80018b0 <_isatty_r>
 8001876:	b128      	cbz	r0, 8001884 <__smakebuf_r+0x70>
 8001878:	89a3      	ldrh	r3, [r4, #12]
 800187a:	f023 0303 	bic.w	r3, r3, #3
 800187e:	f043 0301 	orr.w	r3, r3, #1
 8001882:	81a3      	strh	r3, [r4, #12]
 8001884:	89a3      	ldrh	r3, [r4, #12]
 8001886:	431d      	orrs	r5, r3
 8001888:	81a5      	strh	r5, [r4, #12]
 800188a:	e7cf      	b.n	800182c <__smakebuf_r+0x18>

0800188c <_fstat_r>:
 800188c:	b538      	push	{r3, r4, r5, lr}
 800188e:	4d07      	ldr	r5, [pc, #28]	; (80018ac <_fstat_r+0x20>)
 8001890:	2300      	movs	r3, #0
 8001892:	4604      	mov	r4, r0
 8001894:	4608      	mov	r0, r1
 8001896:	4611      	mov	r1, r2
 8001898:	602b      	str	r3, [r5, #0]
 800189a:	f7fe ff9e 	bl	80007da <_fstat>
 800189e:	1c43      	adds	r3, r0, #1
 80018a0:	d102      	bne.n	80018a8 <_fstat_r+0x1c>
 80018a2:	682b      	ldr	r3, [r5, #0]
 80018a4:	b103      	cbz	r3, 80018a8 <_fstat_r+0x1c>
 80018a6:	6023      	str	r3, [r4, #0]
 80018a8:	bd38      	pop	{r3, r4, r5, pc}
 80018aa:	bf00      	nop
 80018ac:	200001c4 	.word	0x200001c4

080018b0 <_isatty_r>:
 80018b0:	b538      	push	{r3, r4, r5, lr}
 80018b2:	4d06      	ldr	r5, [pc, #24]	; (80018cc <_isatty_r+0x1c>)
 80018b4:	2300      	movs	r3, #0
 80018b6:	4604      	mov	r4, r0
 80018b8:	4608      	mov	r0, r1
 80018ba:	602b      	str	r3, [r5, #0]
 80018bc:	f7fe ff9d 	bl	80007fa <_isatty>
 80018c0:	1c43      	adds	r3, r0, #1
 80018c2:	d102      	bne.n	80018ca <_isatty_r+0x1a>
 80018c4:	682b      	ldr	r3, [r5, #0]
 80018c6:	b103      	cbz	r3, 80018ca <_isatty_r+0x1a>
 80018c8:	6023      	str	r3, [r4, #0]
 80018ca:	bd38      	pop	{r3, r4, r5, pc}
 80018cc:	200001c4 	.word	0x200001c4

080018d0 <_init>:
 80018d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018d2:	bf00      	nop
 80018d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018d6:	bc08      	pop	{r3}
 80018d8:	469e      	mov	lr, r3
 80018da:	4770      	bx	lr

080018dc <_fini>:
 80018dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80018de:	bf00      	nop
 80018e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80018e2:	bc08      	pop	{r3}
 80018e4:	469e      	mov	lr, r3
 80018e6:	4770      	bx	lr
